
alcoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a618  0800a618  0001a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaa0  0800aaa0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa8  0800aaa8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaac  0800aaac  0001aaac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aab0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001e8  0800ac98  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800ac98  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185df  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003326  00000000  00000000  0003883a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ab  00000000  00000000  0003d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b1fa  00000000  00000000  0003e3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca5a  00000000  00000000  000695a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010aefe  00000000  00000000  00085fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074e8  00000000  00000000  00190f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001983e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a600 	.word	0x0800a600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a600 	.word	0x0800a600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <MX_ADC1_Init+0xe4>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f72:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f78:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7e:	4b29      	ldr	r3, [pc, #164]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fc8:	f001 fa4a 	bl	8002460 <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fd2:	f000 fd6c 	bl	8001aae <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <MX_ADC1_Init+0xe0>)
 8000fe2:	f002 f9cb 	bl	800337c <HAL_ADCEx_MultiModeConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fec:	f000 fd5f 	bl	8001aae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_ADC1_Init+0xe8>)
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ffc:	237f      	movs	r3, #127	; 0x7f
 8000ffe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001000:	2304      	movs	r3, #4
 8001002:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_ADC1_Init+0xe0>)
 800100e:	f001 fd17 	bl	8002a40 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001018:	f000 fd49 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000204 	.word	0x20000204
 8001028:	50040000 	.word	0x50040000
 800102c:	0c900008 	.word	0x0c900008

08001030 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0ac      	sub	sp, #176	; 0xb0
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2288      	movs	r2, #136	; 0x88
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f006 fa9e 	bl	8007592 <memset>
  if(adcHandle->Instance==ADC1)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a27      	ldr	r2, [pc, #156]	; (80010f8 <HAL_ADC_MspInit+0xc8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d146      	bne.n	80010ee <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001064:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001066:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001076:	2308      	movs	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4618      	mov	r0, r3
 8001092:	f003 ffa3 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800109c:	f000 fd07 	bl	8001aae <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a15      	ldr	r2, [pc, #84]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_ADC_MspInit+0xcc>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d0:	2304      	movs	r3, #4
 80010d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010d6:	230b      	movs	r3, #11
 80010d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_ADC_MspInit+0xd0>)
 80010ea:	f002 fadd 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ee:	bf00      	nop
 80010f0:	37b0      	adds	r7, #176	; 0xb0
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	50040000 	.word	0x50040000
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000800 	.word	0x48000800

08001104 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <MX_GPIO_Init+0x128>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a43      	ldr	r2, [pc, #268]	; (800122c <MX_GPIO_Init+0x128>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <MX_GPIO_Init+0x128>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <MX_GPIO_Init+0x128>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <MX_GPIO_Init+0x128>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <MX_GPIO_Init+0x128>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <MX_GPIO_Init+0x128>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a37      	ldr	r2, [pc, #220]	; (800122c <MX_GPIO_Init+0x128>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b35      	ldr	r3, [pc, #212]	; (800122c <MX_GPIO_Init+0x128>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <MX_GPIO_Init+0x128>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a31      	ldr	r2, [pc, #196]	; (800122c <MX_GPIO_Init+0x128>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <MX_GPIO_Init+0x128>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2123      	movs	r1, #35	; 0x23
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x12c>)
 8001180:	f002 fc54 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2120      	movs	r1, #32
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f002 fc4e 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	21f0      	movs	r1, #240	; 0xf0
 8001194:	4827      	ldr	r0, [pc, #156]	; (8001234 <MX_GPIO_Init+0x130>)
 8001196:	f002 fc49 	bl	8003a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	481f      	ldr	r0, [pc, #124]	; (8001230 <MX_GPIO_Init+0x12c>)
 80011b2:	f002 fa79 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|BUZZER_Pin;
 80011b6:	2323      	movs	r3, #35	; 0x23
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <MX_GPIO_Init+0x12c>)
 80011ce:	f002 fa6b 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d2:	2320      	movs	r3, #32
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f002 fa5c 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_GPIO_Init+0x12c>)
 8001204:	f002 fa50 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001208:	23f0      	movs	r3, #240	; 0xf0
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_GPIO_Init+0x130>)
 8001220:	f002 fa42 	bl	80036a8 <HAL_GPIO_Init>

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400

08001238 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C1_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C1_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_I2C1_Init+0x74>)
 8001274:	f002 fbf2 	bl	8003a5c <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 fc16 	bl	8001aae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C1_Init+0x74>)
 8001286:	f002 ffad 	bl	80041e4 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fc0d 	bl	8001aae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2C1_Init+0x74>)
 8001298:	f002 ffef 	bl	800427a <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 fc04 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000268 	.word	0x20000268
 80012b0:	40005400 	.word	0x40005400
 80012b4:	10909cec 	.word	0x10909cec

080012b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ac      	sub	sp, #176	; 0xb0
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2288      	movs	r2, #136	; 0x88
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f006 f95a 	bl	8007592 <memset>
  if(i2cHandle->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_I2C_MspInit+0xb0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d13b      	bne.n	8001360 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fe71 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001300:	f000 fbd5 	bl	8001aae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_I2C_MspInit+0xb4>)
 8001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_I2C_MspInit+0xb4>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_I2C_MspInit+0xb4>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800131c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001324:	2312      	movs	r3, #18
 8001326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001336:	2304      	movs	r3, #4
 8001338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001340:	4619      	mov	r1, r3
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <HAL_I2C_MspInit+0xb8>)
 8001344:	f002 f9b0 	bl	80036a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_I2C_MspInit+0xb4>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_I2C_MspInit+0xb4>)
 800134e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001352:	6593      	str	r3, [r2, #88]	; 0x58
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_I2C_MspInit+0xb4>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001360:	bf00      	nop
 8001362:	37b0      	adds	r7, #176	; 0xb0
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40005400 	.word	0x40005400
 800136c:	40021000 	.word	0x40021000
 8001370:	48000400 	.word	0x48000400

08001374 <lcd_init>:
#include "stm32l4xx_hal.h"
#include "i2c.h"


void lcd_init(struct lcd_disp * lcd)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800138a:	2308      	movs	r3, #8
 800138c:	73fb      	strb	r3, [r7, #15]
	}
	/* init sequence */
	HAL_Delay(40);
 800138e:	2028      	movs	r0, #40	; 0x28
 8001390:	f000 fe5e 	bl	8002050 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	2130      	movs	r1, #48	; 0x30
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f829 	bl	80013f4 <lcd_write>
	HAL_Delay(5);
 80013a2:	2005      	movs	r0, #5
 80013a4:	f000 fe54 	bl	8002050 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	2130      	movs	r1, #48	; 0x30
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f81f 	bl	80013f4 <lcd_write>
	HAL_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fe4a 	bl	8002050 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	2130      	movs	r1, #48	; 0x30
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 f815 	bl	80013f4 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f80e 	bl	80013f4 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	210c      	movs	r1, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f807 	bl	80013f4 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 f89f 	bl	800152a <lcd_clear>
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	460b      	mov	r3, r1
 8001400:	71bb      	strb	r3, [r7, #6]
 8001402:	4613      	mov	r3, r2
 8001404:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001406:	79bb      	ldrb	r3, [r7, #6]
 8001408:	f023 030f 	bic.w	r3, r3, #15
 800140c:	b2da      	uxtb	r2, r3
 800140e:	797b      	ldrb	r3, [r7, #5]
 8001410:	4313      	orrs	r3, r2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	b2db      	uxtb	r3, r3
 800141a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 800141c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001420:	f023 030f 	bic.w	r3, r3, #15
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800142a:	4313      	orrs	r3, r2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	b2db      	uxtb	r3, r3
 8001430:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	b2da      	uxtb	r2, r3
 8001438:	797b      	ldrb	r3, [r7, #5]
 800143a:	4313      	orrs	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	b25a      	sxtb	r2, r3
 800144c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001450:	4313      	orrs	r3, r2
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	b299      	uxth	r1, r3
 800145c:	f107 020c 	add.w	r2, r7, #12
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2304      	movs	r3, #4
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <lcd_write+0x88>)
 8001468:	f002 fb94 	bl	8003b94 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800146c:	2005      	movs	r0, #5
 800146e:	f000 fdef 	bl	8002050 <HAL_Delay>
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000268 	.word	0x20000268

08001480 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	2300      	movs	r3, #0
 800148e:	73bb      	strb	r3, [r7, #14]
	if(lcd->bl)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800149a:	2308      	movs	r3, #8
 800149c:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f843 	bl	800152a <lcd_clear>

	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ffa1 	bl	80013f4 <lcd_write>

	while(lcd->f_line[i])
 80014b2:	e00f      	b.n	80014d4 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7818      	ldrb	r0, [r3, #0]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	7859      	ldrb	r1, [r3, #1]
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	f7ff ff93 	bl	80013f4 <lcd_write>
		i++;
 80014ce:	7bbb      	ldrb	r3, [r7, #14]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e9      	bne.n	80014b4 <lcd_display+0x34>
	}

	i = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	21c0      	movs	r1, #192	; 0xc0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff81 	bl	80013f4 <lcd_write>
	while(lcd->s_line[i])
 80014f2:	e00f      	b.n	8001514 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7818      	ldrb	r0, [r3, #0]
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	7c99      	ldrb	r1, [r3, #18]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	f7ff ff73 	bl	80013f4 <lcd_write>
		i++;
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001514:	7bbb      	ldrb	r3, [r7, #14]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	7c9b      	ldrb	r3, [r3, #18]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e9      	bne.n	80014f4 <lcd_display+0x74>
	}
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
	if(lcd->bl)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001540:	2308      	movs	r3, #8
 8001542:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff51 	bl	80013f4 <lcd_write>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d102      	bne.n	8001570 <__io_putchar+0x14>
    __io_putchar('\r');
 800156a:	200d      	movs	r0, #13
 800156c:	f7ff fff6 	bl	800155c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2201      	movs	r2, #1
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <__io_putchar+0x2c>)
 800157a:	f004 fd15 	bl	8005fa8 <HAL_UART_Transmit>

  return 1;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000330 	.word	0x20000330

0800158c <startHeating>:

#define HEATING_TIME	3
void startHeating()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	lcd_clear(&disp);
 8001592:	481b      	ldr	r0, [pc, #108]	; (8001600 <startHeating+0x74>)
 8001594:	f7ff ffc9 	bl	800152a <lcd_clear>
	sprintf((char*)disp.f_line,"Wcisnij przycisk");
 8001598:	491a      	ldr	r1, [pc, #104]	; (8001604 <startHeating+0x78>)
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <startHeating+0x7c>)
 800159c:	f005 ff96 	bl	80074cc <siprintf>
	sprintf((char*)disp.s_line," ");
 80015a0:	491a      	ldr	r1, [pc, #104]	; (800160c <startHeating+0x80>)
 80015a2:	481b      	ldr	r0, [pc, #108]	; (8001610 <startHeating+0x84>)
 80015a4:	f005 ff92 	bl	80074cc <siprintf>
	lcd_display(&disp);
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <startHeating+0x74>)
 80015aa:	f7ff ff69 	bl	8001480 <lcd_display>
	while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET);
 80015ae:	bf00      	nop
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <startHeating+0x88>)
 80015b4:	f002 fa22 	bl	80039fc <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d0f8      	beq.n	80015b0 <startHeating+0x24>
	for(int i = HEATING_TIME; i > 0; i--)
 80015be:	2303      	movs	r3, #3
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e012      	b.n	80015ea <startHeating+0x5e>
	{
		sprintf((char*)disp.f_line,"Nagrzewanie...");
 80015c4:	4914      	ldr	r1, [pc, #80]	; (8001618 <startHeating+0x8c>)
 80015c6:	4810      	ldr	r0, [pc, #64]	; (8001608 <startHeating+0x7c>)
 80015c8:	f005 ff80 	bl	80074cc <siprintf>
		sprintf((char*)disp.s_line,"Poczekaj: %d s",i);
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4913      	ldr	r1, [pc, #76]	; (800161c <startHeating+0x90>)
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <startHeating+0x84>)
 80015d2:	f005 ff7b 	bl	80074cc <siprintf>
		lcd_display(&disp);
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <startHeating+0x74>)
 80015d8:	f7ff ff52 	bl	8001480 <lcd_display>
		HAL_Delay(1000);
 80015dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e0:	f000 fd36 	bl	8002050 <HAL_Delay>
	for(int i = HEATING_TIME; i > 0; i--)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dce9      	bgt.n	80015c4 <startHeating+0x38>
	}
	lcd_clear(&disp);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <startHeating+0x74>)
 80015f2:	f7ff ff9a 	bl	800152a <lcd_clear>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002bc 	.word	0x200002bc
 8001604:	0800a618 	.word	0x0800a618
 8001608:	200002bd 	.word	0x200002bd
 800160c:	0800a62c 	.word	0x0800a62c
 8001610:	200002ce 	.word	0x200002ce
 8001614:	48000800 	.word	0x48000800
 8001618:	0800a630 	.word	0x0800a630
 800161c:	0800a640 	.word	0x0800a640

08001620 <sensorValue>:

uint32_t sensorValue()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <sensorValue+0x38>)
 8001628:	f001 f86a 	bl	8002700 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <sensorValue+0x38>)
 8001632:	f001 f91f 	bl	8002874 <HAL_ADC_PollForConversion>
	uint32_t value = HAL_ADC_GetValue(&hadc1);
 8001636:	4808      	ldr	r0, [pc, #32]	; (8001658 <sensorValue+0x38>)
 8001638:	f001 f9f4 	bl	8002a24 <HAL_ADC_GetValue>
 800163c:	6078      	str	r0, [r7, #4]
	printf("ADC = %lu\n", value);
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <sensorValue+0x3c>)
 8001642:	f005 ff31 	bl	80074a8 <iprintf>
	HAL_Delay(250);
 8001646:	20fa      	movs	r0, #250	; 0xfa
 8001648:	f000 fd02 	bl	8002050 <HAL_Delay>
	return value;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000204 	.word	0x20000204
 800165c:	0800a650 	.word	0x0800a650

08001660 <sensorValuetoV>:

float sensorValuetoV(uint32_t adcValue)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	float voltage = ((float)adcValue * 5) / 1024;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001672:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800167a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80016a8 <sensorValuetoV+0x48>
 800167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001682:	edc7 7a03 	vstr	s15, [r7, #12]
	printf("V = %f\n", voltage);
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f7fe ff5e 	bl	8000548 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <sensorValuetoV+0x4c>)
 8001692:	f005 ff09 	bl	80074a8 <iprintf>
	return voltage;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	ee07 3a90 	vmov	s15, r3
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	44800000 	.word	0x44800000
 80016ac:	0800a65c 	.word	0x0800a65c

080016b0 <measurementMode>:

//Pomiar ADC ma delay 250 stad to:
//4000/250 = 16
#define measTIME	16
uint32_t measurementMode()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
	uint32_t maximumValue = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
	uint32_t value = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
	lcd_clear(&disp);
 80016be:	4817      	ldr	r0, [pc, #92]	; (800171c <measurementMode+0x6c>)
 80016c0:	f7ff ff33 	bl	800152a <lcd_clear>
	sprintf((char*)disp.f_line,"Trwa pomiar...");
 80016c4:	4916      	ldr	r1, [pc, #88]	; (8001720 <measurementMode+0x70>)
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <measurementMode+0x74>)
 80016c8:	f005 ff00 	bl	80074cc <siprintf>
	sprintf((char*)disp.s_line," ");
 80016cc:	4916      	ldr	r1, [pc, #88]	; (8001728 <measurementMode+0x78>)
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <measurementMode+0x7c>)
 80016d0:	f005 fefc 	bl	80074cc <siprintf>
	lcd_display(&disp);
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <measurementMode+0x6c>)
 80016d6:	f7ff fed3 	bl	8001480 <lcd_display>
	for(int i = 0; i < measTIME; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e010      	b.n	8001702 <measurementMode+0x52>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2120      	movs	r1, #32
 80016e4:	4812      	ldr	r0, [pc, #72]	; (8001730 <measurementMode+0x80>)
 80016e6:	f002 f9a1 	bl	8003a2c <HAL_GPIO_WritePin>
		value = sensorValue();
 80016ea:	f7ff ff99 	bl	8001620 <sensorValue>
 80016ee:	6078      	str	r0, [r7, #4]
		if(value > maximumValue)
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d901      	bls.n	80016fc <measurementMode+0x4c>
		{
			maximumValue = value;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < measTIME; i++)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	ddeb      	ble.n	80016e0 <measurementMode+0x30>
		}
	}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2120      	movs	r1, #32
 800170c:	4808      	ldr	r0, [pc, #32]	; (8001730 <measurementMode+0x80>)
 800170e:	f002 f98d 	bl	8003a2c <HAL_GPIO_WritePin>
	return maximumValue;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002bc 	.word	0x200002bc
 8001720:	0800a664 	.word	0x0800a664
 8001724:	200002bd 	.word	0x200002bd
 8001728:	0800a62c 	.word	0x0800a62c
 800172c:	200002ce 	.word	0x200002ce
 8001730:	48000800 	.word	0x48000800
 8001734:	00000000 	.word	0x00000000

08001738 <calcPPM>:


// PPM = 150.4351049*v^5 - 2244.75988*v^4 + 13308.5139*v^3 -
//       39136.08594*v^2 + 57082.6258*v - 32982.05333
double calcPPM(double v)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0b00 	vstr	d0, [r7]
	double PPM = 0;
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	PPM = 150.4351049*pow(v,5) - 2244.75988*pow(v,4) + 13308.5139*pow(v,3) -
 800174e:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8001850 <calcPPM+0x118>
 8001752:	ed97 0b00 	vldr	d0, [r7]
 8001756:	f008 f819 	bl	800978c <pow>
 800175a:	ec51 0b10 	vmov	r0, r1, d0
 800175e:	a345      	add	r3, pc, #276	; (adr r3, 8001874 <calcPPM+0x13c>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7fe ff48 	bl	80005f8 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001858 <calcPPM+0x120>
 8001774:	ed97 0b00 	vldr	d0, [r7]
 8001778:	f008 f808 	bl	800978c <pow>
 800177c:	ec51 0b10 	vmov	r0, r1, d0
 8001780:	a33e      	add	r3, pc, #248	; (adr r3, 800187c <calcPPM+0x144>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff37 	bl	80005f8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd79 	bl	8000288 <__aeabi_dsub>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	461d      	mov	r5, r3
 800179e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001860 <calcPPM+0x128>
 80017a2:	ed97 0b00 	vldr	d0, [r7]
 80017a6:	f007 fff1 	bl	800978c <pow>
 80017aa:	ec51 0b10 	vmov	r0, r1, d0
 80017ae:	a335      	add	r3, pc, #212	; (adr r3, 8001884 <calcPPM+0x14c>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fd64 	bl	800028c <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
		  39136.08594*pow(v,2) + 57082.6258*v - 32982.05333;
 80017cc:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001868 <calcPPM+0x130>
 80017d0:	ed97 0b00 	vldr	d0, [r7]
 80017d4:	f007 ffda 	bl	800978c <pow>
 80017d8:	ec51 0b10 	vmov	r0, r1, d0
 80017dc:	a32b      	add	r3, pc, #172	; (adr r3, 800188c <calcPPM+0x154>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff09 	bl	80005f8 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
	PPM = 150.4351049*pow(v,5) - 2244.75988*pow(v,4) + 13308.5139*pow(v,3) -
 80017ea:	4620      	mov	r0, r4
 80017ec:	4629      	mov	r1, r5
 80017ee:	f7fe fd4b 	bl	8000288 <__aeabi_dsub>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	461d      	mov	r5, r3
		  39136.08594*pow(v,2) + 57082.6258*v - 32982.05333;
 80017fa:	a326      	add	r3, pc, #152	; (adr r3, 8001894 <calcPPM+0x15c>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001804:	f7fe fef8 	bl	80005f8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe fd3c 	bl	800028c <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
	PPM = 150.4351049*pow(v,5) - 2244.75988*pow(v,4) + 13308.5139*pow(v,3) -
 800181c:	a31f      	add	r3, pc, #124	; (adr r3, 800189c <calcPPM+0x164>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe fd31 	bl	8000288 <__aeabi_dsub>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	printf("PPM = %.2lf\n", PPM);
 800182e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <calcPPM+0x138>)
 8001834:	f005 fe38 	bl	80074a8 <iprintf>
	return PPM;
 8001838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800183c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001840:	eeb0 0a47 	vmov.f32	s0, s14
 8001844:	eef0 0a67 	vmov.f32	s1, s15
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	00000000 	.word	0x00000000
 8001854:	40140000 	.word	0x40140000
 8001858:	00000000 	.word	0x00000000
 800185c:	40100000 	.word	0x40100000
 8001860:	00000000 	.word	0x00000000
 8001864:	40080000 	.word	0x40080000
 8001868:	00000000 	.word	0x00000000
 800186c:	40000000 	.word	0x40000000
 8001870:	0800a674 	.word	0x0800a674
 8001874:	611c7a8a 	.word	0x611c7a8a
 8001878:	4062cdec 	.word	0x4062cdec
 800187c:	0efdc9c5 	.word	0x0efdc9c5
 8001880:	40a18985 	.word	0x40a18985
 8001884:	c779a6b5 	.word	0xc779a6b5
 8001888:	40c9fe41 	.word	0x40c9fe41
 800188c:	c0053e2d 	.word	0xc0053e2d
 8001890:	40e31c02 	.word	0x40e31c02
 8001894:	068db8bb 	.word	0x068db8bb
 8001898:	40ebdf54 	.word	0x40ebdf54
 800189c:	b4e11dbd 	.word	0xb4e11dbd
 80018a0:	40e01ac1 	.word	0x40e01ac1
 80018a4:	00000000 	.word	0x00000000

080018a8 <calcBAC>:

float calcBAC(double ppm)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	ed87 0b00 	vstr	d0, [r7]
	float BAC;
	if(ppm <= 70) {
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <calcBAC+0x88>)
 80018b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018bc:	f7ff f918 	bl	8000af0 <__aeabi_dcmple>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <calcBAC+0x26>
		BAC = 0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e01b      	b.n	8001906 <calcBAC+0x5e>
	} else if(ppm >= 500) {
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <calcBAC+0x8c>)
 80018d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018d8:	f7ff f914 	bl	8000b04 <__aeabi_dcmpge>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <calcBAC+0x40>
		BAC = 888888;
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <calcBAC+0x90>)
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e00e      	b.n	8001906 <calcBAC+0x5e>
	} else {
	BAC = ppm / 2600.0f;
 80018e8:	a30f      	add	r3, pc, #60	; (adr r3, 8001928 <calcBAC+0x80>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f2:	f7fe ffab 	bl	800084c <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f953 	bl	8000ba8 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	60fb      	str	r3, [r7, #12]
	}
	printf("BAC = %.3f\n ", BAC);
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <calcBAC+0x94>)
 8001912:	f005 fdc9 	bl	80074a8 <iprintf>
	return BAC;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	ee07 3a90 	vmov	s15, r3
}
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	00000000 	.word	0x00000000
 800192c:	40a45000 	.word	0x40a45000
 8001930:	40518000 	.word	0x40518000
 8001934:	407f4000 	.word	0x407f4000
 8001938:	49590380 	.word	0x49590380
 800193c:	0800a684 	.word	0x0800a684

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001946:	f000 fb07 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194a:	f000 f85f 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194e:	f7ff fbd9 	bl	8001104 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001952:	f000 fa4b 	bl	8001dec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001956:	f000 f9d5 	bl	8001d04 <MX_TIM1_Init>
  MX_I2C1_Init();
 800195a:	f7ff fc6d 	bl	8001238 <MX_I2C1_Init>
  MX_ADC1_Init();
 800195e:	f7ff faf1 	bl	8000f44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //LCD config
  disp.addr = (0x27 << 1);
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <main+0xb8>)
 8001964:	224e      	movs	r2, #78	; 0x4e
 8001966:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <main+0xb8>)
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <main+0xb8>)
 8001972:	f7ff fcff 	bl	8001374 <lcd_init>


  uint32_t maxValue = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  float maxValueVoltage = 0;
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  double PPM = 0;
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	e9c7 2302 	strd	r2, r3, [r7, #8]
  float BAC = 0;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   startHeating();
 8001992:	f7ff fdfb 	bl	800158c <startHeating>
	   maxValue = measurementMode();
 8001996:	f7ff fe8b 	bl	80016b0 <measurementMode>
 800199a:	6178      	str	r0, [r7, #20]
	   maxValueVoltage = sensorValuetoV(maxValue);
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7ff fe5f 	bl	8001660 <sensorValuetoV>
 80019a2:	ed87 0a04 	vstr	s0, [r7, #16]
	   PPM = calcPPM((double)maxValueVoltage);
 80019a6:	6938      	ldr	r0, [r7, #16]
 80019a8:	f7fe fdce 	bl	8000548 <__aeabi_f2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	ec43 2b10 	vmov	d0, r2, r3
 80019b4:	f7ff fec0 	bl	8001738 <calcPPM>
 80019b8:	ed87 0b02 	vstr	d0, [r7, #8]
	   BAC = calcBAC(PPM);
 80019bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80019c0:	f7ff ff72 	bl	80018a8 <calcBAC>
 80019c4:	ed87 0a01 	vstr	s0, [r7, #4]
	   lcd_clear(&disp);
 80019c8:	480b      	ldr	r0, [pc, #44]	; (80019f8 <main+0xb8>)
 80019ca:	f7ff fdae 	bl	800152a <lcd_clear>
	   sprintf((char*)disp.f_line, "Wynik pomiaru: ");
 80019ce:	490b      	ldr	r1, [pc, #44]	; (80019fc <main+0xbc>)
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <main+0xc0>)
 80019d2:	f005 fd7b 	bl	80074cc <siprintf>
	   sprintf((char*)disp.s_line, "BAC = %.3f",BAC);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe fdb6 	bl	8000548 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4908      	ldr	r1, [pc, #32]	; (8001a04 <main+0xc4>)
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <main+0xc8>)
 80019e4:	f005 fd72 	bl	80074cc <siprintf>
	   lcd_display(&disp);
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <main+0xb8>)
 80019ea:	f7ff fd49 	bl	8001480 <lcd_display>
	   HAL_Delay(5000);
 80019ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80019f2:	f000 fb2d 	bl	8002050 <HAL_Delay>
	   startHeating();
 80019f6:	e7cc      	b.n	8001992 <main+0x52>
 80019f8:	200002bc 	.word	0x200002bc
 80019fc:	0800a694 	.word	0x0800a694
 8001a00:	200002bd 	.word	0x200002bd
 8001a04:	0800a6a4 	.word	0x0800a6a4
 8001a08:	200002ce 	.word	0x200002ce

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b096      	sub	sp, #88	; 0x58
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	2244      	movs	r2, #68	; 0x44
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 fdb9 	bl	8007592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a32:	f002 fc7d 	bl	8004330 <HAL_PWREx_ControlVoltageScaling>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a3c:	f000 f837 	bl	8001aae <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a40:	2302      	movs	r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a52:	2302      	movs	r3, #2
 8001a54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fcb4 	bl	80043dc <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a7a:	f000 f818 	bl	8001aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7e:	230f      	movs	r3, #15
 8001a80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a82:	2303      	movs	r3, #3
 8001a84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	2104      	movs	r1, #4
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f87c 	bl	8004b94 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001aa2:	f000 f804 	bl	8001aae <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3758      	adds	r7, #88	; 0x58
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <Error_Handler+0x8>

08001ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <HAL_MspInit+0x44>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_MspInit+0x44>)
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x44>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x44>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 fa60 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6e:	f005 fd63 	bl	8007638 <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fcb5 	bl	800155c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
  }
  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f005 fcc8 	bl	8007638 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20018000 	.word	0x20018000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	200002e0 	.word	0x200002e0
 8001cdc:	20000508 	.word	0x20000508

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d24:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <MX_TIM1_Init+0xa4>)
 8001d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d2a:	224f      	movs	r2, #79	; 0x4f
 8001d2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d4e:	4815      	ldr	r0, [pc, #84]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d50:	f003 fe00 	bl	8005954 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d5a:	f7ff fea8 	bl	8001aae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480e      	ldr	r0, [pc, #56]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d6c:	f003 fe49 	bl	8005a02 <HAL_TIM_ConfigClockSource>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001d76:	f7ff fe9a 	bl	8001aae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <MX_TIM1_Init+0xa0>)
 8001d8c:	f004 f836 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d96:	f7ff fe8a 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200002e4 	.word	0x200002e4
 8001da8:	40012c00 	.word	0x40012c00

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_TIM_Base_MspInit+0x38>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40021000 	.word	0x40021000

08001dec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <MX_USART2_UART_Init+0x5c>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_USART2_UART_Init+0x58>)
 8001e30:	f004 f86c 	bl	8005f0c <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e3a:	f7ff fe38 	bl	8001aae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000330 	.word	0x20000330
 8001e48:	40004400 	.word	0x40004400

08001e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0ac      	sub	sp, #176	; 0xb0
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2288      	movs	r2, #136	; 0x88
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f005 fb90 	bl	8007592 <memset>
  if(uartHandle->Instance==USART2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_UART_MspInit+0xb0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d13b      	bne.n	8001ef4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 f8a7 	bl	8004fdc <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e94:	f7ff fe0b 	bl	8001aae <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_UART_MspInit+0xb4>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f001 fbda 	bl	80036a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	37b0      	adds	r7, #176	; 0xb0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40004400 	.word	0x40004400
 8001f00:	40021000 	.word	0x40021000

08001f04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f08:	f7ff feea 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopForever+0xe>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopForever+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f32:	f005 fb87 	bl	8007644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f36:	f7ff fd03 	bl	8001940 <main>

08001f3a <LoopForever>:

LoopForever:
    b LoopForever
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001f48:	0800aab0 	.word	0x0800aab0
  ldr r2, =_sbss
 8001f4c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001f50:	20000508 	.word	0x20000508

08001f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_2_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_Init+0x3c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_Init+0x3c>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f001 fb66 	bl	8003640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f80f 	bl	8001f98 <HAL_InitTick>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	e001      	b.n	8001f8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f86:	f7ff fd97 	bl	8001ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_InitTick+0x6c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_InitTick+0x70>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_InitTick+0x6c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 fb63 	bl	800368e <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d809      	bhi.n	8001fe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f001 fb3b 	bl	8003656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_InitTick+0x74>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e007      	b.n	8001ff8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e004      	b.n	8001ff8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e001      	b.n	8001ff8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	200003b8 	.word	0x200003b8

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200003b8 	.word	0x200003b8

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_Delay+0x44>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008

08002098 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3360      	adds	r3, #96	; 0x60
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <LL_ADC_SetOffset+0x44>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	4313      	orrs	r3, r2
 8002130:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	03fff000 	.word	0x03fff000

08002148 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3360      	adds	r3, #96	; 0x60
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3330      	adds	r3, #48	; 0x30
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	4413      	add	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	211f      	movs	r1, #31
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 011f 	and.w	r1, r3, #31
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	431a      	orrs	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3314      	adds	r3, #20
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	0e5b      	lsrs	r3, r3, #25
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	0d1b      	lsrs	r3, r3, #20
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2107      	movs	r1, #7
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0d1b      	lsrs	r3, r3, #20
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0318 	and.w	r3, r3, #24
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	400b      	ands	r3, r1
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	0007ffff 	.word	0x0007ffff

080022c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6093      	str	r3, [r2, #8]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002338:	d101      	bne.n	800233e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800235c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002388:	d101      	bne.n	800238e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <LL_ADC_IsEnabled+0x18>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <LL_ADC_IsEnabled+0x1a>
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d101      	bne.n	800242a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d101      	bne.n	8002450 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e130      	b.n	80026dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7fe fdd1 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff3f 	bl	8002324 <LL_ADC_IsDeepPowerDownEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff25 	bl	8002300 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ff5a 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff3e 	bl	800234c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d0:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <HAL_ADC_Init+0x284>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	4a84      	ldr	r2, [pc, #528]	; (80026e8 <HAL_ADC_Init+0x288>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff3c 	bl	8002374 <LL_ADC_IsInternalRegulatorEnabled>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff75 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002528:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 80c9 	bne.w	80026ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f040 80c5 	bne.w	80026ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002548:	f043 0202 	orr.w	r2, r3, #2
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff35 	bl	80023c4 <LL_ADC_IsEnabled>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d115      	bne.n	800258c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002560:	4862      	ldr	r0, [pc, #392]	; (80026ec <HAL_ADC_Init+0x28c>)
 8002562:	f7ff ff2f 	bl	80023c4 <LL_ADC_IsEnabled>
 8002566:	4604      	mov	r4, r0
 8002568:	4861      	ldr	r0, [pc, #388]	; (80026f0 <HAL_ADC_Init+0x290>)
 800256a:	f7ff ff2b 	bl	80023c4 <LL_ADC_IsEnabled>
 800256e:	4603      	mov	r3, r0
 8002570:	431c      	orrs	r4, r3
 8002572:	4860      	ldr	r0, [pc, #384]	; (80026f4 <HAL_ADC_Init+0x294>)
 8002574:	f7ff ff26 	bl	80023c4 <LL_ADC_IsEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	4323      	orrs	r3, r4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	485c      	ldr	r0, [pc, #368]	; (80026f8 <HAL_ADC_Init+0x298>)
 8002588:	f7ff fd86 	bl	8002098 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7e5b      	ldrb	r3, [r3, #25]
 8002590:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002596:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800259c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	045b      	lsls	r3, r3, #17
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_ADC_Init+0x29c>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff1b 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 8002602:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d13d      	bne.n	8002686 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d13a      	bne.n	8002686 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002614:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800261c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	430b      	orrs	r3, r1
 8002638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002640:	2b01      	cmp	r3, #1
 8002642:	d118      	bne.n	8002676 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002666:	430a      	orrs	r2, r1
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	e007      	b.n	8002686 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10c      	bne.n	80026a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f023 010f 	bic.w	r1, r3, #15
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	1e5a      	subs	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
 80026a6:	e007      	b.n	80026b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020f 	bic.w	r2, r2, #15
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f023 0303 	bic.w	r3, r3, #3
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026da:	7ffb      	ldrb	r3, [r7, #31]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3724      	adds	r7, #36	; 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	20000000 	.word	0x20000000
 80026e8:	053e2d63 	.word	0x053e2d63
 80026ec:	50040000 	.word	0x50040000
 80026f0:	50040100 	.word	0x50040100
 80026f4:	50040200 	.word	0x50040200
 80026f8:	50040300 	.word	0x50040300
 80026fc:	fff0c007 	.word	0xfff0c007

08002700 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002708:	4857      	ldr	r0, [pc, #348]	; (8002868 <HAL_ADC_Start+0x168>)
 800270a:	f7ff fddd 	bl	80022c8 <LL_ADC_GetMultimode>
 800270e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fe7c 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 809c 	bne.w	800285a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_ADC_Start+0x30>
 800272c:	2302      	movs	r3, #2
 800272e:	e097      	b.n	8002860 <HAL_ADC_Start+0x160>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fd73 	bl	8003224 <ADC_Enable>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 8083 	bne.w	8002850 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_ADC_Start+0x16c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d002      	beq.n	800276e <HAL_ADC_Start+0x6e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e000      	b.n	8002770 <HAL_ADC_Start+0x70>
 800276e:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_ADC_Start+0x170>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	4293      	cmp	r3, r2
 8002776:	d002      	beq.n	800277e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d106      	bne.n	80027a6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f023 0206 	bic.w	r2, r3, #6
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	659a      	str	r2, [r3, #88]	; 0x58
 80027a4:	e002      	b.n	80027ac <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	221c      	movs	r2, #28
 80027b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2a      	ldr	r2, [pc, #168]	; (800286c <HAL_ADC_Start+0x16c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d002      	beq.n	80027cc <HAL_ADC_Start+0xcc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e000      	b.n	80027ce <HAL_ADC_Start+0xce>
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_ADC_Start+0x170>)
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d008      	beq.n	80027e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d002      	beq.n	80027e8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b09      	cmp	r3, #9
 80027e6:	d114      	bne.n	8002812 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fded 	bl	80023ea <LL_ADC_REG_StartConversion>
 8002810:	e025      	b.n	800285e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_ADC_Start+0x16c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d002      	beq.n	800282e <HAL_ADC_Start+0x12e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e000      	b.n	8002830 <HAL_ADC_Start+0x130>
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_ADC_Start+0x170>)
 8002830:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
 800284e:	e006      	b.n	800285e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002858:	e001      	b.n	800285e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	50040300 	.word	0x50040300
 800286c:	50040100 	.word	0x50040100
 8002870:	50040000 	.word	0x50040000

08002874 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287e:	4866      	ldr	r0, [pc, #408]	; (8002a18 <HAL_ADC_PollForConversion+0x1a4>)
 8002880:	f7ff fd22 	bl	80022c8 <LL_ADC_GetMultimode>
 8002884:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d102      	bne.n	8002894 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800288e:	2308      	movs	r3, #8
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e02a      	b.n	80028ea <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d002      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b09      	cmp	r3, #9
 80028a4:	d111      	bne.n	80028ca <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0a4      	b.n	8002a0e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028c4:	2304      	movs	r3, #4
 80028c6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028c8:	e00f      	b.n	80028ea <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028ca:	4853      	ldr	r0, [pc, #332]	; (8002a18 <HAL_ADC_PollForConversion+0x1a4>)
 80028cc:	f7ff fd0a 	bl	80022e4 <LL_ADC_GetMultiDMATransfer>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e093      	b.n	8002a0e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028e6:	2304      	movs	r3, #4
 80028e8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fba5 	bl	8002038 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f0:	e021      	b.n	8002936 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d01d      	beq.n	8002936 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028fa:	f7ff fb9d 	bl	8002038 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <HAL_ADC_PollForConversion+0x9c>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d112      	bne.n	8002936 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e06b      	b.n	8002a0e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0d6      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fc28 	bl	80021aa <LL_ADC_REG_IsTriggerSourceSWStart>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01c      	beq.n	800299a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e5b      	ldrb	r3, [r3, #25]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d111      	bne.n	800299a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_ADC_PollForConversion+0x1a8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d002      	beq.n	80029aa <HAL_ADC_PollForConversion+0x136>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e000      	b.n	80029ac <HAL_ADC_PollForConversion+0x138>
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <HAL_ADC_PollForConversion+0x1ac>)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d008      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d104      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e00c      	b.n	80029ea <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_ADC_PollForConversion+0x1a8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d002      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x16c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e000      	b.n	80029e2 <HAL_ADC_PollForConversion+0x16e>
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_ADC_PollForConversion+0x1ac>)
 80029e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d104      	bne.n	80029fa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2208      	movs	r2, #8
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e008      	b.n	8002a0c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	220c      	movs	r2, #12
 8002a0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	50040300 	.word	0x50040300
 8002a1c:	50040100 	.word	0x50040100
 8002a20:	50040000 	.word	0x50040000

08002a24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0b6      	sub	sp, #216	; 0xd8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x22>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e3c9      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x7b6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fccf 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 83aa 	bne.w	80031d0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d824      	bhi.n	8002ad6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	3b02      	subs	r3, #2
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d81b      	bhi.n	8002ace <HAL_ADC_ConfigChannel+0x8e>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <HAL_ADC_ConfigChannel+0x5c>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002aad 	.word	0x08002aad
 8002aa0:	08002ab5 	.word	0x08002ab5
 8002aa4:	08002abd 	.word	0x08002abd
 8002aa8:	08002ac5 	.word	0x08002ac5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002aac:	230c      	movs	r3, #12
 8002aae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ab2:	e010      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002aba:	e00c      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002abc:	2318      	movs	r3, #24
 8002abe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ac2:	e008      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002acc:	e003      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ace:	2306      	movs	r3, #6
 8002ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ad4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ae4:	f7ff fb74 	bl	80021d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fc90 	bl	8002412 <LL_ADC_REG_IsConversionOngoing>
 8002af2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fc9c 	bl	8002438 <LL_ADC_INJ_IsConversionOngoing>
 8002b00:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 81a4 	bne.w	8002e56 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 819f 	bne.w	8002e56 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	461a      	mov	r2, r3
 8002b26:	f7ff fb7f 	bl	8002228 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d00a      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b5c:	f7ff fad0 	bl	8002100 <LL_ADC_SetOffset>
 8002b60:	e179      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff faed 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x14e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fae2 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	e01e      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x18c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fad7 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e004      	b.n	8002bca <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002bc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1a4>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	e018      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1d6>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002c00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff faa6 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fa8a 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x214>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fa7f 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 021f 	and.w	r2, r3, #31
 8002c52:	e01e      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x252>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fa74 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002c7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c82:	2320      	movs	r3, #32
 8002c84:	e004      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x26a>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	e018      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x29c>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cc2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002cc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa43 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2102      	movs	r1, #2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fa27 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x2da>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2102      	movs	r1, #2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fa1c 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002d10:	4603      	mov	r3, r0
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	e01e      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x318>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2102      	movs	r1, #2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fa11 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e004      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x330>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	e014      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x35a>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e004      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f9e4 	bl	8002174 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2103      	movs	r1, #3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff f9c8 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x398>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f9bd 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	0e9b      	lsrs	r3, r3, #26
 8002dd2:	f003 021f 	and.w	r2, r3, #31
 8002dd6:	e017      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x3c8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2103      	movs	r1, #3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff f9b2 	bl	8002148 <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	e003      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x3e0>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	e011      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x404>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e30:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e38:	2320      	movs	r3, #32
 8002e3a:	e003      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d106      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2103      	movs	r1, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f98f 	bl	8002174 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fab2 	bl	80023c4 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 8140 	bne.w	80030e8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f7ff fa03 	bl	8002280 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	4a8f      	ldr	r2, [pc, #572]	; (80030bc <HAL_ADC_ConfigChannel+0x67c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	f040 8131 	bne.w	80030e8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x46e>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	bf94      	ite	ls
 8002ea6:	2301      	movls	r3, #1
 8002ea8:	2300      	movhi	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e019      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x4a2>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e003      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	bf94      	ite	ls
 8002edc:	2301      	movls	r3, #1
 8002ede:	2300      	movhi	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d079      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d107      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x4c2>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	3301      	adds	r3, #1
 8002efa:	069b      	lsls	r3, r3, #26
 8002efc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f00:	e015      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x4ee>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e003      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	069b      	lsls	r3, r3, #26
 8002f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x50e>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	3301      	adds	r3, #1
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	e017      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x53e>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	ea42 0103 	orr.w	r1, r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x564>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	e018      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x596>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	e081      	b.n	80030de <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x5b6>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	3301      	adds	r3, #1
 8002fee:	069b      	lsls	r3, r3, #26
 8002ff0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff4:	e015      	b.n	8003022 <HAL_ADC_ConfigChannel+0x5e2>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e003      	b.n	800301a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	069b      	lsls	r3, r3, #26
 800301e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x602>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	e017      	b.n	8003072 <HAL_ADC_ConfigChannel+0x632>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	61bb      	str	r3, [r7, #24]
  return result;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e003      	b.n	8003066 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	fab3 f383 	clz	r3, r3
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	ea42 0103 	orr.w	r1, r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <HAL_ADC_ConfigChannel+0x65e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	3301      	adds	r3, #1
 800308a:	f003 021f 	and.w	r2, r3, #31
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	3b1e      	subs	r3, #30
 8003096:	051b      	lsls	r3, r3, #20
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309c:	e01e      	b.n	80030dc <HAL_ADC_ConfigChannel+0x69c>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	60fb      	str	r3, [r7, #12]
  return result;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80030b6:	2320      	movs	r3, #32
 80030b8:	e006      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x688>
 80030ba:	bf00      	nop
 80030bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 021f 	and.w	r2, r3, #31
 80030ce:	4613      	mov	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	3b1e      	subs	r3, #30
 80030d6:	051b      	lsls	r3, r3, #20
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7ff f8a0 	bl	8002228 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_ADC_ConfigChannel+0x7c0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d07a      	beq.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030f4:	4843      	ldr	r0, [pc, #268]	; (8003204 <HAL_ADC_ConfigChannel+0x7c4>)
 80030f6:	f7fe fff5 	bl	80020e4 <LL_ADC_GetCommonPathInternalCh>
 80030fa:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <HAL_ADC_ConfigChannel+0x7c8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d12c      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800310c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d126      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3c      	ldr	r2, [pc, #240]	; (800320c <HAL_ADC_ConfigChannel+0x7cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x6e8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_ADC_ConfigChannel+0x7d0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d15d      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800312c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003130:	4619      	mov	r1, r3
 8003132:	4834      	ldr	r0, [pc, #208]	; (8003204 <HAL_ADC_ConfigChannel+0x7c4>)
 8003134:	f7fe ffc3 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_ADC_ConfigChannel+0x7d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	4a36      	ldr	r2, [pc, #216]	; (8003218 <HAL_ADC_ConfigChannel+0x7d8>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003152:	e002      	b.n	800315a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	3b01      	subs	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f9      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003160:	e040      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2d      	ldr	r2, [pc, #180]	; (800321c <HAL_ADC_ConfigChannel+0x7dc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d118      	bne.n	800319e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800316c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d112      	bne.n	800319e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <HAL_ADC_ConfigChannel+0x7cc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_ADC_ConfigChannel+0x74c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_ADC_ConfigChannel+0x7d0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d12d      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003194:	4619      	mov	r1, r3
 8003196:	481b      	ldr	r0, [pc, #108]	; (8003204 <HAL_ADC_ConfigChannel+0x7c4>)
 8003198:	f7fe ff91 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800319c:	e024      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_ADC_ConfigChannel+0x7e0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d120      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11a      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a14      	ldr	r2, [pc, #80]	; (800320c <HAL_ADC_ConfigChannel+0x7cc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d115      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c6:	4619      	mov	r1, r3
 80031c8:	480e      	ldr	r0, [pc, #56]	; (8003204 <HAL_ADC_ConfigChannel+0x7c4>)
 80031ca:	f7fe ff78 	bl	80020be <LL_ADC_SetCommonPathInternalCh>
 80031ce:	e00c      	b.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031e2:	e002      	b.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	37d8      	adds	r7, #216	; 0xd8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	80080000 	.word	0x80080000
 8003204:	50040300 	.word	0x50040300
 8003208:	c7520000 	.word	0xc7520000
 800320c:	50040000 	.word	0x50040000
 8003210:	50040200 	.word	0x50040200
 8003214:	20000000 	.word	0x20000000
 8003218:	053e2d63 	.word	0x053e2d63
 800321c:	cb840000 	.word	0xcb840000
 8003220:	80000001 	.word	0x80000001

08003224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f8c5 	bl	80023c4 <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d169      	bne.n	8003314 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <ADC_Enable+0xfc>)
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0210 	orr.w	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f043 0201 	orr.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e055      	b.n	8003316 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff f894 	bl	800239c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003274:	482b      	ldr	r0, [pc, #172]	; (8003324 <ADC_Enable+0x100>)
 8003276:	f7fe ff35 	bl	80020e4 <LL_ADC_GetCommonPathInternalCh>
 800327a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800327c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <ADC_Enable+0x104>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	4a28      	ldr	r2, [pc, #160]	; (800332c <ADC_Enable+0x108>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	099b      	lsrs	r3, r3, #6
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800329e:	e002      	b.n	80032a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f9      	bne.n	80032a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032ac:	f7fe fec4 	bl	8002038 <HAL_GetTick>
 80032b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032b2:	e028      	b.n	8003306 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f883 	bl	80023c4 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f867 	bl	800239c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ce:	f7fe feb3 	bl	8002038 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d914      	bls.n	8003306 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d00d      	beq.n	8003306 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e007      	b.n	8003316 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d1cf      	bne.n	80032b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	8000003f 	.word	0x8000003f
 8003324:	50040300 	.word	0x50040300
 8003328:	20000000 	.word	0x20000000
 800332c:	053e2d63 	.word	0x053e2d63

08003330 <LL_ADC_IsEnabled>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <LL_ADC_IsEnabled+0x18>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <LL_ADC_IsEnabled+0x1a>
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_ADC_REG_IsConversionOngoing>:
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b04      	cmp	r3, #4
 8003368:	d101      	bne.n	800336e <LL_ADC_REG_IsConversionOngoing+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b09f      	sub	sp, #124	; 0x7c
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003396:	2302      	movs	r3, #2
 8003398:	e093      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033a2:	2300      	movs	r3, #0
 80033a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033a6:	2300      	movs	r3, #0
 80033a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a47      	ldr	r2, [pc, #284]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d102      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	e001      	b.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e072      	b.n	80034c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ffb9 	bl	8003356 <LL_ADC_REG_IsConversionOngoing>
 80033e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ffb3 	bl	8003356 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d154      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d151      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80033fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02c      	beq.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800341a:	035b      	lsls	r3, r3, #13
 800341c:	430b      	orrs	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003424:	4829      	ldr	r0, [pc, #164]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003426:	f7ff ff83 	bl	8003330 <LL_ADC_IsEnabled>
 800342a:	4604      	mov	r4, r0
 800342c:	4828      	ldr	r0, [pc, #160]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800342e:	f7ff ff7f 	bl	8003330 <LL_ADC_IsEnabled>
 8003432:	4603      	mov	r3, r0
 8003434:	431c      	orrs	r4, r3
 8003436:	4828      	ldr	r0, [pc, #160]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003438:	f7ff ff7a 	bl	8003330 <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	4323      	orrs	r3, r4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d137      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800344c:	f023 030f 	bic.w	r3, r3, #15
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	430a      	orrs	r2, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003460:	e028      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003470:	f7ff ff5e 	bl	8003330 <LL_ADC_IsEnabled>
 8003474:	4604      	mov	r4, r0
 8003476:	4816      	ldr	r0, [pc, #88]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003478:	f7ff ff5a 	bl	8003330 <LL_ADC_IsEnabled>
 800347c:	4603      	mov	r3, r0
 800347e:	431c      	orrs	r4, r3
 8003480:	4815      	ldr	r0, [pc, #84]	; (80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003482:	f7ff ff55 	bl	8003330 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	4323      	orrs	r3, r4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d112      	bne.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800349c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800349e:	e009      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034b2:	e000      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	377c      	adds	r7, #124	; 0x7c
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	50040000 	.word	0x50040000
 80034d0:	50040100 	.word	0x50040100
 80034d4:	50040300 	.word	0x50040300
 80034d8:	50040200 	.word	0x50040200

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db0a      	blt.n	800356a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	490c      	ldr	r1, [pc, #48]	; (800358c <__NVIC_SetPriority+0x4c>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003568:	e00a      	b.n	8003580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4908      	ldr	r1, [pc, #32]	; (8003590 <__NVIC_SetPriority+0x50>)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3b04      	subs	r3, #4
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000e100 	.word	0xe000e100
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf28      	it	cs
 80035b2:	2304      	movcs	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <NVIC_EncodePriority+0x30>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	e000      	b.n	80035c6 <NVIC_EncodePriority+0x32>
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	401a      	ands	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43d9      	mvns	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	4313      	orrs	r3, r2
         );
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360c:	d301      	bcc.n	8003612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800360e:	2301      	movs	r3, #1
 8003610:	e00f      	b.n	8003632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <SysTick_Config+0x40>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361a:	210f      	movs	r1, #15
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	f7ff ff8e 	bl	8003540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <SysTick_Config+0x40>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <SysTick_Config+0x40>)
 800362c:	2207      	movs	r2, #7
 800362e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	e000e010 	.word	0xe000e010

08003640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff ff47 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b086      	sub	sp, #24
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003668:	f7ff ff5c 	bl	8003524 <__NVIC_GetPriorityGrouping>
 800366c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	6978      	ldr	r0, [r7, #20]
 8003674:	f7ff ff8e 	bl	8003594 <NVIC_EncodePriority>
 8003678:	4602      	mov	r2, r0
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff5d 	bl	8003540 <__NVIC_SetPriority>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffb0 	bl	80035fc <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	e17f      	b.n	80039b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2101      	movs	r1, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8171 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d005      	beq.n	80036e8 <HAL_GPIO_Init+0x40>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d130      	bne.n	800374a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800371e:	2201      	movs	r2, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0201 	and.w	r2, r3, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b03      	cmp	r3, #3
 8003754:	d118      	bne.n	8003788 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	08db      	lsrs	r3, r3, #3
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d017      	beq.n	80037c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d123      	bne.n	8003818 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	08da      	lsrs	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3208      	adds	r2, #8
 8003812:	6939      	ldr	r1, [r7, #16]
 8003814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 0203 	and.w	r2, r3, #3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80ac 	beq.w	80039b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_GPIO_Init+0x330>)
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	4a5e      	ldr	r2, [pc, #376]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6613      	str	r3, [r2, #96]	; 0x60
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_GPIO_Init+0x330>)
 8003868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003872:	4a5a      	ldr	r2, [pc, #360]	; (80039dc <HAL_GPIO_Init+0x334>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389c:	d025      	beq.n	80038ea <HAL_GPIO_Init+0x242>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_GPIO_Init+0x338>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <HAL_GPIO_Init+0x23e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_GPIO_Init+0x33c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d019      	beq.n	80038e2 <HAL_GPIO_Init+0x23a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_GPIO_Init+0x340>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <HAL_GPIO_Init+0x236>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x344>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00d      	beq.n	80038da <HAL_GPIO_Init+0x232>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x348>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <HAL_GPIO_Init+0x22e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_GPIO_Init+0x34c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_GPIO_Init+0x22a>
 80038ce:	2306      	movs	r3, #6
 80038d0:	e00c      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d2:	2307      	movs	r3, #7
 80038d4:	e00a      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038d6:	2305      	movs	r3, #5
 80038d8:	e008      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038da:	2304      	movs	r3, #4
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038de:	2303      	movs	r3, #3
 80038e0:	e004      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_GPIO_Init+0x244>
 80038ea:	2300      	movs	r3, #0
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	f002 0203 	and.w	r2, r2, #3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4093      	lsls	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fc:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_GPIO_Init+0x334>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800390a:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_GPIO_Init+0x350>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_GPIO_Init+0x350>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_GPIO_Init+0x350>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f47f ae78 	bne.w	80036b8 <HAL_GPIO_Init+0x10>
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	48001400 	.word	0x48001400
 80039f4:	48001800 	.word	0x48001800
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	887b      	ldrh	r3, [r7, #2]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e001      	b.n	8003a1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	807b      	strh	r3, [r7, #2]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a3c:	787b      	ldrb	r3, [r7, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e08d      	b.n	8003b8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd fc18 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	; 0x24
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003abc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e006      	b.n	8003ae4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ae2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d108      	bne.n	8003afe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	e007      	b.n	8003b0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	817b      	strh	r3, [r7, #10]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	f040 80fd 	bne.w	8003db0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2C_Master_Transmit+0x30>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e0f6      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bcc:	f7fe fa34 	bl	8002038 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2319      	movs	r3, #25
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f914 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0e1      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	893a      	ldrh	r2, [r7, #8]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2bff      	cmp	r3, #255	; 0xff
 8003c1e:	d906      	bls.n	8003c2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22ff      	movs	r2, #255	; 0xff
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e007      	b.n	8003c3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d024      	beq.n	8003c90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <HAL_I2C_Master_Transmit+0x228>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa79 	bl	8004180 <I2C_TransferConfig>
 8003c8e:	e066      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <HAL_I2C_Master_Transmit+0x228>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fa6e 	bl	8004180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ca4:	e05b      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	6a39      	ldr	r1, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8fd 	bl	8003eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07b      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d034      	beq.n	8003d5e <HAL_I2C_Master_Transmit+0x1ca>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d130      	bne.n	8003d5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f880 	bl	8003e0c <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e04d      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2bff      	cmp	r3, #255	; 0xff
 8003d1e:	d90e      	bls.n	8003d3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	8979      	ldrh	r1, [r7, #10]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa22 	bl	8004180 <I2C_TransferConfig>
 8003d3c:	e00f      	b.n	8003d5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	8979      	ldrh	r1, [r7, #10]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fa11 	bl	8004180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d19e      	bne.n	8003ca6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	6a39      	ldr	r1, [r7, #32]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f8e3 	bl	8003f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e01a      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2220      	movs	r2, #32
 8003d82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_I2C_Master_Transmit+0x22c>)
 8003d90:	400b      	ands	r3, r1
 8003d92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	80002000 	.word	0x80002000
 8003dc0:	fe00e800 	.word	0xfe00e800

08003dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d103      	bne.n	8003de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d007      	beq.n	8003e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	619a      	str	r2, [r3, #24]
  }
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	e031      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d02d      	beq.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe f907 	bl	8002038 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d122      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d113      	bne.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00f      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d0be      	beq.n	8003e1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb6:	e033      	b.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f87f 	bl	8003fc0 <I2C_IsErrorOccurred>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e031      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d025      	beq.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed4:	f7fe f8b0 	bl	8002038 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11a      	bne.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d013      	beq.n	8003f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	f043 0220 	orr.w	r2, r3, #32
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d1c4      	bne.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f44:	e02f      	b.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f838 	bl	8003fc0 <I2C_IsErrorOccurred>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e02d      	b.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe f86d 	bl	8002038 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11a      	bne.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d013      	beq.n	8003fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d1c8      	bne.n	8003f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08a      	sub	sp, #40	; 0x28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d068      	beq.n	80040be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ff4:	e049      	b.n	800408a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d045      	beq.n	800408a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe f81b 	bl	8002038 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_IsErrorOccurred+0x54>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13a      	bne.n	800408a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004036:	d121      	bne.n	800407c <I2C_IsErrorOccurred+0xbc>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403e:	d01d      	beq.n	800407c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b20      	cmp	r3, #32
 8004044:	d01a      	beq.n	800407c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004056:	f7fd ffef 	bl	8002038 <HAL_GetTick>
 800405a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	e00e      	b.n	800407c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800405e:	f7fd ffeb 	bl	8002038 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b19      	cmp	r3, #25
 800406a:	d907      	bls.n	800407c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f043 0320 	orr.w	r3, r3, #32
 8004072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800407a:	e006      	b.n	800408a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b20      	cmp	r3, #32
 8004088:	d1e9      	bne.n	800405e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d003      	beq.n	80040a0 <I2C_IsErrorOccurred+0xe0>
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0aa      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2220      	movs	r2, #32
 80040ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f043 0304 	orr.w	r3, r3, #4
 80040b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f043 0302 	orr.w	r3, r3, #2
 800411a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800412c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fe45 	bl	8003dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <I2C_IsErrorOccurred+0x1bc>)
 8004146:	400b      	ands	r3, r1
 8004148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800416e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	817b      	strh	r3, [r7, #10]
 800418e:	4613      	mov	r3, r2
 8004190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004198:	7a7b      	ldrb	r3, [r7, #9]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	0d5b      	lsrs	r3, r3, #21
 80041ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <I2C_TransferConfig+0x60>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	43db      	mvns	r3, r3
 80041c4:	ea02 0103 	and.w	r1, r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	03ff63ff 	.word	0x03ff63ff

080041e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d138      	bne.n	800426c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004204:	2302      	movs	r3, #2
 8004206:	e032      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	d139      	bne.n	8004304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800429a:	2302      	movs	r3, #2
 800429c:	e033      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <HAL_PWREx_GetVoltageRange+0x18>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40007000 	.word	0x40007000

08004330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	d130      	bne.n	80043a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d038      	beq.n	80043c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2232      	movs	r2, #50	; 0x32
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004374:	e002      	b.n	800437c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3b01      	subs	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d102      	bne.n	8004390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f2      	bne.n	8004376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439c:	d110      	bne.n	80043c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e00f      	b.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d007      	beq.n	80043c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043b0:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043b8:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40007000 	.word	0x40007000
 80043d4:	20000000 	.word	0x20000000
 80043d8:	431bde83 	.word	0x431bde83

080043dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e3ca      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ee:	4b97      	ldr	r3, [pc, #604]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f8:	4b94      	ldr	r3, [pc, #592]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80e4 	beq.w	80045d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_RCC_OscConfig+0x4a>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	f040 808b 	bne.w	8004534 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 8087 	bne.w	8004534 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_RCC_OscConfig+0x62>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e3a2      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	4b82      	ldr	r3, [pc, #520]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <HAL_RCC_OscConfig+0x7c>
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004456:	e005      	b.n	8004464 <HAL_RCC_OscConfig+0x88>
 8004458:	4b7c      	ldr	r3, [pc, #496]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004464:	4293      	cmp	r3, r2
 8004466:	d223      	bcs.n	80044b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fd55 	bl	8004f1c <RCC_SetFlashLatencyFromMSIRange>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e383      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800447c:	4b73      	ldr	r3, [pc, #460]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a72      	ldr	r2, [pc, #456]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004482:	f043 0308 	orr.w	r3, r3, #8
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	496d      	ldr	r1, [pc, #436]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800449a:	4b6c      	ldr	r3, [pc, #432]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4968      	ldr	r1, [pc, #416]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
 80044ae:	e025      	b.n	80044fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b0:	4b66      	ldr	r3, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a65      	ldr	r2, [pc, #404]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4960      	ldr	r1, [pc, #384]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ce:	4b5f      	ldr	r3, [pc, #380]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	495b      	ldr	r1, [pc, #364]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fd15 	bl	8004f1c <RCC_SetFlashLatencyFromMSIRange>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e343      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044fc:	f000 fc4a 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b52      	ldr	r3, [pc, #328]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	4950      	ldr	r1, [pc, #320]	; (8004650 <HAL_RCC_OscConfig+0x274>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	4a4e      	ldr	r2, [pc, #312]	; (8004654 <HAL_RCC_OscConfig+0x278>)
 800451a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800451c:	4b4e      	ldr	r3, [pc, #312]	; (8004658 <HAL_RCC_OscConfig+0x27c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fd39 	bl	8001f98 <HAL_InitTick>
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d052      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	e327      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d032      	beq.n	80045a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004548:	f7fd fd76 	bl	8002038 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004550:	f7fd fd72 	bl	8002038 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e310      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a36      	ldr	r2, [pc, #216]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004574:	f043 0308 	orr.w	r3, r3, #8
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b34      	ldr	r3, [pc, #208]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	4931      	ldr	r1, [pc, #196]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800458c:	4b2f      	ldr	r3, [pc, #188]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	492c      	ldr	r1, [pc, #176]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
 80045a0:	e01a      	b.n	80045d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045a2:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a29      	ldr	r2, [pc, #164]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ae:	f7fd fd43 	bl	8002038 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b6:	f7fd fd3f 	bl	8002038 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e2dd      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045c8:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCC_OscConfig+0x1da>
 80045d4:	e000      	b.n	80045d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d074      	beq.n	80046ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d005      	beq.n	80045f6 <HAL_RCC_OscConfig+0x21a>
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d10e      	bne.n	800460e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d10b      	bne.n	800460e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_RCC_OscConfig+0x270>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d064      	beq.n	80046cc <HAL_RCC_OscConfig+0x2f0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d160      	bne.n	80046cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e2ba      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x24a>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0b      	ldr	r2, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	e026      	b.n	8004674 <HAL_RCC_OscConfig+0x298>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462e:	d115      	bne.n	800465c <HAL_RCC_OscConfig+0x280>
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a05      	ldr	r2, [pc, #20]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_RCC_OscConfig+0x270>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a02      	ldr	r2, [pc, #8]	; (800464c <HAL_RCC_OscConfig+0x270>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e014      	b.n	8004674 <HAL_RCC_OscConfig+0x298>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	0800a6b0 	.word	0x0800a6b0
 8004654:	20000000 	.word	0x20000000
 8004658:	20000004 	.word	0x20000004
 800465c:	4ba0      	ldr	r3, [pc, #640]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a9f      	ldr	r2, [pc, #636]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b9d      	ldr	r3, [pc, #628]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a9c      	ldr	r2, [pc, #624]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd fcdc 	bl	8002038 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd fcd8 	bl	8002038 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e276      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004696:	4b92      	ldr	r3, [pc, #584]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0x2a8>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fcc8 	bl	8002038 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd fcc4 	bl	8002038 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e262      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x2d0>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d060      	beq.n	800479c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d005      	beq.n	80046ec <HAL_RCC_OscConfig+0x310>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d119      	bne.n	800471a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d116      	bne.n	800471a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	4b7c      	ldr	r3, [pc, #496]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_OscConfig+0x328>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e23f      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	4973      	ldr	r1, [pc, #460]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004718:	e040      	b.n	800479c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d023      	beq.n	800476a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004722:	4b6f      	ldr	r3, [pc, #444]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6e      	ldr	r2, [pc, #440]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472e:	f7fd fc83 	bl	8002038 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004736:	f7fd fc7f 	bl	8002038 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e21d      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	4b65      	ldr	r3, [pc, #404]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004754:	4b62      	ldr	r3, [pc, #392]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	495f      	ldr	r1, [pc, #380]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	e018      	b.n	800479c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476a:	4b5d      	ldr	r3, [pc, #372]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5c      	ldr	r2, [pc, #368]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fd fc5f 	bl	8002038 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477e:	f7fd fc5b 	bl	8002038 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e1f9      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03c      	beq.n	8004822 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b0:	4b4b      	ldr	r3, [pc, #300]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd fc3a 	bl	8002038 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c8:	f7fd fc36 	bl	8002038 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1d4      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80047dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ef      	beq.n	80047c8 <HAL_RCC_OscConfig+0x3ec>
 80047e8:	e01b      	b.n	8004822 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80047ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f0:	4a3b      	ldr	r2, [pc, #236]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fd fc1d 	bl	8002038 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004802:	f7fd fc19 	bl	8002038 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e1b7      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004814:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ef      	bne.n	8004802 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80a6 	beq.w	800497c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10d      	bne.n	800485c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484a:	6593      	str	r3, [r2, #88]	; 0x58
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485c:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <HAL_RCC_OscConfig+0x508>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d118      	bne.n	800489a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_RCC_OscConfig+0x508>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_RCC_OscConfig+0x508>)
 800486e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004872:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004874:	f7fd fbe0 	bl	8002038 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fd fbdc 	bl	8002038 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e17a      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488e:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <HAL_RCC_OscConfig+0x508>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d108      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4d8>
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b2:	e029      	b.n	8004908 <HAL_RCC_OscConfig+0x52c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d115      	bne.n	80048e8 <HAL_RCC_OscConfig+0x50c>
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	4a03      	ldr	r2, [pc, #12]	; (80048e0 <HAL_RCC_OscConfig+0x504>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048dc:	e014      	b.n	8004908 <HAL_RCC_OscConfig+0x52c>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40007000 	.word	0x40007000
 80048e8:	4b9c      	ldr	r3, [pc, #624]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a9b      	ldr	r2, [pc, #620]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	4b98      	ldr	r3, [pc, #608]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	4a97      	ldr	r2, [pc, #604]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d016      	beq.n	800493e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd fb92 	bl	8002038 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fd fb8e 	bl	8002038 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e12a      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492e:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ed      	beq.n	8004918 <HAL_RCC_OscConfig+0x53c>
 800493c:	e015      	b.n	800496a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fd fb7b 	bl	8002038 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004944:	e00a      	b.n	800495c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fd fb77 	bl	8002038 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f241 3288 	movw	r2, #5000	; 0x1388
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e113      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800495c:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1ed      	bne.n	8004946 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d105      	bne.n	800497c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004970:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	4a79      	ldr	r2, [pc, #484]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 80fe 	beq.w	8004b82 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	2b02      	cmp	r3, #2
 800498c:	f040 80d0 	bne.w	8004b30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004990:	4b72      	ldr	r3, [pc, #456]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0203 	and.w	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d130      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	3b01      	subs	r3, #1
 80049b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d127      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d11f      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d0:	2a07      	cmp	r2, #7
 80049d2:	bf14      	ite	ne
 80049d4:	2201      	movne	r2, #1
 80049d6:	2200      	moveq	r2, #0
 80049d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049da:	4293      	cmp	r3, r2
 80049dc:	d113      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	3b01      	subs	r3, #1
 80049ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d06e      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d069      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a0c:	4b53      	ldr	r3, [pc, #332]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a18:	4b50      	ldr	r3, [pc, #320]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0ad      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a28:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a4b      	ldr	r2, [pc, #300]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a34:	f7fd fb00 	bl	8002038 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd fafc 	bl	8002038 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e09a      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4e:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5a:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	4b40      	ldr	r3, [pc, #256]	; (8004b60 <HAL_RCC_OscConfig+0x784>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	0112      	lsls	r2, r2, #4
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a74:	0212      	lsls	r2, r2, #8
 8004a76:	4311      	orrs	r1, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a7c:	0852      	lsrs	r2, r2, #1
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	0552      	lsls	r2, r2, #21
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0652      	lsls	r2, r2, #25
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a94:	0912      	lsrs	r2, r2, #4
 8004a96:	0452      	lsls	r2, r2, #17
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	4930      	ldr	r1, [pc, #192]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004aa0:	4b2e      	ldr	r3, [pc, #184]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2d      	ldr	r2, [pc, #180]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a2a      	ldr	r2, [pc, #168]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab8:	f7fd fabe 	bl	8002038 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd faba 	bl	8002038 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e058      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ade:	e050      	b.n	8004b82 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e04f      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d148      	bne.n	8004b82 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004afa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004afc:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b08:	f7fd fa96 	bl	8002038 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd fa92 	bl	8002038 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e030      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x734>
 8004b2e:	e028      	b.n	8004b82 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d023      	beq.n	8004b7e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <HAL_RCC_OscConfig+0x780>)
 8004b3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd fa79 	bl	8002038 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	e00c      	b.n	8004b64 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4a:	f7fd fa75 	bl	8002038 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d905      	bls.n	8004b64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_OscConfig+0x7b0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ec      	bne.n	8004b4a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_RCC_OscConfig+0x7b0>)
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	4905      	ldr	r1, [pc, #20]	; (8004b8c <HAL_RCC_OscConfig+0x7b0>)
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCC_OscConfig+0x7b4>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60cb      	str	r3, [r1, #12]
 8004b7c:	e001      	b.n	8004b82 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	feeefffc 	.word	0xfeeefffc

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0e7      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d910      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b72      	ldr	r3, [pc, #456]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0207 	bic.w	r2, r3, #7
 8004bbe:	4970      	ldr	r1, [pc, #448]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b6e      	ldr	r3, [pc, #440]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0cf      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	4b66      	ldr	r3, [pc, #408]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d908      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b63      	ldr	r3, [pc, #396]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4960      	ldr	r1, [pc, #384]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d04c      	beq.n	8004cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d107      	bne.n	8004c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d121      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0a6      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4b54      	ldr	r3, [pc, #336]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d115      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e09a      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c4a:	4b4e      	ldr	r3, [pc, #312]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e08e      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e086      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b46      	ldr	r3, [pc, #280]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4943      	ldr	r1, [pc, #268]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7c:	f7fd f9dc 	bl	8002038 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7fd f9d8 	bl	8002038 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e06e      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d010      	beq.n	8004cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d208      	bcs.n	8004cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc8:	4b2e      	ldr	r3, [pc, #184]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	492b      	ldr	r1, [pc, #172]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d210      	bcs.n	8004d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 0207 	bic.w	r2, r3, #7
 8004cf0:	4923      	ldr	r1, [pc, #140]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e036      	b.n	8004d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d16:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4918      	ldr	r1, [pc, #96]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4910      	ldr	r1, [pc, #64]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d48:	f000 f824 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <HAL_RCC_ClockConfig+0x1f0>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	490b      	ldr	r1, [pc, #44]	; (8004d88 <HAL_RCC_ClockConfig+0x1f4>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <HAL_RCC_ClockConfig+0x1f8>)
 8004d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_RCC_ClockConfig+0x1fc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fd f913 	bl	8001f98 <HAL_InitTick>
 8004d72:	4603      	mov	r3, r0
 8004d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d76:	7afb      	ldrb	r3, [r7, #11]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40022000 	.word	0x40022000
 8004d84:	40021000 	.word	0x40021000
 8004d88:	0800a6b0 	.word	0x0800a6b0
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	20000004 	.word	0x20000004

08004d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da2:	4b3e      	ldr	r3, [pc, #248]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	d121      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d11e      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e005      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004df0:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10d      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e0c:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e004      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e18:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d134      	bne.n	8004e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d003      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0xac>
 8004e38:	e005      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e3c:	617b      	str	r3, [r7, #20]
      break;
 8004e3e:	e005      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e42:	617b      	str	r3, [r7, #20]
      break;
 8004e44:	e002      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	617b      	str	r3, [r7, #20]
      break;
 8004e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	3301      	adds	r3, #1
 8004e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	fb03 f202 	mul.w	r2, r3, r2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e72:	4b0a      	ldr	r3, [pc, #40]	; (8004e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	0e5b      	lsrs	r3, r3, #25
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e8c:	69bb      	ldr	r3, [r7, #24]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800a6c8 	.word	0x0800a6c8
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000000 	.word	0x20000000

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec8:	f7ff fff0 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4904      	ldr	r1, [pc, #16]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	0800a6c0 	.word	0x0800a6c0

08004ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ef4:	f7ff ffda 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	0adb      	lsrs	r3, r3, #11
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	4904      	ldr	r1, [pc, #16]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f06:	5ccb      	ldrb	r3, [r1, r3]
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40021000 	.word	0x40021000
 8004f18:	0800a6c0 	.word	0x0800a6c0

08004f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f34:	f7ff f9ee 	bl	8004314 <HAL_PWREx_GetVoltageRange>
 8004f38:	6178      	str	r0, [r7, #20]
 8004f3a:	e014      	b.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f3c:	4b25      	ldr	r3, [pc, #148]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f40:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f46:	6593      	str	r3, [r2, #88]	; 0x58
 8004f48:	4b22      	ldr	r3, [pc, #136]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f54:	f7ff f9de 	bl	8004314 <HAL_PWREx_GetVoltageRange>
 8004f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d10b      	bne.n	8004f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d919      	bls.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2ba0      	cmp	r3, #160	; 0xa0
 8004f78:	d902      	bls.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e013      	b.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f80:	2301      	movs	r3, #1
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e010      	b.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d902      	bls.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	e00a      	b.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d102      	bne.n	8004f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f98:	2302      	movs	r3, #2
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e004      	b.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b70      	cmp	r3, #112	; 0x70
 8004fa2:	d101      	bne.n	8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 0207 	bic.w	r2, r3, #7
 8004fb0:	4909      	ldr	r1, [pc, #36]	; (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d001      	beq.n	8004fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40022000 	.word	0x40022000

08004fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe8:	2300      	movs	r3, #0
 8004fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d041      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005000:	d02a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005006:	d824      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800500c:	d008      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800500e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005012:	d81e      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800501c:	d010      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800501e:	e018      	b.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005020:	4b86      	ldr	r3, [pc, #536]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a85      	ldr	r2, [pc, #532]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800502c:	e015      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fabb 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800503e:	e00c      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3320      	adds	r3, #32
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fba6 	bl	8005798 <RCCEx_PLLSAI2_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005050:	e003      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	74fb      	strb	r3, [r7, #19]
      break;
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005060:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800506e:	4973      	ldr	r1, [pc, #460]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d041      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800508c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005090:	d02a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005096:	d824      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800509c:	d008      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800509e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050a2:	d81e      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ac:	d010      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ae:	e018      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050b0:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a61      	ldr	r2, [pc, #388]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050bc:	e015      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fa73 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ce:	e00c      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3320      	adds	r3, #32
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fb5e 	bl	8005798 <RCCEx_PLLSAI2_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050e0:	e003      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	74fb      	strb	r3, [r7, #19]
      break;
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050f0:	4b52      	ldr	r3, [pc, #328]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fe:	494f      	ldr	r1, [pc, #316]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005106:	e001      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80a0 	beq.w	800525a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511a:	2300      	movs	r3, #0
 800511c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800511e:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005134:	4b41      	ldr	r3, [pc, #260]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	4a40      	ldr	r2, [pc, #256]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513e:	6593      	str	r3, [r2, #88]	; 0x58
 8005140:	4b3e      	ldr	r3, [pc, #248]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800514c:	2301      	movs	r3, #1
 800514e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005150:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800515c:	f7fc ff6c 	bl	8002038 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005162:	e009      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fc ff68 	bl	8002038 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d902      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	74fb      	strb	r3, [r7, #19]
        break;
 8005176:	e005      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005178:	4b31      	ldr	r3, [pc, #196]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ef      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d15c      	bne.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800518a:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d019      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051a8:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	4a20      	ldr	r2, [pc, #128]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	4a1c      	ldr	r2, [pc, #112]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fc ff27 	bl	8002038 <HAL_GetTick>
 80051ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ec:	e00b      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fc ff23 	bl	8002038 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d902      	bls.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	74fb      	strb	r3, [r7, #19]
            break;
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ec      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522a:	4904      	ldr	r1, [pc, #16]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005232:	e009      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005248:	7c7b      	ldrb	r3, [r7, #17]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d105      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524e:	4b9e      	ldr	r3, [pc, #632]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	4a9d      	ldr	r2, [pc, #628]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005266:	4b98      	ldr	r3, [pc, #608]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f023 0203 	bic.w	r2, r3, #3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	4994      	ldr	r1, [pc, #592]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005288:	4b8f      	ldr	r3, [pc, #572]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	f023 020c 	bic.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	498c      	ldr	r1, [pc, #560]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052aa:	4b87      	ldr	r3, [pc, #540]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4983      	ldr	r1, [pc, #524]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052cc:	4b7e      	ldr	r3, [pc, #504]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	497b      	ldr	r1, [pc, #492]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ee:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	4972      	ldr	r1, [pc, #456]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005310:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	496a      	ldr	r1, [pc, #424]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005338:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	4961      	ldr	r1, [pc, #388]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005354:	4b5c      	ldr	r3, [pc, #368]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005362:	4959      	ldr	r1, [pc, #356]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005376:	4b54      	ldr	r3, [pc, #336]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005384:	4950      	ldr	r1, [pc, #320]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005398:	4b4b      	ldr	r3, [pc, #300]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	4948      	ldr	r1, [pc, #288]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ba:	4b43      	ldr	r3, [pc, #268]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	493f      	ldr	r1, [pc, #252]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d028      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053dc:	4b3a      	ldr	r3, [pc, #232]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ea:	4937      	ldr	r1, [pc, #220]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fa:	d106      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053fc:	4b32      	ldr	r3, [pc, #200]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4a31      	ldr	r2, [pc, #196]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005406:	60d3      	str	r3, [r2, #12]
 8005408:	e011      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800540e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005412:	d10c      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f8c8 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d028      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	491f      	ldr	r1, [pc, #124]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005458:	d106      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005460:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005464:	60d3      	str	r3, [r2, #12]
 8005466:	e011      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005470:	d10c      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	3304      	adds	r3, #4
 8005476:	2101      	movs	r1, #1
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f899 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005482:	7cfb      	ldrb	r3, [r7, #19]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02b      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	4908      	ldr	r1, [pc, #32]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b6:	d109      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4a02      	ldr	r2, [pc, #8]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c2:	60d3      	str	r3, [r2, #12]
 80054c4:	e014      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054c6:	bf00      	nop
 80054c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3304      	adds	r3, #4
 80054da:	2101      	movs	r1, #1
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f867 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e6:	7cfb      	ldrb	r3, [r7, #19]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02f      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054fc:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550a:	4928      	ldr	r1, [pc, #160]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800551a:	d10d      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	2102      	movs	r1, #2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f844 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 8005528:	4603      	mov	r3, r0
 800552a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d014      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	74bb      	strb	r3, [r7, #18]
 8005536:	e011      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005540:	d10c      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3320      	adds	r3, #32
 8005546:	2102      	movs	r1, #2
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f925 	bl	8005798 <RCCEx_PLLSAI2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005568:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	490d      	ldr	r1, [pc, #52]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800558a:	4b08      	ldr	r3, [pc, #32]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005590:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800559a:	4904      	ldr	r1, [pc, #16]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000

080055b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055be:	4b75      	ldr	r3, [pc, #468]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055ca:	4b72      	ldr	r3, [pc, #456]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0203 	and.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d10d      	bne.n	80055f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
       ||
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055e2:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
       ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d047      	beq.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	e044      	b.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d018      	beq.n	8005636 <RCCEx_PLLSAI1_Config+0x86>
 8005604:	2b03      	cmp	r3, #3
 8005606:	d825      	bhi.n	8005654 <RCCEx_PLLSAI1_Config+0xa4>
 8005608:	2b01      	cmp	r3, #1
 800560a:	d002      	beq.n	8005612 <RCCEx_PLLSAI1_Config+0x62>
 800560c:	2b02      	cmp	r3, #2
 800560e:	d009      	beq.n	8005624 <RCCEx_PLLSAI1_Config+0x74>
 8005610:	e020      	b.n	8005654 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005612:	4b60      	ldr	r3, [pc, #384]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11d      	bne.n	800565a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005622:	e01a      	b.n	800565a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005634:	e013      	b.n	800565e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005636:	4b57      	ldr	r3, [pc, #348]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005652:	e006      	b.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      break;
 8005658:	e004      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005662:	bf00      	nop
    }

    if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	430b      	orrs	r3, r1
 8005680:	4944      	ldr	r1, [pc, #272]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d17d      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800568c:	4b41      	ldr	r3, [pc, #260]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a40      	ldr	r2, [pc, #256]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fc fcce 	bl	8002038 <HAL_GetTick>
 800569c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800569e:	e009      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056a0:	f7fc fcca 	bl	8002038 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d902      	bls.n	80056b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	73fb      	strb	r3, [r7, #15]
        break;
 80056b2:	e005      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b4:	4b37      	ldr	r3, [pc, #220]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1ef      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d160      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056cc:	4b31      	ldr	r3, [pc, #196]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6892      	ldr	r2, [r2, #8]
 80056dc:	0211      	lsls	r1, r2, #8
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68d2      	ldr	r2, [r2, #12]
 80056e2:	0912      	lsrs	r2, r2, #4
 80056e4:	0452      	lsls	r2, r2, #17
 80056e6:	430a      	orrs	r2, r1
 80056e8:	492a      	ldr	r1, [pc, #168]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	610b      	str	r3, [r1, #16]
 80056ee:	e027      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d112      	bne.n	800571c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	0211      	lsls	r1, r2, #8
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6912      	ldr	r2, [r2, #16]
 800570c:	0852      	lsrs	r2, r2, #1
 800570e:	3a01      	subs	r2, #1
 8005710:	0552      	lsls	r2, r2, #21
 8005712:	430a      	orrs	r2, r1
 8005714:	491f      	ldr	r1, [pc, #124]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
 800571a:	e011      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6892      	ldr	r2, [r2, #8]
 800572c:	0211      	lsls	r1, r2, #8
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6952      	ldr	r2, [r2, #20]
 8005732:	0852      	lsrs	r2, r2, #1
 8005734:	3a01      	subs	r2, #1
 8005736:	0652      	lsls	r2, r2, #25
 8005738:	430a      	orrs	r2, r1
 800573a:	4916      	ldr	r1, [pc, #88]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fc fc74 	bl	8002038 <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005752:	e009      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005754:	f7fc fc70 	bl	8002038 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d902      	bls.n	8005768 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	73fb      	strb	r3, [r7, #15]
          break;
 8005766:	e005      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ef      	beq.n	8005754 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000

08005798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057a6:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057b2:	4b67      	ldr	r3, [pc, #412]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0203 	and.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d10d      	bne.n	80057de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
       ||
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057ca:	4b61      	ldr	r3, [pc, #388]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
       ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d047      	beq.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	e044      	b.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d018      	beq.n	800581e <RCCEx_PLLSAI2_Config+0x86>
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d825      	bhi.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d002      	beq.n	80057fa <RCCEx_PLLSAI2_Config+0x62>
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d009      	beq.n	800580c <RCCEx_PLLSAI2_Config+0x74>
 80057f8:	e020      	b.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057fa:	4b55      	ldr	r3, [pc, #340]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11d      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800580a:	e01a      	b.n	8005842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800580c:	4b50      	ldr	r3, [pc, #320]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d116      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581c:	e013      	b.n	8005846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581e:	4b4c      	ldr	r3, [pc, #304]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10f      	bne.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800582a:	4b49      	ldr	r3, [pc, #292]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800583a:	e006      	b.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e004      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800584a:	bf00      	nop
    }

    if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	3b01      	subs	r3, #1
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	430b      	orrs	r3, r1
 8005868:	4939      	ldr	r1, [pc, #228]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	4313      	orrs	r3, r2
 800586c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d167      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005880:	f7fc fbda 	bl	8002038 <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005886:	e009      	b.n	800589c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005888:	f7fc fbd6 	bl	8002038 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	73fb      	strb	r3, [r7, #15]
        break;
 800589a:	e005      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ef      	bne.n	8005888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d14a      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d111      	bne.n	80058d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b4:	4b26      	ldr	r3, [pc, #152]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	0211      	lsls	r1, r2, #8
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68d2      	ldr	r2, [r2, #12]
 80058ca:	0912      	lsrs	r2, r2, #4
 80058cc:	0452      	lsls	r2, r2, #17
 80058ce:	430a      	orrs	r2, r1
 80058d0:	491f      	ldr	r1, [pc, #124]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	614b      	str	r3, [r1, #20]
 80058d6:	e011      	b.n	80058fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	0211      	lsls	r1, r2, #8
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6912      	ldr	r2, [r2, #16]
 80058ee:	0852      	lsrs	r2, r2, #1
 80058f0:	3a01      	subs	r2, #1
 80058f2:	0652      	lsls	r2, r2, #25
 80058f4:	430a      	orrs	r2, r1
 80058f6:	4916      	ldr	r1, [pc, #88]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fc fb96 	bl	8002038 <HAL_GetTick>
 800590c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800590e:	e009      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005910:	f7fc fb92 	bl	8002038 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d902      	bls.n	8005924 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	73fb      	strb	r3, [r7, #15]
          break;
 8005922:	e005      	b.n	8005930 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ef      	beq.n	8005910 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4904      	ldr	r1, [pc, #16]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005940:	4313      	orrs	r3, r2
 8005942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e049      	b.n	80059fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7fc fa16 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f000 f8fe 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_TIM_ConfigClockSource+0x1c>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e0b6      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x18a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	d03e      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xd8>
 8005a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a60:	f200 8087 	bhi.w	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a68:	f000 8086 	beq.w	8005b78 <HAL_TIM_ConfigClockSource+0x176>
 8005a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a70:	d87f      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a72:	2b70      	cmp	r3, #112	; 0x70
 8005a74:	d01a      	beq.n	8005aac <HAL_TIM_ConfigClockSource+0xaa>
 8005a76:	2b70      	cmp	r3, #112	; 0x70
 8005a78:	d87b      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a7a:	2b60      	cmp	r3, #96	; 0x60
 8005a7c:	d050      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0x11e>
 8005a7e:	2b60      	cmp	r3, #96	; 0x60
 8005a80:	d877      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a82:	2b50      	cmp	r3, #80	; 0x50
 8005a84:	d03c      	beq.n	8005b00 <HAL_TIM_ConfigClockSource+0xfe>
 8005a86:	2b50      	cmp	r3, #80	; 0x50
 8005a88:	d873      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d058      	beq.n	8005b40 <HAL_TIM_ConfigClockSource+0x13e>
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d86f      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a92:	2b30      	cmp	r3, #48	; 0x30
 8005a94:	d064      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005a96:	2b30      	cmp	r3, #48	; 0x30
 8005a98:	d86b      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d060      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d867      	bhi.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d05c      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d05a      	beq.n	8005b60 <HAL_TIM_ConfigClockSource+0x15e>
 8005aaa:	e062      	b.n	8005b72 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005abc:	f000 f97e 	bl	8005dbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ace:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	609a      	str	r2, [r3, #8]
      break;
 8005ad8:	e04f      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aea:	f000 f967 	bl	8005dbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005afc:	609a      	str	r2, [r3, #8]
      break;
 8005afe:	e03c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f000 f8db 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2150      	movs	r1, #80	; 0x50
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f934 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005b1e:	e02c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f000 f8fa 	bl	8005d26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2160      	movs	r1, #96	; 0x60
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f924 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005b3e:	e01c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f000 f8bb 	bl	8005cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2140      	movs	r1, #64	; 0x40
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f914 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005b5e:	e00c      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 f90b 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
      break;
 8005b76:	e000      	b.n	8005b7a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01f      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d01b      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d017      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00f      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d007      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_Base_SetConfig+0x9a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d108      	bne.n	8005c40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a10      	ldr	r2, [pc, #64]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0f      	ldr	r2, [pc, #60]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	615a      	str	r2, [r3, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40013400 	.word	0x40013400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800

08005cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0201 	bic.w	r2, r3, #1
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 030a 	bic.w	r3, r3, #10
 8005d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b087      	sub	sp, #28
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f023 0210 	bic.w	r2, r3, #16
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	031b      	lsls	r3, r3, #12
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f043 0307 	orr.w	r3, r3, #7
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e068      	b.n	8005ee6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2d      	ldr	r2, [pc, #180]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d018      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000

08005f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e040      	b.n	8005fa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb ff8c 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2224      	movs	r2, #36	; 0x24
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb6a 	bl	800662c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8af 	bl	80060bc <UART_SetConfig>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e01b      	b.n	8005fa0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fbe9 	bl	8006770 <UART_CheckIdleState>
 8005f9e:	4603      	mov	r3, r0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d178      	bne.n	80060b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_Transmit+0x24>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e071      	b.n	80060b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2221      	movs	r2, #33	; 0x21
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fde:	f7fc f82b 	bl	8002038 <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffc:	d108      	bne.n	8006010 <HAL_UART_Transmit+0x68>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e003      	b.n	8006018 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006018:	e030      	b.n	800607c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	2180      	movs	r1, #128	; 0x80
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fc4b 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d004      	beq.n	800603a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e03c      	b.n	80060b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	881a      	ldrh	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800604c:	b292      	uxth	r2, r2
 800604e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	3302      	adds	r3, #2
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e008      	b.n	800606a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	b292      	uxth	r2, r2
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1c8      	bne.n	800601a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fc14 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e005      	b.n	80060b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c0:	b08a      	sub	sp, #40	; 0x28
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	431a      	orrs	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4ba4      	ldr	r3, [pc, #656]	; (800637c <UART_SetConfig+0x2c0>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a99      	ldr	r2, [pc, #612]	; (8006380 <UART_SetConfig+0x2c4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	4313      	orrs	r3, r2
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a90      	ldr	r2, [pc, #576]	; (8006384 <UART_SetConfig+0x2c8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d126      	bne.n	8006194 <UART_SetConfig+0xd8>
 8006146:	4b90      	ldr	r3, [pc, #576]	; (8006388 <UART_SetConfig+0x2cc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d81b      	bhi.n	800618c <UART_SetConfig+0xd0>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <UART_SetConfig+0xa0>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	0800616d 	.word	0x0800616d
 8006160:	0800617d 	.word	0x0800617d
 8006164:	08006175 	.word	0x08006175
 8006168:	08006185 	.word	0x08006185
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006172:	e116      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006174:	2302      	movs	r3, #2
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e112      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006182:	e10e      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618a:	e10a      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e106      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a7c      	ldr	r2, [pc, #496]	; (800638c <UART_SetConfig+0x2d0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d138      	bne.n	8006210 <UART_SetConfig+0x154>
 800619e:	4b7a      	ldr	r3, [pc, #488]	; (8006388 <UART_SetConfig+0x2cc>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d82d      	bhi.n	8006208 <UART_SetConfig+0x14c>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0xf8>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061e9 	.word	0x080061e9
 80061b8:	08006209 	.word	0x08006209
 80061bc:	08006209 	.word	0x08006209
 80061c0:	08006209 	.word	0x08006209
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	08006209 	.word	0x08006209
 80061cc:	08006209 	.word	0x08006209
 80061d0:	08006209 	.word	0x08006209
 80061d4:	080061f1 	.word	0x080061f1
 80061d8:	08006209 	.word	0x08006209
 80061dc:	08006209 	.word	0x08006209
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006201 	.word	0x08006201
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ee:	e0d8      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e0d4      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e0d0      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e0cc      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e0c8      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a5e      	ldr	r2, [pc, #376]	; (8006390 <UART_SetConfig+0x2d4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d125      	bne.n	8006266 <UART_SetConfig+0x1aa>
 800621a:	4b5b      	ldr	r3, [pc, #364]	; (8006388 <UART_SetConfig+0x2cc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006224:	2b30      	cmp	r3, #48	; 0x30
 8006226:	d016      	beq.n	8006256 <UART_SetConfig+0x19a>
 8006228:	2b30      	cmp	r3, #48	; 0x30
 800622a:	d818      	bhi.n	800625e <UART_SetConfig+0x1a2>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d00a      	beq.n	8006246 <UART_SetConfig+0x18a>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d814      	bhi.n	800625e <UART_SetConfig+0x1a2>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <UART_SetConfig+0x182>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d008      	beq.n	800624e <UART_SetConfig+0x192>
 800623c:	e00f      	b.n	800625e <UART_SetConfig+0x1a2>
 800623e:	2300      	movs	r3, #0
 8006240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006244:	e0ad      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006246:	2302      	movs	r3, #2
 8006248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624c:	e0a9      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800624e:	2304      	movs	r3, #4
 8006250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006254:	e0a5      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006256:	2308      	movs	r3, #8
 8006258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625c:	e0a1      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800625e:	2310      	movs	r3, #16
 8006260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006264:	e09d      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a4a      	ldr	r2, [pc, #296]	; (8006394 <UART_SetConfig+0x2d8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d125      	bne.n	80062bc <UART_SetConfig+0x200>
 8006270:	4b45      	ldr	r3, [pc, #276]	; (8006388 <UART_SetConfig+0x2cc>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006276:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800627a:	2bc0      	cmp	r3, #192	; 0xc0
 800627c:	d016      	beq.n	80062ac <UART_SetConfig+0x1f0>
 800627e:	2bc0      	cmp	r3, #192	; 0xc0
 8006280:	d818      	bhi.n	80062b4 <UART_SetConfig+0x1f8>
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d00a      	beq.n	800629c <UART_SetConfig+0x1e0>
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d814      	bhi.n	80062b4 <UART_SetConfig+0x1f8>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <UART_SetConfig+0x1d8>
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d008      	beq.n	80062a4 <UART_SetConfig+0x1e8>
 8006292:	e00f      	b.n	80062b4 <UART_SetConfig+0x1f8>
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629a:	e082      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800629c:	2302      	movs	r3, #2
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a2:	e07e      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80062a4:	2304      	movs	r3, #4
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062aa:	e07a      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80062ac:	2308      	movs	r3, #8
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b2:	e076      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80062b4:	2310      	movs	r3, #16
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e072      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a35      	ldr	r2, [pc, #212]	; (8006398 <UART_SetConfig+0x2dc>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d12a      	bne.n	800631c <UART_SetConfig+0x260>
 80062c6:	4b30      	ldr	r3, [pc, #192]	; (8006388 <UART_SetConfig+0x2cc>)
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d4:	d01a      	beq.n	800630c <UART_SetConfig+0x250>
 80062d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062da:	d81b      	bhi.n	8006314 <UART_SetConfig+0x258>
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d00c      	beq.n	80062fc <UART_SetConfig+0x240>
 80062e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e6:	d815      	bhi.n	8006314 <UART_SetConfig+0x258>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <UART_SetConfig+0x238>
 80062ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f0:	d008      	beq.n	8006304 <UART_SetConfig+0x248>
 80062f2:	e00f      	b.n	8006314 <UART_SetConfig+0x258>
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e052      	b.n	80063a2 <UART_SetConfig+0x2e6>
 80062fc:	2302      	movs	r3, #2
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	e04e      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006304:	2304      	movs	r3, #4
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800630a:	e04a      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800630c:	2308      	movs	r3, #8
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006312:	e046      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006314:	2310      	movs	r3, #16
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e042      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a17      	ldr	r2, [pc, #92]	; (8006380 <UART_SetConfig+0x2c4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d13a      	bne.n	800639c <UART_SetConfig+0x2e0>
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <UART_SetConfig+0x2cc>)
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006334:	d01a      	beq.n	800636c <UART_SetConfig+0x2b0>
 8006336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800633a:	d81b      	bhi.n	8006374 <UART_SetConfig+0x2b8>
 800633c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006340:	d00c      	beq.n	800635c <UART_SetConfig+0x2a0>
 8006342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006346:	d815      	bhi.n	8006374 <UART_SetConfig+0x2b8>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <UART_SetConfig+0x298>
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d008      	beq.n	8006364 <UART_SetConfig+0x2a8>
 8006352:	e00f      	b.n	8006374 <UART_SetConfig+0x2b8>
 8006354:	2300      	movs	r3, #0
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635a:	e022      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800635c:	2302      	movs	r3, #2
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006362:	e01e      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006364:	2304      	movs	r3, #4
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636a:	e01a      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800636c:	2308      	movs	r3, #8
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006372:	e016      	b.n	80063a2 <UART_SetConfig+0x2e6>
 8006374:	2310      	movs	r3, #16
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e012      	b.n	80063a2 <UART_SetConfig+0x2e6>
 800637c:	efff69f3 	.word	0xefff69f3
 8006380:	40008000 	.word	0x40008000
 8006384:	40013800 	.word	0x40013800
 8006388:	40021000 	.word	0x40021000
 800638c:	40004400 	.word	0x40004400
 8006390:	40004800 	.word	0x40004800
 8006394:	40004c00 	.word	0x40004c00
 8006398:	40005000 	.word	0x40005000
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a9f      	ldr	r2, [pc, #636]	; (8006624 <UART_SetConfig+0x568>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d17a      	bne.n	80064a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d824      	bhi.n	80063fe <UART_SetConfig+0x342>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x300>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ef 	.word	0x080063ef
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	080063ff 	.word	0x080063ff
 80063dc:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fe fd70 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80063e4:	61f8      	str	r0, [r7, #28]
        break;
 80063e6:	e010      	b.n	800640a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b8f      	ldr	r3, [pc, #572]	; (8006628 <UART_SetConfig+0x56c>)
 80063ea:	61fb      	str	r3, [r7, #28]
        break;
 80063ec:	e00d      	b.n	800640a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fe fcd1 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 80063f2:	61f8      	str	r0, [r7, #28]
        break;
 80063f4:	e009      	b.n	800640a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	61fb      	str	r3, [r7, #28]
        break;
 80063fc:	e005      	b.n	800640a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006408:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80fb 	beq.w	8006608 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	429a      	cmp	r2, r3
 8006420:	d305      	bcc.n	800642e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006428:	69fa      	ldr	r2, [r7, #28]
 800642a:	429a      	cmp	r2, r3
 800642c:	d903      	bls.n	8006436 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006434:	e0e8      	b.n	8006608 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	2200      	movs	r2, #0
 800643a:	461c      	mov	r4, r3
 800643c:	4615      	mov	r5, r2
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	022b      	lsls	r3, r5, #8
 8006448:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800644c:	0222      	lsls	r2, r4, #8
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	6849      	ldr	r1, [r1, #4]
 8006452:	0849      	lsrs	r1, r1, #1
 8006454:	2000      	movs	r0, #0
 8006456:	4688      	mov	r8, r1
 8006458:	4681      	mov	r9, r0
 800645a:	eb12 0a08 	adds.w	sl, r2, r8
 800645e:	eb43 0b09 	adc.w	fp, r3, r9
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006470:	4650      	mov	r0, sl
 8006472:	4659      	mov	r1, fp
 8006474:	f7fa fbe8 	bl	8000c48 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4613      	mov	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006486:	d308      	bcc.n	800649a <UART_SetConfig+0x3de>
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648e:	d204      	bcs.n	800649a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	e0b6      	b.n	8006608 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064a0:	e0b2      	b.n	8006608 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064aa:	d15e      	bne.n	800656a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d828      	bhi.n	8006506 <UART_SetConfig+0x44a>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x400>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064e9 	.word	0x080064e9
 80064c4:	080064f1 	.word	0x080064f1
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	08006507 	.word	0x08006507
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006507 	.word	0x08006507
 80064dc:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fe fcf0 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80064e4:	61f8      	str	r0, [r7, #28]
        break;
 80064e6:	e014      	b.n	8006512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe fd02 	bl	8004ef0 <HAL_RCC_GetPCLK2Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b4d      	ldr	r3, [pc, #308]	; (8006628 <UART_SetConfig+0x56c>)
 80064f2:	61fb      	str	r3, [r7, #28]
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe fc4d 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 80064fa:	61f8      	str	r0, [r7, #28]
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d077      	beq.n	8006608 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	005a      	lsls	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	441a      	add	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d916      	bls.n	8006562 <UART_SetConfig+0x4a6>
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653a:	d212      	bcs.n	8006562 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f023 030f 	bic.w	r3, r3, #15
 8006544:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	b29b      	uxth	r3, r3
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	b29a      	uxth	r2, r3
 8006552:	8afb      	ldrh	r3, [r7, #22]
 8006554:	4313      	orrs	r3, r2
 8006556:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	8afa      	ldrh	r2, [r7, #22]
 800655e:	60da      	str	r2, [r3, #12]
 8006560:	e052      	b.n	8006608 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006568:	e04e      	b.n	8006608 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800656a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800656e:	2b08      	cmp	r3, #8
 8006570:	d827      	bhi.n	80065c2 <UART_SetConfig+0x506>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x4bc>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065c3 	.word	0x080065c3
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065c3 	.word	0x080065c3
 8006598:	080065bb 	.word	0x080065bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fe fc92 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80065a0:	61f8      	str	r0, [r7, #28]
        break;
 80065a2:	e014      	b.n	80065ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fe fca4 	bl	8004ef0 <HAL_RCC_GetPCLK2Freq>
 80065a8:	61f8      	str	r0, [r7, #28]
        break;
 80065aa:	e010      	b.n	80065ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ac:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <UART_SetConfig+0x56c>)
 80065ae:	61fb      	str	r3, [r7, #28]
        break;
 80065b0:	e00d      	b.n	80065ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b2:	f7fe fbef 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 80065b6:	61f8      	str	r0, [r7, #28]
        break;
 80065b8:	e009      	b.n	80065ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065be:	61fb      	str	r3, [r7, #28]
        break;
 80065c0:	e005      	b.n	80065ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065cc:	bf00      	nop
    }

    if (pclk != 0U)
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d019      	beq.n	8006608 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	085a      	lsrs	r2, r3, #1
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	441a      	add	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d909      	bls.n	8006602 <UART_SetConfig+0x546>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f4:	d205      	bcs.n	8006602 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60da      	str	r2, [r3, #12]
 8006600:	e002      	b.n	8006608 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006614:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006618:	4618      	mov	r0, r3
 800661a:	3728      	adds	r7, #40	; 0x28
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40008000 	.word	0x40008000
 8006628:	00f42400 	.word	0x00f42400

0800662c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672a:	d10a      	bne.n	8006742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b098      	sub	sp, #96	; 0x60
 8006774:	af02      	add	r7, sp, #8
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006780:	f7fb fc5a 	bl	8002038 <HAL_GetTick>
 8006784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b08      	cmp	r3, #8
 8006792:	d12e      	bne.n	80067f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679c:	2200      	movs	r2, #0
 800679e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f88c 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d021      	beq.n	80067f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c2:	653b      	str	r3, [r7, #80]	; 0x50
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	647b      	str	r3, [r7, #68]	; 0x44
 80067ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e062      	b.n	80068b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d149      	bne.n	8006894 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f856 	bl	80068c0 <UART_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d03c      	beq.n	8006894 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	623b      	str	r3, [r7, #32]
   return(result);
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800682e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	633b      	str	r3, [r7, #48]	; 0x30
 800683a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800683e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	60fb      	str	r3, [r7, #12]
   return(result);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	64bb      	str	r3, [r7, #72]	; 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686c:	61fa      	str	r2, [r7, #28]
 800686e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	69b9      	ldr	r1, [r7, #24]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	617b      	str	r3, [r7, #20]
   return(result);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e011      	b.n	80068b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2220      	movs	r2, #32
 8006898:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3758      	adds	r7, #88	; 0x58
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	603b      	str	r3, [r7, #0]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	e049      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d045      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068da:	f7fb fbad 	bl	8002038 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d302      	bcc.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e048      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d031      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b08      	cmp	r3, #8
 800690e:	d110      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2208      	movs	r2, #8
 8006916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f838 	bl	800698e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2208      	movs	r2, #8
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e029      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006940:	d111      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800694a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f81e 	bl	800698e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e00f      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	429a      	cmp	r2, r3
 8006982:	d0a6      	beq.n	80068d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800698e:	b480      	push	{r7}
 8006990:	b095      	sub	sp, #84	; 0x54
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
 80069b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e6      	bne.n	8006996 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d118      	bne.n	8006a36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0310 	bic.w	r3, r3, #16
 8006a18:	647b      	str	r3, [r7, #68]	; 0x44
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a22:	61bb      	str	r3, [r7, #24]
 8006a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a4a:	bf00      	nop
 8006a4c:	3754      	adds	r7, #84	; 0x54
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <__cvt>:
 8006a56:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5a:	ec55 4b10 	vmov	r4, r5, d0
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	460e      	mov	r6, r1
 8006a62:	4619      	mov	r1, r3
 8006a64:	462b      	mov	r3, r5
 8006a66:	bfbb      	ittet	lt
 8006a68:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a6c:	461d      	movlt	r5, r3
 8006a6e:	2300      	movge	r3, #0
 8006a70:	232d      	movlt	r3, #45	; 0x2d
 8006a72:	700b      	strb	r3, [r1, #0]
 8006a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a76:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a7a:	4691      	mov	r9, r2
 8006a7c:	f023 0820 	bic.w	r8, r3, #32
 8006a80:	bfbc      	itt	lt
 8006a82:	4622      	movlt	r2, r4
 8006a84:	4614      	movlt	r4, r2
 8006a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a8a:	d005      	beq.n	8006a98 <__cvt+0x42>
 8006a8c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a90:	d100      	bne.n	8006a94 <__cvt+0x3e>
 8006a92:	3601      	adds	r6, #1
 8006a94:	2102      	movs	r1, #2
 8006a96:	e000      	b.n	8006a9a <__cvt+0x44>
 8006a98:	2103      	movs	r1, #3
 8006a9a:	ab03      	add	r3, sp, #12
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	ab02      	add	r3, sp, #8
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	ec45 4b10 	vmov	d0, r4, r5
 8006aa6:	4653      	mov	r3, sl
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	f000 fe7d 	bl	80077a8 <_dtoa_r>
 8006aae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ab2:	4607      	mov	r7, r0
 8006ab4:	d102      	bne.n	8006abc <__cvt+0x66>
 8006ab6:	f019 0f01 	tst.w	r9, #1
 8006aba:	d022      	beq.n	8006b02 <__cvt+0xac>
 8006abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ac0:	eb07 0906 	add.w	r9, r7, r6
 8006ac4:	d110      	bne.n	8006ae8 <__cvt+0x92>
 8006ac6:	783b      	ldrb	r3, [r7, #0]
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d10a      	bne.n	8006ae2 <__cvt+0x8c>
 8006acc:	2200      	movs	r2, #0
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	f7f9 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad8:	b918      	cbnz	r0, 8006ae2 <__cvt+0x8c>
 8006ada:	f1c6 0601 	rsb	r6, r6, #1
 8006ade:	f8ca 6000 	str.w	r6, [sl]
 8006ae2:	f8da 3000 	ldr.w	r3, [sl]
 8006ae6:	4499      	add	r9, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	2300      	movs	r3, #0
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	f7f9 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8006af4:	b108      	cbz	r0, 8006afa <__cvt+0xa4>
 8006af6:	f8cd 900c 	str.w	r9, [sp, #12]
 8006afa:	2230      	movs	r2, #48	; 0x30
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	454b      	cmp	r3, r9
 8006b00:	d307      	bcc.n	8006b12 <__cvt+0xbc>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b06:	1bdb      	subs	r3, r3, r7
 8006b08:	4638      	mov	r0, r7
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	b004      	add	sp, #16
 8006b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	9103      	str	r1, [sp, #12]
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e7f0      	b.n	8006afc <__cvt+0xa6>

08006b1a <__exponent>:
 8006b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	bfb8      	it	lt
 8006b22:	4249      	neglt	r1, r1
 8006b24:	f803 2b02 	strb.w	r2, [r3], #2
 8006b28:	bfb4      	ite	lt
 8006b2a:	222d      	movlt	r2, #45	; 0x2d
 8006b2c:	222b      	movge	r2, #43	; 0x2b
 8006b2e:	2909      	cmp	r1, #9
 8006b30:	7042      	strb	r2, [r0, #1]
 8006b32:	dd2a      	ble.n	8006b8a <__exponent+0x70>
 8006b34:	f10d 0207 	add.w	r2, sp, #7
 8006b38:	4617      	mov	r7, r2
 8006b3a:	260a      	movs	r6, #10
 8006b3c:	4694      	mov	ip, r2
 8006b3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b42:	fb06 1415 	mls	r4, r6, r5, r1
 8006b46:	3430      	adds	r4, #48	; 0x30
 8006b48:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	2c63      	cmp	r4, #99	; 0x63
 8006b50:	f102 32ff 	add.w	r2, r2, #4294967295
 8006b54:	4629      	mov	r1, r5
 8006b56:	dcf1      	bgt.n	8006b3c <__exponent+0x22>
 8006b58:	3130      	adds	r1, #48	; 0x30
 8006b5a:	f1ac 0402 	sub.w	r4, ip, #2
 8006b5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b62:	1c41      	adds	r1, r0, #1
 8006b64:	4622      	mov	r2, r4
 8006b66:	42ba      	cmp	r2, r7
 8006b68:	d30a      	bcc.n	8006b80 <__exponent+0x66>
 8006b6a:	f10d 0209 	add.w	r2, sp, #9
 8006b6e:	eba2 020c 	sub.w	r2, r2, ip
 8006b72:	42bc      	cmp	r4, r7
 8006b74:	bf88      	it	hi
 8006b76:	2200      	movhi	r2, #0
 8006b78:	4413      	add	r3, r2
 8006b7a:	1a18      	subs	r0, r3, r0
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b80:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b84:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b88:	e7ed      	b.n	8006b66 <__exponent+0x4c>
 8006b8a:	2330      	movs	r3, #48	; 0x30
 8006b8c:	3130      	adds	r1, #48	; 0x30
 8006b8e:	7083      	strb	r3, [r0, #2]
 8006b90:	70c1      	strb	r1, [r0, #3]
 8006b92:	1d03      	adds	r3, r0, #4
 8006b94:	e7f1      	b.n	8006b7a <__exponent+0x60>
	...

08006b98 <_printf_float>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	ed2d 8b02 	vpush	{d8}
 8006ba0:	b08d      	sub	sp, #52	; 0x34
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ba8:	4616      	mov	r6, r2
 8006baa:	461f      	mov	r7, r3
 8006bac:	4605      	mov	r5, r0
 8006bae:	f000 fcf9 	bl	80075a4 <_localeconv_r>
 8006bb2:	f8d0 a000 	ldr.w	sl, [r0]
 8006bb6:	4650      	mov	r0, sl
 8006bb8:	f7f9 fb5a 	bl	8000270 <strlen>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bcc:	3307      	adds	r3, #7
 8006bce:	f023 0307 	bic.w	r3, r3, #7
 8006bd2:	f103 0208 	add.w	r2, r3, #8
 8006bd6:	f8c8 2000 	str.w	r2, [r8]
 8006bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006be2:	9307      	str	r3, [sp, #28]
 8006be4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006be8:	ee08 0a10 	vmov	s16, r0
 8006bec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006bf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf4:	4b9e      	ldr	r3, [pc, #632]	; (8006e70 <_printf_float+0x2d8>)
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	f7f9 ff97 	bl	8000b2c <__aeabi_dcmpun>
 8006bfe:	bb88      	cbnz	r0, 8006c64 <_printf_float+0xcc>
 8006c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c04:	4b9a      	ldr	r3, [pc, #616]	; (8006e70 <_printf_float+0x2d8>)
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	f7f9 ff71 	bl	8000af0 <__aeabi_dcmple>
 8006c0e:	bb48      	cbnz	r0, 8006c64 <_printf_float+0xcc>
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 ff60 	bl	8000adc <__aeabi_dcmplt>
 8006c1c:	b110      	cbz	r0, 8006c24 <_printf_float+0x8c>
 8006c1e:	232d      	movs	r3, #45	; 0x2d
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c24:	4a93      	ldr	r2, [pc, #588]	; (8006e74 <_printf_float+0x2dc>)
 8006c26:	4b94      	ldr	r3, [pc, #592]	; (8006e78 <_printf_float+0x2e0>)
 8006c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c2c:	bf94      	ite	ls
 8006c2e:	4690      	movls	r8, r2
 8006c30:	4698      	movhi	r8, r3
 8006c32:	2303      	movs	r3, #3
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	9b05      	ldr	r3, [sp, #20]
 8006c38:	f023 0304 	bic.w	r3, r3, #4
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	9700      	str	r7, [sp, #0]
 8006c44:	4633      	mov	r3, r6
 8006c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f9da 	bl	8007004 <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	f040 8090 	bne.w	8006d76 <_printf_float+0x1de>
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	b00d      	add	sp, #52	; 0x34
 8006c5c:	ecbd 8b02 	vpop	{d8}
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	f7f9 ff5e 	bl	8000b2c <__aeabi_dcmpun>
 8006c70:	b140      	cbz	r0, 8006c84 <_printf_float+0xec>
 8006c72:	464b      	mov	r3, r9
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfbc      	itt	lt
 8006c78:	232d      	movlt	r3, #45	; 0x2d
 8006c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c7e:	4a7f      	ldr	r2, [pc, #508]	; (8006e7c <_printf_float+0x2e4>)
 8006c80:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <_printf_float+0x2e8>)
 8006c82:	e7d1      	b.n	8006c28 <_printf_float+0x90>
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c8a:	9206      	str	r2, [sp, #24]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	d13f      	bne.n	8006d10 <_printf_float+0x178>
 8006c90:	2306      	movs	r3, #6
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	6861      	ldr	r1, [r4, #4]
 8006c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ca6:	ab09      	add	r3, sp, #36	; 0x24
 8006ca8:	ec49 8b10 	vmov	d0, r8, r9
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6022      	str	r2, [r4, #0]
 8006cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f7ff fece 	bl	8006a56 <__cvt>
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cbe:	2b47      	cmp	r3, #71	; 0x47
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	d108      	bne.n	8006cd6 <_printf_float+0x13e>
 8006cc4:	1cc8      	adds	r0, r1, #3
 8006cc6:	db02      	blt.n	8006cce <_printf_float+0x136>
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	dd41      	ble.n	8006d52 <_printf_float+0x1ba>
 8006cce:	f1ab 0302 	sub.w	r3, fp, #2
 8006cd2:	fa5f fb83 	uxtb.w	fp, r3
 8006cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cda:	d820      	bhi.n	8006d1e <_printf_float+0x186>
 8006cdc:	3901      	subs	r1, #1
 8006cde:	465a      	mov	r2, fp
 8006ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8006ce6:	f7ff ff18 	bl	8006b1a <__exponent>
 8006cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cec:	1813      	adds	r3, r2, r0
 8006cee:	2a01      	cmp	r2, #1
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	dc02      	bgt.n	8006cfc <_printf_float+0x164>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	07d2      	lsls	r2, r2, #31
 8006cfa:	d501      	bpl.n	8006d00 <_printf_float+0x168>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d09c      	beq.n	8006c42 <_printf_float+0xaa>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	e798      	b.n	8006c42 <_printf_float+0xaa>
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	2a47      	cmp	r2, #71	; 0x47
 8006d14:	d1be      	bne.n	8006c94 <_printf_float+0xfc>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1bc      	bne.n	8006c94 <_printf_float+0xfc>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7b9      	b.n	8006c92 <_printf_float+0xfa>
 8006d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d22:	d118      	bne.n	8006d56 <_printf_float+0x1be>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	dd0b      	ble.n	8006d42 <_printf_float+0x1aa>
 8006d2a:	6121      	str	r1, [r4, #16]
 8006d2c:	b913      	cbnz	r3, 8006d34 <_printf_float+0x19c>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	07d0      	lsls	r0, r2, #31
 8006d32:	d502      	bpl.n	8006d3a <_printf_float+0x1a2>
 8006d34:	3301      	adds	r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d3c:	f04f 0900 	mov.w	r9, #0
 8006d40:	e7de      	b.n	8006d00 <_printf_float+0x168>
 8006d42:	b913      	cbnz	r3, 8006d4a <_printf_float+0x1b2>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	07d2      	lsls	r2, r2, #31
 8006d48:	d501      	bpl.n	8006d4e <_printf_float+0x1b6>
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	e7f4      	b.n	8006d38 <_printf_float+0x1a0>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7f2      	b.n	8006d38 <_printf_float+0x1a0>
 8006d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	db05      	blt.n	8006d68 <_printf_float+0x1d0>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	6121      	str	r1, [r4, #16]
 8006d60:	07d8      	lsls	r0, r3, #31
 8006d62:	d5ea      	bpl.n	8006d3a <_printf_float+0x1a2>
 8006d64:	1c4b      	adds	r3, r1, #1
 8006d66:	e7e7      	b.n	8006d38 <_printf_float+0x1a0>
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	bfd4      	ite	le
 8006d6c:	f1c1 0202 	rsble	r2, r1, #2
 8006d70:	2201      	movgt	r2, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	e7e0      	b.n	8006d38 <_printf_float+0x1a0>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	055a      	lsls	r2, r3, #21
 8006d7a:	d407      	bmi.n	8006d8c <_printf_float+0x1f4>
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	4642      	mov	r2, r8
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	d12c      	bne.n	8006de4 <_printf_float+0x24c>
 8006d8a:	e764      	b.n	8006c56 <_printf_float+0xbe>
 8006d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d90:	f240 80e0 	bls.w	8006f54 <_printf_float+0x3bc>
 8006d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f7f9 fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d034      	beq.n	8006e0e <_printf_float+0x276>
 8006da4:	4a37      	ldr	r2, [pc, #220]	; (8006e84 <_printf_float+0x2ec>)
 8006da6:	2301      	movs	r3, #1
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af51 	beq.w	8006c56 <_printf_float+0xbe>
 8006db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db8:	429a      	cmp	r2, r3
 8006dba:	db02      	blt.n	8006dc2 <_printf_float+0x22a>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	07d8      	lsls	r0, r3, #31
 8006dc0:	d510      	bpl.n	8006de4 <_printf_float+0x24c>
 8006dc2:	ee18 3a10 	vmov	r3, s16
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af41 	beq.w	8006c56 <_printf_float+0xbe>
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	f104 091a 	add.w	r9, r4, #26
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4543      	cmp	r3, r8
 8006de2:	dc09      	bgt.n	8006df8 <_printf_float+0x260>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	079b      	lsls	r3, r3, #30
 8006de8:	f100 8107 	bmi.w	8006ffa <_printf_float+0x462>
 8006dec:	68e0      	ldr	r0, [r4, #12]
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	4298      	cmp	r0, r3
 8006df2:	bfb8      	it	lt
 8006df4:	4618      	movlt	r0, r3
 8006df6:	e730      	b.n	8006c5a <_printf_float+0xc2>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	464a      	mov	r2, r9
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af27 	beq.w	8006c56 <_printf_float+0xbe>
 8006e08:	f108 0801 	add.w	r8, r8, #1
 8006e0c:	e7e6      	b.n	8006ddc <_printf_float+0x244>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dc39      	bgt.n	8006e88 <_printf_float+0x2f0>
 8006e14:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <_printf_float+0x2ec>)
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af19 	beq.w	8006c56 <_printf_float+0xbe>
 8006e24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d102      	bne.n	8006e32 <_printf_float+0x29a>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d5d8      	bpl.n	8006de4 <_printf_float+0x24c>
 8006e32:	ee18 3a10 	vmov	r3, s16
 8006e36:	4652      	mov	r2, sl
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af09 	beq.w	8006c56 <_printf_float+0xbe>
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	f104 0a1a 	add.w	sl, r4, #26
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	425b      	negs	r3, r3
 8006e50:	454b      	cmp	r3, r9
 8006e52:	dc01      	bgt.n	8006e58 <_printf_float+0x2c0>
 8006e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e56:	e792      	b.n	8006d7e <_printf_float+0x1e6>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f aef7 	beq.w	8006c56 <_printf_float+0xbe>
 8006e68:	f109 0901 	add.w	r9, r9, #1
 8006e6c:	e7ee      	b.n	8006e4c <_printf_float+0x2b4>
 8006e6e:	bf00      	nop
 8006e70:	7fefffff 	.word	0x7fefffff
 8006e74:	0800a6f8 	.word	0x0800a6f8
 8006e78:	0800a6fc 	.word	0x0800a6fc
 8006e7c:	0800a700 	.word	0x0800a700
 8006e80:	0800a704 	.word	0x0800a704
 8006e84:	0800a708 	.word	0x0800a708
 8006e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	bfa8      	it	ge
 8006e90:	461a      	movge	r2, r3
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	4691      	mov	r9, r2
 8006e96:	dc37      	bgt.n	8006f08 <_printf_float+0x370>
 8006e98:	f04f 0b00 	mov.w	fp, #0
 8006e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea0:	f104 021a 	add.w	r2, r4, #26
 8006ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	eba3 0309 	sub.w	r3, r3, r9
 8006eac:	455b      	cmp	r3, fp
 8006eae:	dc33      	bgt.n	8006f18 <_printf_float+0x380>
 8006eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	db3b      	blt.n	8006f30 <_printf_float+0x398>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07da      	lsls	r2, r3, #31
 8006ebc:	d438      	bmi.n	8006f30 <_printf_float+0x398>
 8006ebe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006ec2:	eba2 0903 	sub.w	r9, r2, r3
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	1ad2      	subs	r2, r2, r3
 8006eca:	4591      	cmp	r9, r2
 8006ecc:	bfa8      	it	ge
 8006ece:	4691      	movge	r9, r2
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	dc35      	bgt.n	8006f42 <_printf_float+0x3aa>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ede:	f104 0a1a 	add.w	sl, r4, #26
 8006ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	eba3 0309 	sub.w	r3, r3, r9
 8006eec:	4543      	cmp	r3, r8
 8006eee:	f77f af79 	ble.w	8006de4 <_printf_float+0x24c>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f aeaa 	beq.w	8006c56 <_printf_float+0xbe>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	e7ec      	b.n	8006ee2 <_printf_float+0x34a>
 8006f08:	4613      	mov	r3, r2
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	d1c0      	bne.n	8006e98 <_printf_float+0x300>
 8006f16:	e69e      	b.n	8006c56 <_printf_float+0xbe>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	9205      	str	r2, [sp, #20]
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f ae97 	beq.w	8006c56 <_printf_float+0xbe>
 8006f28:	9a05      	ldr	r2, [sp, #20]
 8006f2a:	f10b 0b01 	add.w	fp, fp, #1
 8006f2e:	e7b9      	b.n	8006ea4 <_printf_float+0x30c>
 8006f30:	ee18 3a10 	vmov	r3, s16
 8006f34:	4652      	mov	r2, sl
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1be      	bne.n	8006ebe <_printf_float+0x326>
 8006f40:	e689      	b.n	8006c56 <_printf_float+0xbe>
 8006f42:	9a05      	ldr	r2, [sp, #20]
 8006f44:	464b      	mov	r3, r9
 8006f46:	4442      	add	r2, r8
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d1c1      	bne.n	8006ed6 <_printf_float+0x33e>
 8006f52:	e680      	b.n	8006c56 <_printf_float+0xbe>
 8006f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f56:	2a01      	cmp	r2, #1
 8006f58:	dc01      	bgt.n	8006f5e <_printf_float+0x3c6>
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d53a      	bpl.n	8006fd4 <_printf_float+0x43c>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4642      	mov	r2, r8
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae74 	beq.w	8006c56 <_printf_float+0xbe>
 8006f6e:	ee18 3a10 	vmov	r3, s16
 8006f72:	4652      	mov	r2, sl
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f ae6b 	beq.w	8006c56 <_printf_float+0xbe>
 8006f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f8c:	f7f9 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f90:	b9d8      	cbnz	r0, 8006fca <_printf_float+0x432>
 8006f92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f96:	f108 0201 	add.w	r2, r8, #1
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	d10e      	bne.n	8006fc2 <_printf_float+0x42a>
 8006fa4:	e657      	b.n	8006c56 <_printf_float+0xbe>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4652      	mov	r2, sl
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f ae50 	beq.w	8006c56 <_printf_float+0xbe>
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	4543      	cmp	r3, r8
 8006fc0:	dcf1      	bgt.n	8006fa6 <_printf_float+0x40e>
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fc8:	e6da      	b.n	8006d80 <_printf_float+0x1e8>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0a1a 	add.w	sl, r4, #26
 8006fd2:	e7f2      	b.n	8006fba <_printf_float+0x422>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	e7df      	b.n	8006f9a <_printf_float+0x402>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	464a      	mov	r2, r9
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f ae36 	beq.w	8006c56 <_printf_float+0xbe>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	dcf0      	bgt.n	8006fda <_printf_float+0x442>
 8006ff8:	e6f8      	b.n	8006dec <_printf_float+0x254>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	f104 0919 	add.w	r9, r4, #25
 8007002:	e7f4      	b.n	8006fee <_printf_float+0x456>

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4699      	mov	r9, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007014:	4293      	cmp	r3, r2
 8007016:	bfb8      	it	lt
 8007018:	4613      	movlt	r3, r2
 800701a:	6033      	str	r3, [r6, #0]
 800701c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007020:	4607      	mov	r7, r0
 8007022:	460c      	mov	r4, r1
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc26      	bgt.n	800709a <_printf_common+0x96>
 800704c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007050:	1e13      	subs	r3, r2, #0
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d42b      	bmi.n	80070b4 <_printf_common+0xb0>
 800705c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007060:	4649      	mov	r1, r9
 8007062:	4638      	mov	r0, r7
 8007064:	47c0      	blx	r8
 8007066:	3001      	adds	r0, #1
 8007068:	d01e      	beq.n	80070a8 <_printf_common+0xa4>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf02      	ittt	eq
 8007076:	68e5      	ldreq	r5, [r4, #12]
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	1aed      	subeq	r5, r5, r3
 800707c:	68a3      	ldr	r3, [r4, #8]
 800707e:	bf0c      	ite	eq
 8007080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007084:	2500      	movne	r5, #0
 8007086:	4293      	cmp	r3, r2
 8007088:	bfc4      	itt	gt
 800708a:	1a9b      	subgt	r3, r3, r2
 800708c:	18ed      	addgt	r5, r5, r3
 800708e:	2600      	movs	r6, #0
 8007090:	341a      	adds	r4, #26
 8007092:	42b5      	cmp	r5, r6
 8007094:	d11a      	bne.n	80070cc <_printf_common+0xc8>
 8007096:	2000      	movs	r0, #0
 8007098:	e008      	b.n	80070ac <_printf_common+0xa8>
 800709a:	2301      	movs	r3, #1
 800709c:	4652      	mov	r2, sl
 800709e:	4649      	mov	r1, r9
 80070a0:	4638      	mov	r0, r7
 80070a2:	47c0      	blx	r8
 80070a4:	3001      	adds	r0, #1
 80070a6:	d103      	bne.n	80070b0 <_printf_common+0xac>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	3501      	adds	r5, #1
 80070b2:	e7c6      	b.n	8007042 <_printf_common+0x3e>
 80070b4:	18e1      	adds	r1, r4, r3
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	2030      	movs	r0, #48	; 0x30
 80070ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070be:	4422      	add	r2, r4
 80070c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070c8:	3302      	adds	r3, #2
 80070ca:	e7c7      	b.n	800705c <_printf_common+0x58>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4622      	mov	r2, r4
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d0e6      	beq.n	80070a8 <_printf_common+0xa4>
 80070da:	3601      	adds	r6, #1
 80070dc:	e7d9      	b.n	8007092 <_printf_common+0x8e>
	...

080070e0 <_printf_i>:
 80070e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	7e0f      	ldrb	r7, [r1, #24]
 80070e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e8:	2f78      	cmp	r7, #120	; 0x78
 80070ea:	4691      	mov	r9, r2
 80070ec:	4680      	mov	r8, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	469a      	mov	sl, r3
 80070f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070f6:	d807      	bhi.n	8007108 <_printf_i+0x28>
 80070f8:	2f62      	cmp	r7, #98	; 0x62
 80070fa:	d80a      	bhi.n	8007112 <_printf_i+0x32>
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f000 80d4 	beq.w	80072aa <_printf_i+0x1ca>
 8007102:	2f58      	cmp	r7, #88	; 0x58
 8007104:	f000 80c0 	beq.w	8007288 <_printf_i+0x1a8>
 8007108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800710c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007110:	e03a      	b.n	8007188 <_printf_i+0xa8>
 8007112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007116:	2b15      	cmp	r3, #21
 8007118:	d8f6      	bhi.n	8007108 <_printf_i+0x28>
 800711a:	a101      	add	r1, pc, #4	; (adr r1, 8007120 <_printf_i+0x40>)
 800711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007120:	08007179 	.word	0x08007179
 8007124:	0800718d 	.word	0x0800718d
 8007128:	08007109 	.word	0x08007109
 800712c:	08007109 	.word	0x08007109
 8007130:	08007109 	.word	0x08007109
 8007134:	08007109 	.word	0x08007109
 8007138:	0800718d 	.word	0x0800718d
 800713c:	08007109 	.word	0x08007109
 8007140:	08007109 	.word	0x08007109
 8007144:	08007109 	.word	0x08007109
 8007148:	08007109 	.word	0x08007109
 800714c:	08007291 	.word	0x08007291
 8007150:	080071b9 	.word	0x080071b9
 8007154:	0800724b 	.word	0x0800724b
 8007158:	08007109 	.word	0x08007109
 800715c:	08007109 	.word	0x08007109
 8007160:	080072b3 	.word	0x080072b3
 8007164:	08007109 	.word	0x08007109
 8007168:	080071b9 	.word	0x080071b9
 800716c:	08007109 	.word	0x08007109
 8007170:	08007109 	.word	0x08007109
 8007174:	08007253 	.word	0x08007253
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	602a      	str	r2, [r5, #0]
 8007180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007188:	2301      	movs	r3, #1
 800718a:	e09f      	b.n	80072cc <_printf_i+0x1ec>
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	682b      	ldr	r3, [r5, #0]
 8007190:	0607      	lsls	r7, r0, #24
 8007192:	f103 0104 	add.w	r1, r3, #4
 8007196:	6029      	str	r1, [r5, #0]
 8007198:	d501      	bpl.n	800719e <_printf_i+0xbe>
 800719a:	681e      	ldr	r6, [r3, #0]
 800719c:	e003      	b.n	80071a6 <_printf_i+0xc6>
 800719e:	0646      	lsls	r6, r0, #25
 80071a0:	d5fb      	bpl.n	800719a <_printf_i+0xba>
 80071a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	da03      	bge.n	80071b2 <_printf_i+0xd2>
 80071aa:	232d      	movs	r3, #45	; 0x2d
 80071ac:	4276      	negs	r6, r6
 80071ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b2:	485a      	ldr	r0, [pc, #360]	; (800731c <_printf_i+0x23c>)
 80071b4:	230a      	movs	r3, #10
 80071b6:	e012      	b.n	80071de <_printf_i+0xfe>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	6820      	ldr	r0, [r4, #0]
 80071bc:	1d19      	adds	r1, r3, #4
 80071be:	6029      	str	r1, [r5, #0]
 80071c0:	0605      	lsls	r5, r0, #24
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0xe8>
 80071c4:	681e      	ldr	r6, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0xee>
 80071c8:	0641      	lsls	r1, r0, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0xe4>
 80071cc:	881e      	ldrh	r6, [r3, #0]
 80071ce:	4853      	ldr	r0, [pc, #332]	; (800731c <_printf_i+0x23c>)
 80071d0:	2f6f      	cmp	r7, #111	; 0x6f
 80071d2:	bf0c      	ite	eq
 80071d4:	2308      	moveq	r3, #8
 80071d6:	230a      	movne	r3, #10
 80071d8:	2100      	movs	r1, #0
 80071da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071de:	6865      	ldr	r5, [r4, #4]
 80071e0:	60a5      	str	r5, [r4, #8]
 80071e2:	2d00      	cmp	r5, #0
 80071e4:	bfa2      	ittt	ge
 80071e6:	6821      	ldrge	r1, [r4, #0]
 80071e8:	f021 0104 	bicge.w	r1, r1, #4
 80071ec:	6021      	strge	r1, [r4, #0]
 80071ee:	b90e      	cbnz	r6, 80071f4 <_printf_i+0x114>
 80071f0:	2d00      	cmp	r5, #0
 80071f2:	d04b      	beq.n	800728c <_printf_i+0x1ac>
 80071f4:	4615      	mov	r5, r2
 80071f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071fa:	fb03 6711 	mls	r7, r3, r1, r6
 80071fe:	5dc7      	ldrb	r7, [r0, r7]
 8007200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007204:	4637      	mov	r7, r6
 8007206:	42bb      	cmp	r3, r7
 8007208:	460e      	mov	r6, r1
 800720a:	d9f4      	bls.n	80071f6 <_printf_i+0x116>
 800720c:	2b08      	cmp	r3, #8
 800720e:	d10b      	bne.n	8007228 <_printf_i+0x148>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07de      	lsls	r6, r3, #31
 8007214:	d508      	bpl.n	8007228 <_printf_i+0x148>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4299      	cmp	r1, r3
 800721c:	bfde      	ittt	le
 800721e:	2330      	movle	r3, #48	; 0x30
 8007220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007228:	1b52      	subs	r2, r2, r5
 800722a:	6122      	str	r2, [r4, #16]
 800722c:	f8cd a000 	str.w	sl, [sp]
 8007230:	464b      	mov	r3, r9
 8007232:	aa03      	add	r2, sp, #12
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f7ff fee4 	bl	8007004 <_printf_common>
 800723c:	3001      	adds	r0, #1
 800723e:	d14a      	bne.n	80072d6 <_printf_i+0x1f6>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	b004      	add	sp, #16
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f043 0320 	orr.w	r3, r3, #32
 8007250:	6023      	str	r3, [r4, #0]
 8007252:	4833      	ldr	r0, [pc, #204]	; (8007320 <_printf_i+0x240>)
 8007254:	2778      	movs	r7, #120	; 0x78
 8007256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	6829      	ldr	r1, [r5, #0]
 800725e:	061f      	lsls	r7, r3, #24
 8007260:	f851 6b04 	ldr.w	r6, [r1], #4
 8007264:	d402      	bmi.n	800726c <_printf_i+0x18c>
 8007266:	065f      	lsls	r7, r3, #25
 8007268:	bf48      	it	mi
 800726a:	b2b6      	uxthmi	r6, r6
 800726c:	07df      	lsls	r7, r3, #31
 800726e:	bf48      	it	mi
 8007270:	f043 0320 	orrmi.w	r3, r3, #32
 8007274:	6029      	str	r1, [r5, #0]
 8007276:	bf48      	it	mi
 8007278:	6023      	strmi	r3, [r4, #0]
 800727a:	b91e      	cbnz	r6, 8007284 <_printf_i+0x1a4>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	f023 0320 	bic.w	r3, r3, #32
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	2310      	movs	r3, #16
 8007286:	e7a7      	b.n	80071d8 <_printf_i+0xf8>
 8007288:	4824      	ldr	r0, [pc, #144]	; (800731c <_printf_i+0x23c>)
 800728a:	e7e4      	b.n	8007256 <_printf_i+0x176>
 800728c:	4615      	mov	r5, r2
 800728e:	e7bd      	b.n	800720c <_printf_i+0x12c>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	6826      	ldr	r6, [r4, #0]
 8007294:	6961      	ldr	r1, [r4, #20]
 8007296:	1d18      	adds	r0, r3, #4
 8007298:	6028      	str	r0, [r5, #0]
 800729a:	0635      	lsls	r5, r6, #24
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	d501      	bpl.n	80072a4 <_printf_i+0x1c4>
 80072a0:	6019      	str	r1, [r3, #0]
 80072a2:	e002      	b.n	80072aa <_printf_i+0x1ca>
 80072a4:	0670      	lsls	r0, r6, #25
 80072a6:	d5fb      	bpl.n	80072a0 <_printf_i+0x1c0>
 80072a8:	8019      	strh	r1, [r3, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	6123      	str	r3, [r4, #16]
 80072ae:	4615      	mov	r5, r2
 80072b0:	e7bc      	b.n	800722c <_printf_i+0x14c>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	602a      	str	r2, [r5, #0]
 80072b8:	681d      	ldr	r5, [r3, #0]
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	2100      	movs	r1, #0
 80072be:	4628      	mov	r0, r5
 80072c0:	f7f8 ff86 	bl	80001d0 <memchr>
 80072c4:	b108      	cbz	r0, 80072ca <_printf_i+0x1ea>
 80072c6:	1b40      	subs	r0, r0, r5
 80072c8:	6060      	str	r0, [r4, #4]
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	2300      	movs	r3, #0
 80072d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d4:	e7aa      	b.n	800722c <_printf_i+0x14c>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	462a      	mov	r2, r5
 80072da:	4649      	mov	r1, r9
 80072dc:	4640      	mov	r0, r8
 80072de:	47d0      	blx	sl
 80072e0:	3001      	adds	r0, #1
 80072e2:	d0ad      	beq.n	8007240 <_printf_i+0x160>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	079b      	lsls	r3, r3, #30
 80072e8:	d413      	bmi.n	8007312 <_printf_i+0x232>
 80072ea:	68e0      	ldr	r0, [r4, #12]
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	4298      	cmp	r0, r3
 80072f0:	bfb8      	it	lt
 80072f2:	4618      	movlt	r0, r3
 80072f4:	e7a6      	b.n	8007244 <_printf_i+0x164>
 80072f6:	2301      	movs	r3, #1
 80072f8:	4632      	mov	r2, r6
 80072fa:	4649      	mov	r1, r9
 80072fc:	4640      	mov	r0, r8
 80072fe:	47d0      	blx	sl
 8007300:	3001      	adds	r0, #1
 8007302:	d09d      	beq.n	8007240 <_printf_i+0x160>
 8007304:	3501      	adds	r5, #1
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	9903      	ldr	r1, [sp, #12]
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	42ab      	cmp	r3, r5
 800730e:	dcf2      	bgt.n	80072f6 <_printf_i+0x216>
 8007310:	e7eb      	b.n	80072ea <_printf_i+0x20a>
 8007312:	2500      	movs	r5, #0
 8007314:	f104 0619 	add.w	r6, r4, #25
 8007318:	e7f5      	b.n	8007306 <_printf_i+0x226>
 800731a:	bf00      	nop
 800731c:	0800a70a 	.word	0x0800a70a
 8007320:	0800a71b 	.word	0x0800a71b

08007324 <std>:
 8007324:	2300      	movs	r3, #0
 8007326:	b510      	push	{r4, lr}
 8007328:	4604      	mov	r4, r0
 800732a:	e9c0 3300 	strd	r3, r3, [r0]
 800732e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007332:	6083      	str	r3, [r0, #8]
 8007334:	8181      	strh	r1, [r0, #12]
 8007336:	6643      	str	r3, [r0, #100]	; 0x64
 8007338:	81c2      	strh	r2, [r0, #14]
 800733a:	6183      	str	r3, [r0, #24]
 800733c:	4619      	mov	r1, r3
 800733e:	2208      	movs	r2, #8
 8007340:	305c      	adds	r0, #92	; 0x5c
 8007342:	f000 f926 	bl	8007592 <memset>
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <std+0x58>)
 8007348:	6263      	str	r3, [r4, #36]	; 0x24
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <std+0x5c>)
 800734c:	62a3      	str	r3, [r4, #40]	; 0x28
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <std+0x60>)
 8007350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007352:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <std+0x64>)
 8007354:	6323      	str	r3, [r4, #48]	; 0x30
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <std+0x68>)
 8007358:	6224      	str	r4, [r4, #32]
 800735a:	429c      	cmp	r4, r3
 800735c:	d006      	beq.n	800736c <std+0x48>
 800735e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007362:	4294      	cmp	r4, r2
 8007364:	d002      	beq.n	800736c <std+0x48>
 8007366:	33d0      	adds	r3, #208	; 0xd0
 8007368:	429c      	cmp	r4, r3
 800736a:	d105      	bne.n	8007378 <std+0x54>
 800736c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007374:	f000 b98a 	b.w	800768c <__retarget_lock_init_recursive>
 8007378:	bd10      	pop	{r4, pc}
 800737a:	bf00      	nop
 800737c:	0800750d 	.word	0x0800750d
 8007380:	0800752f 	.word	0x0800752f
 8007384:	08007567 	.word	0x08007567
 8007388:	0800758b 	.word	0x0800758b
 800738c:	200003bc 	.word	0x200003bc

08007390 <stdio_exit_handler>:
 8007390:	4a02      	ldr	r2, [pc, #8]	; (800739c <stdio_exit_handler+0xc>)
 8007392:	4903      	ldr	r1, [pc, #12]	; (80073a0 <stdio_exit_handler+0x10>)
 8007394:	4803      	ldr	r0, [pc, #12]	; (80073a4 <stdio_exit_handler+0x14>)
 8007396:	f000 b869 	b.w	800746c <_fwalk_sglue>
 800739a:	bf00      	nop
 800739c:	2000000c 	.word	0x2000000c
 80073a0:	080092c9 	.word	0x080092c9
 80073a4:	20000018 	.word	0x20000018

080073a8 <cleanup_stdio>:
 80073a8:	6841      	ldr	r1, [r0, #4]
 80073aa:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <cleanup_stdio+0x34>)
 80073ac:	4299      	cmp	r1, r3
 80073ae:	b510      	push	{r4, lr}
 80073b0:	4604      	mov	r4, r0
 80073b2:	d001      	beq.n	80073b8 <cleanup_stdio+0x10>
 80073b4:	f001 ff88 	bl	80092c8 <_fflush_r>
 80073b8:	68a1      	ldr	r1, [r4, #8]
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <cleanup_stdio+0x38>)
 80073bc:	4299      	cmp	r1, r3
 80073be:	d002      	beq.n	80073c6 <cleanup_stdio+0x1e>
 80073c0:	4620      	mov	r0, r4
 80073c2:	f001 ff81 	bl	80092c8 <_fflush_r>
 80073c6:	68e1      	ldr	r1, [r4, #12]
 80073c8:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <cleanup_stdio+0x3c>)
 80073ca:	4299      	cmp	r1, r3
 80073cc:	d004      	beq.n	80073d8 <cleanup_stdio+0x30>
 80073ce:	4620      	mov	r0, r4
 80073d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d4:	f001 bf78 	b.w	80092c8 <_fflush_r>
 80073d8:	bd10      	pop	{r4, pc}
 80073da:	bf00      	nop
 80073dc:	200003bc 	.word	0x200003bc
 80073e0:	20000424 	.word	0x20000424
 80073e4:	2000048c 	.word	0x2000048c

080073e8 <global_stdio_init.part.0>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <global_stdio_init.part.0+0x30>)
 80073ec:	4c0b      	ldr	r4, [pc, #44]	; (800741c <global_stdio_init.part.0+0x34>)
 80073ee:	4a0c      	ldr	r2, [pc, #48]	; (8007420 <global_stdio_init.part.0+0x38>)
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	4620      	mov	r0, r4
 80073f4:	2200      	movs	r2, #0
 80073f6:	2104      	movs	r1, #4
 80073f8:	f7ff ff94 	bl	8007324 <std>
 80073fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007400:	2201      	movs	r2, #1
 8007402:	2109      	movs	r1, #9
 8007404:	f7ff ff8e 	bl	8007324 <std>
 8007408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800740c:	2202      	movs	r2, #2
 800740e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007412:	2112      	movs	r1, #18
 8007414:	f7ff bf86 	b.w	8007324 <std>
 8007418:	200004f4 	.word	0x200004f4
 800741c:	200003bc 	.word	0x200003bc
 8007420:	08007391 	.word	0x08007391

08007424 <__sfp_lock_acquire>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__sfp_lock_acquire+0x8>)
 8007426:	f000 b932 	b.w	800768e <__retarget_lock_acquire_recursive>
 800742a:	bf00      	nop
 800742c:	200004fd 	.word	0x200004fd

08007430 <__sfp_lock_release>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__sfp_lock_release+0x8>)
 8007432:	f000 b92d 	b.w	8007690 <__retarget_lock_release_recursive>
 8007436:	bf00      	nop
 8007438:	200004fd 	.word	0x200004fd

0800743c <__sinit>:
 800743c:	b510      	push	{r4, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	f7ff fff0 	bl	8007424 <__sfp_lock_acquire>
 8007444:	6a23      	ldr	r3, [r4, #32]
 8007446:	b11b      	cbz	r3, 8007450 <__sinit+0x14>
 8007448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800744c:	f7ff bff0 	b.w	8007430 <__sfp_lock_release>
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <__sinit+0x28>)
 8007452:	6223      	str	r3, [r4, #32]
 8007454:	4b04      	ldr	r3, [pc, #16]	; (8007468 <__sinit+0x2c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f5      	bne.n	8007448 <__sinit+0xc>
 800745c:	f7ff ffc4 	bl	80073e8 <global_stdio_init.part.0>
 8007460:	e7f2      	b.n	8007448 <__sinit+0xc>
 8007462:	bf00      	nop
 8007464:	080073a9 	.word	0x080073a9
 8007468:	200004f4 	.word	0x200004f4

0800746c <_fwalk_sglue>:
 800746c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007470:	4607      	mov	r7, r0
 8007472:	4688      	mov	r8, r1
 8007474:	4614      	mov	r4, r2
 8007476:	2600      	movs	r6, #0
 8007478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800747c:	f1b9 0901 	subs.w	r9, r9, #1
 8007480:	d505      	bpl.n	800748e <_fwalk_sglue+0x22>
 8007482:	6824      	ldr	r4, [r4, #0]
 8007484:	2c00      	cmp	r4, #0
 8007486:	d1f7      	bne.n	8007478 <_fwalk_sglue+0xc>
 8007488:	4630      	mov	r0, r6
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d907      	bls.n	80074a4 <_fwalk_sglue+0x38>
 8007494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007498:	3301      	adds	r3, #1
 800749a:	d003      	beq.n	80074a4 <_fwalk_sglue+0x38>
 800749c:	4629      	mov	r1, r5
 800749e:	4638      	mov	r0, r7
 80074a0:	47c0      	blx	r8
 80074a2:	4306      	orrs	r6, r0
 80074a4:	3568      	adds	r5, #104	; 0x68
 80074a6:	e7e9      	b.n	800747c <_fwalk_sglue+0x10>

080074a8 <iprintf>:
 80074a8:	b40f      	push	{r0, r1, r2, r3}
 80074aa:	b507      	push	{r0, r1, r2, lr}
 80074ac:	4906      	ldr	r1, [pc, #24]	; (80074c8 <iprintf+0x20>)
 80074ae:	ab04      	add	r3, sp, #16
 80074b0:	6808      	ldr	r0, [r1, #0]
 80074b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b6:	6881      	ldr	r1, [r0, #8]
 80074b8:	9301      	str	r3, [sp, #4]
 80074ba:	f001 fd65 	bl	8008f88 <_vfiprintf_r>
 80074be:	b003      	add	sp, #12
 80074c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074c4:	b004      	add	sp, #16
 80074c6:	4770      	bx	lr
 80074c8:	20000064 	.word	0x20000064

080074cc <siprintf>:
 80074cc:	b40e      	push	{r1, r2, r3}
 80074ce:	b500      	push	{lr}
 80074d0:	b09c      	sub	sp, #112	; 0x70
 80074d2:	ab1d      	add	r3, sp, #116	; 0x74
 80074d4:	9002      	str	r0, [sp, #8]
 80074d6:	9006      	str	r0, [sp, #24]
 80074d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074dc:	4809      	ldr	r0, [pc, #36]	; (8007504 <siprintf+0x38>)
 80074de:	9107      	str	r1, [sp, #28]
 80074e0:	9104      	str	r1, [sp, #16]
 80074e2:	4909      	ldr	r1, [pc, #36]	; (8007508 <siprintf+0x3c>)
 80074e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	a902      	add	r1, sp, #8
 80074f0:	f001 fc22 	bl	8008d38 <_svfiprintf_r>
 80074f4:	9b02      	ldr	r3, [sp, #8]
 80074f6:	2200      	movs	r2, #0
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	b01c      	add	sp, #112	; 0x70
 80074fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007500:	b003      	add	sp, #12
 8007502:	4770      	bx	lr
 8007504:	20000064 	.word	0x20000064
 8007508:	ffff0208 	.word	0xffff0208

0800750c <__sread>:
 800750c:	b510      	push	{r4, lr}
 800750e:	460c      	mov	r4, r1
 8007510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007514:	f000 f86c 	bl	80075f0 <_read_r>
 8007518:	2800      	cmp	r0, #0
 800751a:	bfab      	itete	ge
 800751c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800751e:	89a3      	ldrhlt	r3, [r4, #12]
 8007520:	181b      	addge	r3, r3, r0
 8007522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007526:	bfac      	ite	ge
 8007528:	6563      	strge	r3, [r4, #84]	; 0x54
 800752a:	81a3      	strhlt	r3, [r4, #12]
 800752c:	bd10      	pop	{r4, pc}

0800752e <__swrite>:
 800752e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007532:	461f      	mov	r7, r3
 8007534:	898b      	ldrh	r3, [r1, #12]
 8007536:	05db      	lsls	r3, r3, #23
 8007538:	4605      	mov	r5, r0
 800753a:	460c      	mov	r4, r1
 800753c:	4616      	mov	r6, r2
 800753e:	d505      	bpl.n	800754c <__swrite+0x1e>
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	2302      	movs	r3, #2
 8007546:	2200      	movs	r2, #0
 8007548:	f000 f840 	bl	80075cc <_lseek_r>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	4632      	mov	r2, r6
 800755a:	463b      	mov	r3, r7
 800755c:	4628      	mov	r0, r5
 800755e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007562:	f000 b857 	b.w	8007614 <_write_r>

08007566 <__sseek>:
 8007566:	b510      	push	{r4, lr}
 8007568:	460c      	mov	r4, r1
 800756a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756e:	f000 f82d 	bl	80075cc <_lseek_r>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	bf15      	itete	ne
 8007578:	6560      	strne	r0, [r4, #84]	; 0x54
 800757a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800757e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007582:	81a3      	strheq	r3, [r4, #12]
 8007584:	bf18      	it	ne
 8007586:	81a3      	strhne	r3, [r4, #12]
 8007588:	bd10      	pop	{r4, pc}

0800758a <__sclose>:
 800758a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758e:	f000 b80d 	b.w	80075ac <_close_r>

08007592 <memset>:
 8007592:	4402      	add	r2, r0
 8007594:	4603      	mov	r3, r0
 8007596:	4293      	cmp	r3, r2
 8007598:	d100      	bne.n	800759c <memset+0xa>
 800759a:	4770      	bx	lr
 800759c:	f803 1b01 	strb.w	r1, [r3], #1
 80075a0:	e7f9      	b.n	8007596 <memset+0x4>
	...

080075a4 <_localeconv_r>:
 80075a4:	4800      	ldr	r0, [pc, #0]	; (80075a8 <_localeconv_r+0x4>)
 80075a6:	4770      	bx	lr
 80075a8:	20000158 	.word	0x20000158

080075ac <_close_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d06      	ldr	r5, [pc, #24]	; (80075c8 <_close_r+0x1c>)
 80075b0:	2300      	movs	r3, #0
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	f7fa fb27 	bl	8001c0a <_close>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_close_r+0x1a>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_close_r+0x1a>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	200004f8 	.word	0x200004f8

080075cc <_lseek_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d07      	ldr	r5, [pc, #28]	; (80075ec <_lseek_r+0x20>)
 80075d0:	4604      	mov	r4, r0
 80075d2:	4608      	mov	r0, r1
 80075d4:	4611      	mov	r1, r2
 80075d6:	2200      	movs	r2, #0
 80075d8:	602a      	str	r2, [r5, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f7fa fb3c 	bl	8001c58 <_lseek>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_lseek_r+0x1e>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_lseek_r+0x1e>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	200004f8 	.word	0x200004f8

080075f0 <_read_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_read_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7fa faca 	bl	8001b98 <_read>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_read_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_read_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	200004f8 	.word	0x200004f8

08007614 <_write_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_write_r+0x20>)
 8007618:	4604      	mov	r4, r0
 800761a:	4608      	mov	r0, r1
 800761c:	4611      	mov	r1, r2
 800761e:	2200      	movs	r2, #0
 8007620:	602a      	str	r2, [r5, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f7fa fad5 	bl	8001bd2 <_write>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_write_r+0x1e>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_write_r+0x1e>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	200004f8 	.word	0x200004f8

08007638 <__errno>:
 8007638:	4b01      	ldr	r3, [pc, #4]	; (8007640 <__errno+0x8>)
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20000064 	.word	0x20000064

08007644 <__libc_init_array>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	4d0d      	ldr	r5, [pc, #52]	; (800767c <__libc_init_array+0x38>)
 8007648:	4c0d      	ldr	r4, [pc, #52]	; (8007680 <__libc_init_array+0x3c>)
 800764a:	1b64      	subs	r4, r4, r5
 800764c:	10a4      	asrs	r4, r4, #2
 800764e:	2600      	movs	r6, #0
 8007650:	42a6      	cmp	r6, r4
 8007652:	d109      	bne.n	8007668 <__libc_init_array+0x24>
 8007654:	4d0b      	ldr	r5, [pc, #44]	; (8007684 <__libc_init_array+0x40>)
 8007656:	4c0c      	ldr	r4, [pc, #48]	; (8007688 <__libc_init_array+0x44>)
 8007658:	f002 ffd2 	bl	800a600 <_init>
 800765c:	1b64      	subs	r4, r4, r5
 800765e:	10a4      	asrs	r4, r4, #2
 8007660:	2600      	movs	r6, #0
 8007662:	42a6      	cmp	r6, r4
 8007664:	d105      	bne.n	8007672 <__libc_init_array+0x2e>
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	f855 3b04 	ldr.w	r3, [r5], #4
 800766c:	4798      	blx	r3
 800766e:	3601      	adds	r6, #1
 8007670:	e7ee      	b.n	8007650 <__libc_init_array+0xc>
 8007672:	f855 3b04 	ldr.w	r3, [r5], #4
 8007676:	4798      	blx	r3
 8007678:	3601      	adds	r6, #1
 800767a:	e7f2      	b.n	8007662 <__libc_init_array+0x1e>
 800767c:	0800aaa8 	.word	0x0800aaa8
 8007680:	0800aaa8 	.word	0x0800aaa8
 8007684:	0800aaa8 	.word	0x0800aaa8
 8007688:	0800aaac 	.word	0x0800aaac

0800768c <__retarget_lock_init_recursive>:
 800768c:	4770      	bx	lr

0800768e <__retarget_lock_acquire_recursive>:
 800768e:	4770      	bx	lr

08007690 <__retarget_lock_release_recursive>:
 8007690:	4770      	bx	lr

08007692 <quorem>:
 8007692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	6903      	ldr	r3, [r0, #16]
 8007698:	690c      	ldr	r4, [r1, #16]
 800769a:	42a3      	cmp	r3, r4
 800769c:	4607      	mov	r7, r0
 800769e:	db7e      	blt.n	800779e <quorem+0x10c>
 80076a0:	3c01      	subs	r4, #1
 80076a2:	f101 0814 	add.w	r8, r1, #20
 80076a6:	f100 0514 	add.w	r5, r0, #20
 80076aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076b8:	3301      	adds	r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076c8:	d331      	bcc.n	800772e <quorem+0x9c>
 80076ca:	f04f 0e00 	mov.w	lr, #0
 80076ce:	4640      	mov	r0, r8
 80076d0:	46ac      	mov	ip, r5
 80076d2:	46f2      	mov	sl, lr
 80076d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076d8:	b293      	uxth	r3, r2
 80076da:	fb06 e303 	mla	r3, r6, r3, lr
 80076de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076e2:	0c1a      	lsrs	r2, r3, #16
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	ebaa 0303 	sub.w	r3, sl, r3
 80076ea:	f8dc a000 	ldr.w	sl, [ip]
 80076ee:	fa13 f38a 	uxtah	r3, r3, sl
 80076f2:	fb06 220e 	mla	r2, r6, lr, r2
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076fe:	b292      	uxth	r2, r2
 8007700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007708:	f8bd 3000 	ldrh.w	r3, [sp]
 800770c:	4581      	cmp	r9, r0
 800770e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007712:	f84c 3b04 	str.w	r3, [ip], #4
 8007716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800771a:	d2db      	bcs.n	80076d4 <quorem+0x42>
 800771c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007720:	b92b      	cbnz	r3, 800772e <quorem+0x9c>
 8007722:	9b01      	ldr	r3, [sp, #4]
 8007724:	3b04      	subs	r3, #4
 8007726:	429d      	cmp	r5, r3
 8007728:	461a      	mov	r2, r3
 800772a:	d32c      	bcc.n	8007786 <quorem+0xf4>
 800772c:	613c      	str	r4, [r7, #16]
 800772e:	4638      	mov	r0, r7
 8007730:	f001 f9a8 	bl	8008a84 <__mcmp>
 8007734:	2800      	cmp	r0, #0
 8007736:	db22      	blt.n	800777e <quorem+0xec>
 8007738:	3601      	adds	r6, #1
 800773a:	4629      	mov	r1, r5
 800773c:	2000      	movs	r0, #0
 800773e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007742:	f8d1 c000 	ldr.w	ip, [r1]
 8007746:	b293      	uxth	r3, r2
 8007748:	1ac3      	subs	r3, r0, r3
 800774a:	0c12      	lsrs	r2, r2, #16
 800774c:	fa13 f38c 	uxtah	r3, r3, ip
 8007750:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007758:	b29b      	uxth	r3, r3
 800775a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800775e:	45c1      	cmp	r9, r8
 8007760:	f841 3b04 	str.w	r3, [r1], #4
 8007764:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007768:	d2e9      	bcs.n	800773e <quorem+0xac>
 800776a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800776e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007772:	b922      	cbnz	r2, 800777e <quorem+0xec>
 8007774:	3b04      	subs	r3, #4
 8007776:	429d      	cmp	r5, r3
 8007778:	461a      	mov	r2, r3
 800777a:	d30a      	bcc.n	8007792 <quorem+0x100>
 800777c:	613c      	str	r4, [r7, #16]
 800777e:	4630      	mov	r0, r6
 8007780:	b003      	add	sp, #12
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	3b04      	subs	r3, #4
 800778a:	2a00      	cmp	r2, #0
 800778c:	d1ce      	bne.n	800772c <quorem+0x9a>
 800778e:	3c01      	subs	r4, #1
 8007790:	e7c9      	b.n	8007726 <quorem+0x94>
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	3b04      	subs	r3, #4
 8007796:	2a00      	cmp	r2, #0
 8007798:	d1f0      	bne.n	800777c <quorem+0xea>
 800779a:	3c01      	subs	r4, #1
 800779c:	e7eb      	b.n	8007776 <quorem+0xe4>
 800779e:	2000      	movs	r0, #0
 80077a0:	e7ee      	b.n	8007780 <quorem+0xee>
 80077a2:	0000      	movs	r0, r0
 80077a4:	0000      	movs	r0, r0
	...

080077a8 <_dtoa_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	ed2d 8b04 	vpush	{d8-d9}
 80077b0:	69c5      	ldr	r5, [r0, #28]
 80077b2:	b093      	sub	sp, #76	; 0x4c
 80077b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077b8:	ec57 6b10 	vmov	r6, r7, d0
 80077bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077c0:	9107      	str	r1, [sp, #28]
 80077c2:	4604      	mov	r4, r0
 80077c4:	920a      	str	r2, [sp, #40]	; 0x28
 80077c6:	930d      	str	r3, [sp, #52]	; 0x34
 80077c8:	b975      	cbnz	r5, 80077e8 <_dtoa_r+0x40>
 80077ca:	2010      	movs	r0, #16
 80077cc:	f000 fe2a 	bl	8008424 <malloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	61e0      	str	r0, [r4, #28]
 80077d4:	b920      	cbnz	r0, 80077e0 <_dtoa_r+0x38>
 80077d6:	4bae      	ldr	r3, [pc, #696]	; (8007a90 <_dtoa_r+0x2e8>)
 80077d8:	21ef      	movs	r1, #239	; 0xef
 80077da:	48ae      	ldr	r0, [pc, #696]	; (8007a94 <_dtoa_r+0x2ec>)
 80077dc:	f001 fe6a 	bl	80094b4 <__assert_func>
 80077e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077e4:	6005      	str	r5, [r0, #0]
 80077e6:	60c5      	str	r5, [r0, #12]
 80077e8:	69e3      	ldr	r3, [r4, #28]
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	b151      	cbz	r1, 8007804 <_dtoa_r+0x5c>
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	604a      	str	r2, [r1, #4]
 80077f2:	2301      	movs	r3, #1
 80077f4:	4093      	lsls	r3, r2
 80077f6:	608b      	str	r3, [r1, #8]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 ff07 	bl	800860c <_Bfree>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	1e3b      	subs	r3, r7, #0
 8007806:	bfbb      	ittet	lt
 8007808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800780c:	9303      	strlt	r3, [sp, #12]
 800780e:	2300      	movge	r3, #0
 8007810:	2201      	movlt	r2, #1
 8007812:	bfac      	ite	ge
 8007814:	f8c8 3000 	strge.w	r3, [r8]
 8007818:	f8c8 2000 	strlt.w	r2, [r8]
 800781c:	4b9e      	ldr	r3, [pc, #632]	; (8007a98 <_dtoa_r+0x2f0>)
 800781e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007822:	ea33 0308 	bics.w	r3, r3, r8
 8007826:	d11b      	bne.n	8007860 <_dtoa_r+0xb8>
 8007828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782a:	f242 730f 	movw	r3, #9999	; 0x270f
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007834:	4333      	orrs	r3, r6
 8007836:	f000 8593 	beq.w	8008360 <_dtoa_r+0xbb8>
 800783a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800783c:	b963      	cbnz	r3, 8007858 <_dtoa_r+0xb0>
 800783e:	4b97      	ldr	r3, [pc, #604]	; (8007a9c <_dtoa_r+0x2f4>)
 8007840:	e027      	b.n	8007892 <_dtoa_r+0xea>
 8007842:	4b97      	ldr	r3, [pc, #604]	; (8007aa0 <_dtoa_r+0x2f8>)
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	9800      	ldr	r0, [sp, #0]
 800784e:	b013      	add	sp, #76	; 0x4c
 8007850:	ecbd 8b04 	vpop	{d8-d9}
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	4b90      	ldr	r3, [pc, #576]	; (8007a9c <_dtoa_r+0x2f4>)
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	3303      	adds	r3, #3
 800785e:	e7f3      	b.n	8007848 <_dtoa_r+0xa0>
 8007860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	ec51 0b17 	vmov	r0, r1, d7
 800786a:	eeb0 8a47 	vmov.f32	s16, s14
 800786e:	eef0 8a67 	vmov.f32	s17, s15
 8007872:	2300      	movs	r3, #0
 8007874:	f7f9 f928 	bl	8000ac8 <__aeabi_dcmpeq>
 8007878:	4681      	mov	r9, r0
 800787a:	b160      	cbz	r0, 8007896 <_dtoa_r+0xee>
 800787c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800787e:	2301      	movs	r3, #1
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8568 	beq.w	800835a <_dtoa_r+0xbb2>
 800788a:	4b86      	ldr	r3, [pc, #536]	; (8007aa4 <_dtoa_r+0x2fc>)
 800788c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	3b01      	subs	r3, #1
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	e7da      	b.n	800784c <_dtoa_r+0xa4>
 8007896:	aa10      	add	r2, sp, #64	; 0x40
 8007898:	a911      	add	r1, sp, #68	; 0x44
 800789a:	4620      	mov	r0, r4
 800789c:	eeb0 0a48 	vmov.f32	s0, s16
 80078a0:	eef0 0a68 	vmov.f32	s1, s17
 80078a4:	f001 f994 	bl	8008bd0 <__d2b>
 80078a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078ac:	4682      	mov	sl, r0
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	d07f      	beq.n	80079b2 <_dtoa_r+0x20a>
 80078b2:	ee18 3a90 	vmov	r3, s17
 80078b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80078be:	ec51 0b18 	vmov	r0, r1, d8
 80078c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80078ce:	4619      	mov	r1, r3
 80078d0:	2200      	movs	r2, #0
 80078d2:	4b75      	ldr	r3, [pc, #468]	; (8007aa8 <_dtoa_r+0x300>)
 80078d4:	f7f8 fcd8 	bl	8000288 <__aeabi_dsub>
 80078d8:	a367      	add	r3, pc, #412	; (adr r3, 8007a78 <_dtoa_r+0x2d0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fe8b 	bl	80005f8 <__aeabi_dmul>
 80078e2:	a367      	add	r3, pc, #412	; (adr r3, 8007a80 <_dtoa_r+0x2d8>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	4606      	mov	r6, r0
 80078ee:	4628      	mov	r0, r5
 80078f0:	460f      	mov	r7, r1
 80078f2:	f7f8 fe17 	bl	8000524 <__aeabi_i2d>
 80078f6:	a364      	add	r3, pc, #400	; (adr r3, 8007a88 <_dtoa_r+0x2e0>)
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f8 fe7c 	bl	80005f8 <__aeabi_dmul>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f8 fcc0 	bl	800028c <__adddf3>
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	f7f9 f922 	bl	8000b58 <__aeabi_d2iz>
 8007914:	2200      	movs	r2, #0
 8007916:	4683      	mov	fp, r0
 8007918:	2300      	movs	r3, #0
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f9 f8dd 	bl	8000adc <__aeabi_dcmplt>
 8007922:	b148      	cbz	r0, 8007938 <_dtoa_r+0x190>
 8007924:	4658      	mov	r0, fp
 8007926:	f7f8 fdfd 	bl	8000524 <__aeabi_i2d>
 800792a:	4632      	mov	r2, r6
 800792c:	463b      	mov	r3, r7
 800792e:	f7f9 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007932:	b908      	cbnz	r0, 8007938 <_dtoa_r+0x190>
 8007934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007938:	f1bb 0f16 	cmp.w	fp, #22
 800793c:	d857      	bhi.n	80079ee <_dtoa_r+0x246>
 800793e:	4b5b      	ldr	r3, [pc, #364]	; (8007aac <_dtoa_r+0x304>)
 8007940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	ec51 0b18 	vmov	r0, r1, d8
 800794c:	f7f9 f8c6 	bl	8000adc <__aeabi_dcmplt>
 8007950:	2800      	cmp	r0, #0
 8007952:	d04e      	beq.n	80079f2 <_dtoa_r+0x24a>
 8007954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007958:	2300      	movs	r3, #0
 800795a:	930c      	str	r3, [sp, #48]	; 0x30
 800795c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800795e:	1b5b      	subs	r3, r3, r5
 8007960:	1e5a      	subs	r2, r3, #1
 8007962:	bf45      	ittet	mi
 8007964:	f1c3 0301 	rsbmi	r3, r3, #1
 8007968:	9305      	strmi	r3, [sp, #20]
 800796a:	2300      	movpl	r3, #0
 800796c:	2300      	movmi	r3, #0
 800796e:	9206      	str	r2, [sp, #24]
 8007970:	bf54      	ite	pl
 8007972:	9305      	strpl	r3, [sp, #20]
 8007974:	9306      	strmi	r3, [sp, #24]
 8007976:	f1bb 0f00 	cmp.w	fp, #0
 800797a:	db3c      	blt.n	80079f6 <_dtoa_r+0x24e>
 800797c:	9b06      	ldr	r3, [sp, #24]
 800797e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007982:	445b      	add	r3, fp
 8007984:	9306      	str	r3, [sp, #24]
 8007986:	2300      	movs	r3, #0
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	2b09      	cmp	r3, #9
 800798e:	d868      	bhi.n	8007a62 <_dtoa_r+0x2ba>
 8007990:	2b05      	cmp	r3, #5
 8007992:	bfc4      	itt	gt
 8007994:	3b04      	subgt	r3, #4
 8007996:	9307      	strgt	r3, [sp, #28]
 8007998:	9b07      	ldr	r3, [sp, #28]
 800799a:	f1a3 0302 	sub.w	r3, r3, #2
 800799e:	bfcc      	ite	gt
 80079a0:	2500      	movgt	r5, #0
 80079a2:	2501      	movle	r5, #1
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	f200 8085 	bhi.w	8007ab4 <_dtoa_r+0x30c>
 80079aa:	e8df f003 	tbb	[pc, r3]
 80079ae:	3b2e      	.short	0x3b2e
 80079b0:	5839      	.short	0x5839
 80079b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079b6:	441d      	add	r5, r3
 80079b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079bc:	2b20      	cmp	r3, #32
 80079be:	bfc1      	itttt	gt
 80079c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80079c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80079cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079d0:	bfd6      	itet	le
 80079d2:	f1c3 0320 	rsble	r3, r3, #32
 80079d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80079da:	fa06 f003 	lslle.w	r0, r6, r3
 80079de:	f7f8 fd91 	bl	8000504 <__aeabi_ui2d>
 80079e2:	2201      	movs	r2, #1
 80079e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80079e8:	3d01      	subs	r5, #1
 80079ea:	920e      	str	r2, [sp, #56]	; 0x38
 80079ec:	e76f      	b.n	80078ce <_dtoa_r+0x126>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7b3      	b.n	800795a <_dtoa_r+0x1b2>
 80079f2:	900c      	str	r0, [sp, #48]	; 0x30
 80079f4:	e7b2      	b.n	800795c <_dtoa_r+0x1b4>
 80079f6:	9b05      	ldr	r3, [sp, #20]
 80079f8:	eba3 030b 	sub.w	r3, r3, fp
 80079fc:	9305      	str	r3, [sp, #20]
 80079fe:	f1cb 0300 	rsb	r3, fp, #0
 8007a02:	9308      	str	r3, [sp, #32]
 8007a04:	2300      	movs	r3, #0
 8007a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a08:	e7bf      	b.n	800798a <_dtoa_r+0x1e2>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dc52      	bgt.n	8007aba <_dtoa_r+0x312>
 8007a14:	2301      	movs	r3, #1
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a1e:	e00b      	b.n	8007a38 <_dtoa_r+0x290>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e7f3      	b.n	8007a0c <_dtoa_r+0x264>
 8007a24:	2300      	movs	r3, #0
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	445b      	add	r3, fp
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	bfb8      	it	lt
 8007a36:	2301      	movlt	r3, #1
 8007a38:	69e0      	ldr	r0, [r4, #28]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f102 0614 	add.w	r6, r2, #20
 8007a42:	429e      	cmp	r6, r3
 8007a44:	d93d      	bls.n	8007ac2 <_dtoa_r+0x31a>
 8007a46:	6041      	str	r1, [r0, #4]
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fd9f 	bl	800858c <_Balloc>
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d139      	bne.n	8007ac8 <_dtoa_r+0x320>
 8007a54:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <_dtoa_r+0x308>)
 8007a56:	4602      	mov	r2, r0
 8007a58:	f240 11af 	movw	r1, #431	; 0x1af
 8007a5c:	e6bd      	b.n	80077da <_dtoa_r+0x32>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7e1      	b.n	8007a26 <_dtoa_r+0x27e>
 8007a62:	2501      	movs	r5, #1
 8007a64:	2300      	movs	r3, #0
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	9509      	str	r5, [sp, #36]	; 0x24
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	2312      	movs	r3, #18
 8007a76:	e7d1      	b.n	8007a1c <_dtoa_r+0x274>
 8007a78:	636f4361 	.word	0x636f4361
 8007a7c:	3fd287a7 	.word	0x3fd287a7
 8007a80:	8b60c8b3 	.word	0x8b60c8b3
 8007a84:	3fc68a28 	.word	0x3fc68a28
 8007a88:	509f79fb 	.word	0x509f79fb
 8007a8c:	3fd34413 	.word	0x3fd34413
 8007a90:	0800a739 	.word	0x0800a739
 8007a94:	0800a750 	.word	0x0800a750
 8007a98:	7ff00000 	.word	0x7ff00000
 8007a9c:	0800a735 	.word	0x0800a735
 8007aa0:	0800a72c 	.word	0x0800a72c
 8007aa4:	0800a709 	.word	0x0800a709
 8007aa8:	3ff80000 	.word	0x3ff80000
 8007aac:	0800a840 	.word	0x0800a840
 8007ab0:	0800a7a8 	.word	0x0800a7a8
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab8:	e7d7      	b.n	8007a6a <_dtoa_r+0x2c2>
 8007aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	9304      	str	r3, [sp, #16]
 8007ac0:	e7ba      	b.n	8007a38 <_dtoa_r+0x290>
 8007ac2:	3101      	adds	r1, #1
 8007ac4:	0052      	lsls	r2, r2, #1
 8007ac6:	e7ba      	b.n	8007a3e <_dtoa_r+0x296>
 8007ac8:	69e3      	ldr	r3, [r4, #28]
 8007aca:	9a00      	ldr	r2, [sp, #0]
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	2b0e      	cmp	r3, #14
 8007ad2:	f200 80a8 	bhi.w	8007c26 <_dtoa_r+0x47e>
 8007ad6:	2d00      	cmp	r5, #0
 8007ad8:	f000 80a5 	beq.w	8007c26 <_dtoa_r+0x47e>
 8007adc:	f1bb 0f00 	cmp.w	fp, #0
 8007ae0:	dd38      	ble.n	8007b54 <_dtoa_r+0x3ac>
 8007ae2:	4bc0      	ldr	r3, [pc, #768]	; (8007de4 <_dtoa_r+0x63c>)
 8007ae4:	f00b 020f 	and.w	r2, fp, #15
 8007ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007af0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007af4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007af8:	d019      	beq.n	8007b2e <_dtoa_r+0x386>
 8007afa:	4bbb      	ldr	r3, [pc, #748]	; (8007de8 <_dtoa_r+0x640>)
 8007afc:	ec51 0b18 	vmov	r0, r1, d8
 8007b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b04:	f7f8 fea2 	bl	800084c <__aeabi_ddiv>
 8007b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b0c:	f008 080f 	and.w	r8, r8, #15
 8007b10:	2503      	movs	r5, #3
 8007b12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007de8 <_dtoa_r+0x640>
 8007b16:	f1b8 0f00 	cmp.w	r8, #0
 8007b1a:	d10a      	bne.n	8007b32 <_dtoa_r+0x38a>
 8007b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b20:	4632      	mov	r2, r6
 8007b22:	463b      	mov	r3, r7
 8007b24:	f7f8 fe92 	bl	800084c <__aeabi_ddiv>
 8007b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b2c:	e02b      	b.n	8007b86 <_dtoa_r+0x3de>
 8007b2e:	2502      	movs	r5, #2
 8007b30:	e7ef      	b.n	8007b12 <_dtoa_r+0x36a>
 8007b32:	f018 0f01 	tst.w	r8, #1
 8007b36:	d008      	beq.n	8007b4a <_dtoa_r+0x3a2>
 8007b38:	4630      	mov	r0, r6
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b40:	f7f8 fd5a 	bl	80005f8 <__aeabi_dmul>
 8007b44:	3501      	adds	r5, #1
 8007b46:	4606      	mov	r6, r0
 8007b48:	460f      	mov	r7, r1
 8007b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b4e:	f109 0908 	add.w	r9, r9, #8
 8007b52:	e7e0      	b.n	8007b16 <_dtoa_r+0x36e>
 8007b54:	f000 809f 	beq.w	8007c96 <_dtoa_r+0x4ee>
 8007b58:	f1cb 0600 	rsb	r6, fp, #0
 8007b5c:	4ba1      	ldr	r3, [pc, #644]	; (8007de4 <_dtoa_r+0x63c>)
 8007b5e:	4fa2      	ldr	r7, [pc, #648]	; (8007de8 <_dtoa_r+0x640>)
 8007b60:	f006 020f 	and.w	r2, r6, #15
 8007b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	ec51 0b18 	vmov	r0, r1, d8
 8007b70:	f7f8 fd42 	bl	80005f8 <__aeabi_dmul>
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	1136      	asrs	r6, r6, #4
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d17e      	bne.n	8007c80 <_dtoa_r+0x4d8>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d0      	bne.n	8007b28 <_dtoa_r+0x380>
 8007b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8084 	beq.w	8007c9a <_dtoa_r+0x4f2>
 8007b92:	4b96      	ldr	r3, [pc, #600]	; (8007dec <_dtoa_r+0x644>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	4640      	mov	r0, r8
 8007b98:	4649      	mov	r1, r9
 8007b9a:	f7f8 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d07b      	beq.n	8007c9a <_dtoa_r+0x4f2>
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d078      	beq.n	8007c9a <_dtoa_r+0x4f2>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd39      	ble.n	8007c22 <_dtoa_r+0x47a>
 8007bae:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_dtoa_r+0x648>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fd1f 	bl	80005f8 <__aeabi_dmul>
 8007bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bbe:	9e01      	ldr	r6, [sp, #4]
 8007bc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7f8 fcaa 	bl	8000524 <__aeabi_i2d>
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	4b86      	ldr	r3, [pc, #536]	; (8007df4 <_dtoa_r+0x64c>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f7f8 fb56 	bl	800028c <__adddf3>
 8007be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be8:	9303      	str	r3, [sp, #12]
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	d158      	bne.n	8007ca0 <_dtoa_r+0x4f8>
 8007bee:	4b82      	ldr	r3, [pc, #520]	; (8007df8 <_dtoa_r+0x650>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bfe:	4680      	mov	r8, r0
 8007c00:	4689      	mov	r9, r1
 8007c02:	f7f8 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f040 8296 	bne.w	8008138 <_dtoa_r+0x990>
 8007c0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c10:	4640      	mov	r0, r8
 8007c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c16:	4649      	mov	r1, r9
 8007c18:	f7f8 ff60 	bl	8000adc <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 8289 	bne.w	8008134 <_dtoa_r+0x98c>
 8007c22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f2c0 814e 	blt.w	8007eca <_dtoa_r+0x722>
 8007c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8007c32:	f300 814a 	bgt.w	8007eca <_dtoa_r+0x722>
 8007c36:	4b6b      	ldr	r3, [pc, #428]	; (8007de4 <_dtoa_r+0x63c>)
 8007c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f280 80dc 	bge.w	8007e00 <_dtoa_r+0x658>
 8007c48:	9b04      	ldr	r3, [sp, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f300 80d8 	bgt.w	8007e00 <_dtoa_r+0x658>
 8007c50:	f040 826f 	bne.w	8008132 <_dtoa_r+0x98a>
 8007c54:	4b68      	ldr	r3, [pc, #416]	; (8007df8 <_dtoa_r+0x650>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	f7f8 fccc 	bl	80005f8 <__aeabi_dmul>
 8007c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c64:	f7f8 ff4e 	bl	8000b04 <__aeabi_dcmpge>
 8007c68:	9e04      	ldr	r6, [sp, #16]
 8007c6a:	4637      	mov	r7, r6
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f040 8245 	bne.w	80080fc <_dtoa_r+0x954>
 8007c72:	9d00      	ldr	r5, [sp, #0]
 8007c74:	2331      	movs	r3, #49	; 0x31
 8007c76:	f805 3b01 	strb.w	r3, [r5], #1
 8007c7a:	f10b 0b01 	add.w	fp, fp, #1
 8007c7e:	e241      	b.n	8008104 <_dtoa_r+0x95c>
 8007c80:	07f2      	lsls	r2, r6, #31
 8007c82:	d505      	bpl.n	8007c90 <_dtoa_r+0x4e8>
 8007c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c88:	f7f8 fcb6 	bl	80005f8 <__aeabi_dmul>
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	2301      	movs	r3, #1
 8007c90:	1076      	asrs	r6, r6, #1
 8007c92:	3708      	adds	r7, #8
 8007c94:	e773      	b.n	8007b7e <_dtoa_r+0x3d6>
 8007c96:	2502      	movs	r5, #2
 8007c98:	e775      	b.n	8007b86 <_dtoa_r+0x3de>
 8007c9a:	9e04      	ldr	r6, [sp, #16]
 8007c9c:	465f      	mov	r7, fp
 8007c9e:	e792      	b.n	8007bc6 <_dtoa_r+0x41e>
 8007ca0:	9900      	ldr	r1, [sp, #0]
 8007ca2:	4b50      	ldr	r3, [pc, #320]	; (8007de4 <_dtoa_r+0x63c>)
 8007ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ca8:	4431      	add	r1, r6
 8007caa:	9102      	str	r1, [sp, #8]
 8007cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cae:	eeb0 9a47 	vmov.f32	s18, s14
 8007cb2:	eef0 9a67 	vmov.f32	s19, s15
 8007cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d044      	beq.n	8007d4c <_dtoa_r+0x5a4>
 8007cc2:	494e      	ldr	r1, [pc, #312]	; (8007dfc <_dtoa_r+0x654>)
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	f7f8 fdc1 	bl	800084c <__aeabi_ddiv>
 8007cca:	ec53 2b19 	vmov	r2, r3, d9
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	9d00      	ldr	r5, [sp, #0]
 8007cd4:	ec41 0b19 	vmov	d9, r0, r1
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7f8 ff3c 	bl	8000b58 <__aeabi_d2iz>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	f7f8 fc1f 	bl	8000524 <__aeabi_i2d>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 facb 	bl	8000288 <__aeabi_dsub>
 8007cf2:	3630      	adds	r6, #48	; 0x30
 8007cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cf8:	ec53 2b19 	vmov	r2, r3, d9
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	f7f8 feec 	bl	8000adc <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d164      	bne.n	8007dd2 <_dtoa_r+0x62a>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	4937      	ldr	r1, [pc, #220]	; (8007dec <_dtoa_r+0x644>)
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f7f8 faba 	bl	8000288 <__aeabi_dsub>
 8007d14:	ec53 2b19 	vmov	r2, r3, d9
 8007d18:	f7f8 fee0 	bl	8000adc <__aeabi_dcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f040 80b6 	bne.w	8007e8e <_dtoa_r+0x6e6>
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	429d      	cmp	r5, r3
 8007d26:	f43f af7c 	beq.w	8007c22 <_dtoa_r+0x47a>
 8007d2a:	4b31      	ldr	r3, [pc, #196]	; (8007df0 <_dtoa_r+0x648>)
 8007d2c:	ec51 0b19 	vmov	r0, r1, d9
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <_dtoa_r+0x648>)
 8007d38:	ec41 0b19 	vmov	d9, r0, r1
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fc59 	bl	80005f8 <__aeabi_dmul>
 8007d46:	4680      	mov	r8, r0
 8007d48:	4689      	mov	r9, r1
 8007d4a:	e7c5      	b.n	8007cd8 <_dtoa_r+0x530>
 8007d4c:	ec51 0b17 	vmov	r0, r1, d7
 8007d50:	f7f8 fc52 	bl	80005f8 <__aeabi_dmul>
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	9d00      	ldr	r5, [sp, #0]
 8007d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d5a:	ec41 0b19 	vmov	d9, r0, r1
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	f7f8 fef9 	bl	8000b58 <__aeabi_d2iz>
 8007d66:	4606      	mov	r6, r0
 8007d68:	f7f8 fbdc 	bl	8000524 <__aeabi_i2d>
 8007d6c:	3630      	adds	r6, #48	; 0x30
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	f7f8 fa87 	bl	8000288 <__aeabi_dsub>
 8007d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	429d      	cmp	r5, r3
 8007d82:	4680      	mov	r8, r0
 8007d84:	4689      	mov	r9, r1
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	d124      	bne.n	8007dd6 <_dtoa_r+0x62e>
 8007d8c:	4b1b      	ldr	r3, [pc, #108]	; (8007dfc <_dtoa_r+0x654>)
 8007d8e:	ec51 0b19 	vmov	r0, r1, d9
 8007d92:	f7f8 fa7b 	bl	800028c <__adddf3>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d173      	bne.n	8007e8e <_dtoa_r+0x6e6>
 8007da6:	ec53 2b19 	vmov	r2, r3, d9
 8007daa:	4914      	ldr	r1, [pc, #80]	; (8007dfc <_dtoa_r+0x654>)
 8007dac:	2000      	movs	r0, #0
 8007dae:	f7f8 fa6b 	bl	8000288 <__aeabi_dsub>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fe8f 	bl	8000adc <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f af2f 	beq.w	8007c22 <_dtoa_r+0x47a>
 8007dc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dc6:	1e6b      	subs	r3, r5, #1
 8007dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dce:	2b30      	cmp	r3, #48	; 0x30
 8007dd0:	d0f8      	beq.n	8007dc4 <_dtoa_r+0x61c>
 8007dd2:	46bb      	mov	fp, r7
 8007dd4:	e04a      	b.n	8007e6c <_dtoa_r+0x6c4>
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <_dtoa_r+0x648>)
 8007dd8:	f7f8 fc0e 	bl	80005f8 <__aeabi_dmul>
 8007ddc:	4680      	mov	r8, r0
 8007dde:	4689      	mov	r9, r1
 8007de0:	e7bd      	b.n	8007d5e <_dtoa_r+0x5b6>
 8007de2:	bf00      	nop
 8007de4:	0800a840 	.word	0x0800a840
 8007de8:	0800a818 	.word	0x0800a818
 8007dec:	3ff00000 	.word	0x3ff00000
 8007df0:	40240000 	.word	0x40240000
 8007df4:	401c0000 	.word	0x401c0000
 8007df8:	40140000 	.word	0x40140000
 8007dfc:	3fe00000 	.word	0x3fe00000
 8007e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e04:	9d00      	ldr	r5, [sp, #0]
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	f7f8 fd1d 	bl	800084c <__aeabi_ddiv>
 8007e12:	f7f8 fea1 	bl	8000b58 <__aeabi_d2iz>
 8007e16:	9001      	str	r0, [sp, #4]
 8007e18:	f7f8 fb84 	bl	8000524 <__aeabi_i2d>
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	f7f8 fbea 	bl	80005f8 <__aeabi_dmul>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4630      	mov	r0, r6
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 fa2c 	bl	8000288 <__aeabi_dsub>
 8007e30:	9e01      	ldr	r6, [sp, #4]
 8007e32:	9f04      	ldr	r7, [sp, #16]
 8007e34:	3630      	adds	r6, #48	; 0x30
 8007e36:	f805 6b01 	strb.w	r6, [r5], #1
 8007e3a:	9e00      	ldr	r6, [sp, #0]
 8007e3c:	1bae      	subs	r6, r5, r6
 8007e3e:	42b7      	cmp	r7, r6
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	d134      	bne.n	8007eb0 <_dtoa_r+0x708>
 8007e46:	f7f8 fa21 	bl	800028c <__adddf3>
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	f7f8 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8007e56:	b9c8      	cbnz	r0, 8007e8c <_dtoa_r+0x6e4>
 8007e58:	4642      	mov	r2, r8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e64:	b110      	cbz	r0, 8007e6c <_dtoa_r+0x6c4>
 8007e66:	9b01      	ldr	r3, [sp, #4]
 8007e68:	07db      	lsls	r3, r3, #31
 8007e6a:	d40f      	bmi.n	8007e8c <_dtoa_r+0x6e4>
 8007e6c:	4651      	mov	r1, sl
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fbcc 	bl	800860c <_Bfree>
 8007e74:	2300      	movs	r3, #0
 8007e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e78:	702b      	strb	r3, [r5, #0]
 8007e7a:	f10b 0301 	add.w	r3, fp, #1
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f43f ace2 	beq.w	800784c <_dtoa_r+0xa4>
 8007e88:	601d      	str	r5, [r3, #0]
 8007e8a:	e4df      	b.n	800784c <_dtoa_r+0xa4>
 8007e8c:	465f      	mov	r7, fp
 8007e8e:	462b      	mov	r3, r5
 8007e90:	461d      	mov	r5, r3
 8007e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e96:	2a39      	cmp	r2, #57	; 0x39
 8007e98:	d106      	bne.n	8007ea8 <_dtoa_r+0x700>
 8007e9a:	9a00      	ldr	r2, [sp, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d1f7      	bne.n	8007e90 <_dtoa_r+0x6e8>
 8007ea0:	9900      	ldr	r1, [sp, #0]
 8007ea2:	2230      	movs	r2, #48	; 0x30
 8007ea4:	3701      	adds	r7, #1
 8007ea6:	700a      	strb	r2, [r1, #0]
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	3201      	adds	r2, #1
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e790      	b.n	8007dd2 <_dtoa_r+0x62a>
 8007eb0:	4ba3      	ldr	r3, [pc, #652]	; (8008140 <_dtoa_r+0x998>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	f7f8 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d09e      	beq.n	8007e06 <_dtoa_r+0x65e>
 8007ec8:	e7d0      	b.n	8007e6c <_dtoa_r+0x6c4>
 8007eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	f000 80ca 	beq.w	8008066 <_dtoa_r+0x8be>
 8007ed2:	9a07      	ldr	r2, [sp, #28]
 8007ed4:	2a01      	cmp	r2, #1
 8007ed6:	f300 80ad 	bgt.w	8008034 <_dtoa_r+0x88c>
 8007eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	f000 80a5 	beq.w	800802c <_dtoa_r+0x884>
 8007ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ee6:	9e08      	ldr	r6, [sp, #32]
 8007ee8:	9d05      	ldr	r5, [sp, #20]
 8007eea:	9a05      	ldr	r2, [sp, #20]
 8007eec:	441a      	add	r2, r3
 8007eee:	9205      	str	r2, [sp, #20]
 8007ef0:	9a06      	ldr	r2, [sp, #24]
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	441a      	add	r2, r3
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	9206      	str	r2, [sp, #24]
 8007efa:	f000 fc3d 	bl	8008778 <__i2b>
 8007efe:	4607      	mov	r7, r0
 8007f00:	b165      	cbz	r5, 8007f1c <_dtoa_r+0x774>
 8007f02:	9b06      	ldr	r3, [sp, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd09      	ble.n	8007f1c <_dtoa_r+0x774>
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	bfa8      	it	ge
 8007f0e:	462b      	movge	r3, r5
 8007f10:	1ad2      	subs	r2, r2, r3
 8007f12:	9205      	str	r2, [sp, #20]
 8007f14:	9a06      	ldr	r2, [sp, #24]
 8007f16:	1aed      	subs	r5, r5, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	9306      	str	r3, [sp, #24]
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	b1f3      	cbz	r3, 8007f5e <_dtoa_r+0x7b6>
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 80a3 	beq.w	800806e <_dtoa_r+0x8c6>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	dd10      	ble.n	8007f4e <_dtoa_r+0x7a6>
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4632      	mov	r2, r6
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fce1 	bl	80088f8 <__pow5mult>
 8007f36:	4652      	mov	r2, sl
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 fc31 	bl	80087a4 <__multiply>
 8007f42:	4651      	mov	r1, sl
 8007f44:	4680      	mov	r8, r0
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 fb60 	bl	800860c <_Bfree>
 8007f4c:	46c2      	mov	sl, r8
 8007f4e:	9b08      	ldr	r3, [sp, #32]
 8007f50:	1b9a      	subs	r2, r3, r6
 8007f52:	d004      	beq.n	8007f5e <_dtoa_r+0x7b6>
 8007f54:	4651      	mov	r1, sl
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 fcce 	bl	80088f8 <__pow5mult>
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fc09 	bl	8008778 <__i2b>
 8007f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	f340 8081 	ble.w	8008072 <_dtoa_r+0x8ca>
 8007f70:	461a      	mov	r2, r3
 8007f72:	4601      	mov	r1, r0
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 fcbf 	bl	80088f8 <__pow5mult>
 8007f7a:	9b07      	ldr	r3, [sp, #28]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	4606      	mov	r6, r0
 8007f80:	dd7a      	ble.n	8008078 <_dtoa_r+0x8d0>
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	6933      	ldr	r3, [r6, #16]
 8007f88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f8c:	6918      	ldr	r0, [r3, #16]
 8007f8e:	f000 fba5 	bl	80086dc <__hi0bits>
 8007f92:	f1c0 0020 	rsb	r0, r0, #32
 8007f96:	9b06      	ldr	r3, [sp, #24]
 8007f98:	4418      	add	r0, r3
 8007f9a:	f010 001f 	ands.w	r0, r0, #31
 8007f9e:	f000 8094 	beq.w	80080ca <_dtoa_r+0x922>
 8007fa2:	f1c0 0320 	rsb	r3, r0, #32
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	f340 8085 	ble.w	80080b6 <_dtoa_r+0x90e>
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	f1c0 001c 	rsb	r0, r0, #28
 8007fb2:	4403      	add	r3, r0
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	4403      	add	r3, r0
 8007fba:	4405      	add	r5, r0
 8007fbc:	9306      	str	r3, [sp, #24]
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dd05      	ble.n	8007fd0 <_dtoa_r+0x828>
 8007fc4:	4651      	mov	r1, sl
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fcef 	bl	80089ac <__lshift>
 8007fce:	4682      	mov	sl, r0
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dd05      	ble.n	8007fe2 <_dtoa_r+0x83a>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fce6 	bl	80089ac <__lshift>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d072      	beq.n	80080ce <_dtoa_r+0x926>
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4650      	mov	r0, sl
 8007fec:	f000 fd4a 	bl	8008a84 <__mcmp>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	da6c      	bge.n	80080ce <_dtoa_r+0x926>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4651      	mov	r1, sl
 8007ff8:	220a      	movs	r2, #10
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 fb28 	bl	8008650 <__multadd>
 8008000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008002:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008006:	4682      	mov	sl, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 81b0 	beq.w	800836e <_dtoa_r+0xbc6>
 800800e:	2300      	movs	r3, #0
 8008010:	4639      	mov	r1, r7
 8008012:	220a      	movs	r2, #10
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fb1b 	bl	8008650 <__multadd>
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	4607      	mov	r7, r0
 8008020:	f300 8096 	bgt.w	8008150 <_dtoa_r+0x9a8>
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	2b02      	cmp	r3, #2
 8008028:	dc59      	bgt.n	80080de <_dtoa_r+0x936>
 800802a:	e091      	b.n	8008150 <_dtoa_r+0x9a8>
 800802c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800802e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008032:	e758      	b.n	8007ee6 <_dtoa_r+0x73e>
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	1e5e      	subs	r6, r3, #1
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	42b3      	cmp	r3, r6
 800803c:	bfbf      	itttt	lt
 800803e:	9b08      	ldrlt	r3, [sp, #32]
 8008040:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008042:	9608      	strlt	r6, [sp, #32]
 8008044:	1af3      	sublt	r3, r6, r3
 8008046:	bfb4      	ite	lt
 8008048:	18d2      	addlt	r2, r2, r3
 800804a:	1b9e      	subge	r6, r3, r6
 800804c:	9b04      	ldr	r3, [sp, #16]
 800804e:	bfbc      	itt	lt
 8008050:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008052:	2600      	movlt	r6, #0
 8008054:	2b00      	cmp	r3, #0
 8008056:	bfb7      	itett	lt
 8008058:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800805c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008060:	1a9d      	sublt	r5, r3, r2
 8008062:	2300      	movlt	r3, #0
 8008064:	e741      	b.n	8007eea <_dtoa_r+0x742>
 8008066:	9e08      	ldr	r6, [sp, #32]
 8008068:	9d05      	ldr	r5, [sp, #20]
 800806a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800806c:	e748      	b.n	8007f00 <_dtoa_r+0x758>
 800806e:	9a08      	ldr	r2, [sp, #32]
 8008070:	e770      	b.n	8007f54 <_dtoa_r+0x7ac>
 8008072:	9b07      	ldr	r3, [sp, #28]
 8008074:	2b01      	cmp	r3, #1
 8008076:	dc19      	bgt.n	80080ac <_dtoa_r+0x904>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	b9bb      	cbnz	r3, 80080ac <_dtoa_r+0x904>
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008082:	b99b      	cbnz	r3, 80080ac <_dtoa_r+0x904>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800808a:	0d1b      	lsrs	r3, r3, #20
 800808c:	051b      	lsls	r3, r3, #20
 800808e:	b183      	cbz	r3, 80080b2 <_dtoa_r+0x90a>
 8008090:	9b05      	ldr	r3, [sp, #20]
 8008092:	3301      	adds	r3, #1
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	9b06      	ldr	r3, [sp, #24]
 8008098:	3301      	adds	r3, #1
 800809a:	9306      	str	r3, [sp, #24]
 800809c:	f04f 0801 	mov.w	r8, #1
 80080a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f47f af6f 	bne.w	8007f86 <_dtoa_r+0x7de>
 80080a8:	2001      	movs	r0, #1
 80080aa:	e774      	b.n	8007f96 <_dtoa_r+0x7ee>
 80080ac:	f04f 0800 	mov.w	r8, #0
 80080b0:	e7f6      	b.n	80080a0 <_dtoa_r+0x8f8>
 80080b2:	4698      	mov	r8, r3
 80080b4:	e7f4      	b.n	80080a0 <_dtoa_r+0x8f8>
 80080b6:	d082      	beq.n	8007fbe <_dtoa_r+0x816>
 80080b8:	9a05      	ldr	r2, [sp, #20]
 80080ba:	331c      	adds	r3, #28
 80080bc:	441a      	add	r2, r3
 80080be:	9205      	str	r2, [sp, #20]
 80080c0:	9a06      	ldr	r2, [sp, #24]
 80080c2:	441a      	add	r2, r3
 80080c4:	441d      	add	r5, r3
 80080c6:	9206      	str	r2, [sp, #24]
 80080c8:	e779      	b.n	8007fbe <_dtoa_r+0x816>
 80080ca:	4603      	mov	r3, r0
 80080cc:	e7f4      	b.n	80080b8 <_dtoa_r+0x910>
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc37      	bgt.n	8008144 <_dtoa_r+0x99c>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	dd34      	ble.n	8008144 <_dtoa_r+0x99c>
 80080da:	9b04      	ldr	r3, [sp, #16]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	b963      	cbnz	r3, 80080fc <_dtoa_r+0x954>
 80080e2:	4631      	mov	r1, r6
 80080e4:	2205      	movs	r2, #5
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 fab2 	bl	8008650 <__multadd>
 80080ec:	4601      	mov	r1, r0
 80080ee:	4606      	mov	r6, r0
 80080f0:	4650      	mov	r0, sl
 80080f2:	f000 fcc7 	bl	8008a84 <__mcmp>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f73f adbb 	bgt.w	8007c72 <_dtoa_r+0x4ca>
 80080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fe:	9d00      	ldr	r5, [sp, #0]
 8008100:	ea6f 0b03 	mvn.w	fp, r3
 8008104:	f04f 0800 	mov.w	r8, #0
 8008108:	4631      	mov	r1, r6
 800810a:	4620      	mov	r0, r4
 800810c:	f000 fa7e 	bl	800860c <_Bfree>
 8008110:	2f00      	cmp	r7, #0
 8008112:	f43f aeab 	beq.w	8007e6c <_dtoa_r+0x6c4>
 8008116:	f1b8 0f00 	cmp.w	r8, #0
 800811a:	d005      	beq.n	8008128 <_dtoa_r+0x980>
 800811c:	45b8      	cmp	r8, r7
 800811e:	d003      	beq.n	8008128 <_dtoa_r+0x980>
 8008120:	4641      	mov	r1, r8
 8008122:	4620      	mov	r0, r4
 8008124:	f000 fa72 	bl	800860c <_Bfree>
 8008128:	4639      	mov	r1, r7
 800812a:	4620      	mov	r0, r4
 800812c:	f000 fa6e 	bl	800860c <_Bfree>
 8008130:	e69c      	b.n	8007e6c <_dtoa_r+0x6c4>
 8008132:	2600      	movs	r6, #0
 8008134:	4637      	mov	r7, r6
 8008136:	e7e1      	b.n	80080fc <_dtoa_r+0x954>
 8008138:	46bb      	mov	fp, r7
 800813a:	4637      	mov	r7, r6
 800813c:	e599      	b.n	8007c72 <_dtoa_r+0x4ca>
 800813e:	bf00      	nop
 8008140:	40240000 	.word	0x40240000
 8008144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 80c8 	beq.w	80082dc <_dtoa_r+0xb34>
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	2d00      	cmp	r5, #0
 8008152:	dd05      	ble.n	8008160 <_dtoa_r+0x9b8>
 8008154:	4639      	mov	r1, r7
 8008156:	462a      	mov	r2, r5
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fc27 	bl	80089ac <__lshift>
 800815e:	4607      	mov	r7, r0
 8008160:	f1b8 0f00 	cmp.w	r8, #0
 8008164:	d05b      	beq.n	800821e <_dtoa_r+0xa76>
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fa0f 	bl	800858c <_Balloc>
 800816e:	4605      	mov	r5, r0
 8008170:	b928      	cbnz	r0, 800817e <_dtoa_r+0x9d6>
 8008172:	4b83      	ldr	r3, [pc, #524]	; (8008380 <_dtoa_r+0xbd8>)
 8008174:	4602      	mov	r2, r0
 8008176:	f240 21ef 	movw	r1, #751	; 0x2ef
 800817a:	f7ff bb2e 	b.w	80077da <_dtoa_r+0x32>
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	f107 010c 	add.w	r1, r7, #12
 8008188:	300c      	adds	r0, #12
 800818a:	f001 f985 	bl	8009498 <memcpy>
 800818e:	2201      	movs	r2, #1
 8008190:	4629      	mov	r1, r5
 8008192:	4620      	mov	r0, r4
 8008194:	f000 fc0a 	bl	80089ac <__lshift>
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	3301      	adds	r3, #1
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a2:	4413      	add	r3, r2
 80081a4:	9308      	str	r3, [sp, #32]
 80081a6:	9b02      	ldr	r3, [sp, #8]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	46b8      	mov	r8, r7
 80081ae:	9306      	str	r3, [sp, #24]
 80081b0:	4607      	mov	r7, r0
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	4631      	mov	r1, r6
 80081b6:	3b01      	subs	r3, #1
 80081b8:	4650      	mov	r0, sl
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	f7ff fa69 	bl	8007692 <quorem>
 80081c0:	4641      	mov	r1, r8
 80081c2:	9002      	str	r0, [sp, #8]
 80081c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081c8:	4650      	mov	r0, sl
 80081ca:	f000 fc5b 	bl	8008a84 <__mcmp>
 80081ce:	463a      	mov	r2, r7
 80081d0:	9005      	str	r0, [sp, #20]
 80081d2:	4631      	mov	r1, r6
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fc71 	bl	8008abc <__mdiff>
 80081da:	68c2      	ldr	r2, [r0, #12]
 80081dc:	4605      	mov	r5, r0
 80081de:	bb02      	cbnz	r2, 8008222 <_dtoa_r+0xa7a>
 80081e0:	4601      	mov	r1, r0
 80081e2:	4650      	mov	r0, sl
 80081e4:	f000 fc4e 	bl	8008a84 <__mcmp>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4629      	mov	r1, r5
 80081ec:	4620      	mov	r0, r4
 80081ee:	9209      	str	r2, [sp, #36]	; 0x24
 80081f0:	f000 fa0c 	bl	800860c <_Bfree>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f8:	9d04      	ldr	r5, [sp, #16]
 80081fa:	ea43 0102 	orr.w	r1, r3, r2
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	4319      	orrs	r1, r3
 8008202:	d110      	bne.n	8008226 <_dtoa_r+0xa7e>
 8008204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008208:	d029      	beq.n	800825e <_dtoa_r+0xab6>
 800820a:	9b05      	ldr	r3, [sp, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd02      	ble.n	8008216 <_dtoa_r+0xa6e>
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	f883 9000 	strb.w	r9, [r3]
 800821c:	e774      	b.n	8008108 <_dtoa_r+0x960>
 800821e:	4638      	mov	r0, r7
 8008220:	e7ba      	b.n	8008198 <_dtoa_r+0x9f0>
 8008222:	2201      	movs	r2, #1
 8008224:	e7e1      	b.n	80081ea <_dtoa_r+0xa42>
 8008226:	9b05      	ldr	r3, [sp, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db04      	blt.n	8008236 <_dtoa_r+0xa8e>
 800822c:	9907      	ldr	r1, [sp, #28]
 800822e:	430b      	orrs	r3, r1
 8008230:	9906      	ldr	r1, [sp, #24]
 8008232:	430b      	orrs	r3, r1
 8008234:	d120      	bne.n	8008278 <_dtoa_r+0xad0>
 8008236:	2a00      	cmp	r2, #0
 8008238:	dded      	ble.n	8008216 <_dtoa_r+0xa6e>
 800823a:	4651      	mov	r1, sl
 800823c:	2201      	movs	r2, #1
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fbb4 	bl	80089ac <__lshift>
 8008244:	4631      	mov	r1, r6
 8008246:	4682      	mov	sl, r0
 8008248:	f000 fc1c 	bl	8008a84 <__mcmp>
 800824c:	2800      	cmp	r0, #0
 800824e:	dc03      	bgt.n	8008258 <_dtoa_r+0xab0>
 8008250:	d1e1      	bne.n	8008216 <_dtoa_r+0xa6e>
 8008252:	f019 0f01 	tst.w	r9, #1
 8008256:	d0de      	beq.n	8008216 <_dtoa_r+0xa6e>
 8008258:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800825c:	d1d8      	bne.n	8008210 <_dtoa_r+0xa68>
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	2339      	movs	r3, #57	; 0x39
 8008262:	7013      	strb	r3, [r2, #0]
 8008264:	462b      	mov	r3, r5
 8008266:	461d      	mov	r5, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800826e:	2a39      	cmp	r2, #57	; 0x39
 8008270:	d06c      	beq.n	800834c <_dtoa_r+0xba4>
 8008272:	3201      	adds	r2, #1
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e747      	b.n	8008108 <_dtoa_r+0x960>
 8008278:	2a00      	cmp	r2, #0
 800827a:	dd07      	ble.n	800828c <_dtoa_r+0xae4>
 800827c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008280:	d0ed      	beq.n	800825e <_dtoa_r+0xab6>
 8008282:	9a01      	ldr	r2, [sp, #4]
 8008284:	f109 0301 	add.w	r3, r9, #1
 8008288:	7013      	strb	r3, [r2, #0]
 800828a:	e73d      	b.n	8008108 <_dtoa_r+0x960>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	9a08      	ldr	r2, [sp, #32]
 8008290:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008294:	4293      	cmp	r3, r2
 8008296:	d043      	beq.n	8008320 <_dtoa_r+0xb78>
 8008298:	4651      	mov	r1, sl
 800829a:	2300      	movs	r3, #0
 800829c:	220a      	movs	r2, #10
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f9d6 	bl	8008650 <__multadd>
 80082a4:	45b8      	cmp	r8, r7
 80082a6:	4682      	mov	sl, r0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	f04f 020a 	mov.w	r2, #10
 80082b0:	4641      	mov	r1, r8
 80082b2:	4620      	mov	r0, r4
 80082b4:	d107      	bne.n	80082c6 <_dtoa_r+0xb1e>
 80082b6:	f000 f9cb 	bl	8008650 <__multadd>
 80082ba:	4680      	mov	r8, r0
 80082bc:	4607      	mov	r7, r0
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	e775      	b.n	80081b2 <_dtoa_r+0xa0a>
 80082c6:	f000 f9c3 	bl	8008650 <__multadd>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4680      	mov	r8, r0
 80082ce:	2300      	movs	r3, #0
 80082d0:	220a      	movs	r2, #10
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 f9bc 	bl	8008650 <__multadd>
 80082d8:	4607      	mov	r7, r0
 80082da:	e7f0      	b.n	80082be <_dtoa_r+0xb16>
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	9d00      	ldr	r5, [sp, #0]
 80082e2:	4631      	mov	r1, r6
 80082e4:	4650      	mov	r0, sl
 80082e6:	f7ff f9d4 	bl	8007692 <quorem>
 80082ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80082ee:	9b00      	ldr	r3, [sp, #0]
 80082f0:	f805 9b01 	strb.w	r9, [r5], #1
 80082f4:	1aea      	subs	r2, r5, r3
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	4293      	cmp	r3, r2
 80082fa:	dd07      	ble.n	800830c <_dtoa_r+0xb64>
 80082fc:	4651      	mov	r1, sl
 80082fe:	2300      	movs	r3, #0
 8008300:	220a      	movs	r2, #10
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f9a4 	bl	8008650 <__multadd>
 8008308:	4682      	mov	sl, r0
 800830a:	e7ea      	b.n	80082e2 <_dtoa_r+0xb3a>
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfc8      	it	gt
 8008312:	461d      	movgt	r5, r3
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	bfd8      	it	le
 8008318:	2501      	movle	r5, #1
 800831a:	441d      	add	r5, r3
 800831c:	f04f 0800 	mov.w	r8, #0
 8008320:	4651      	mov	r1, sl
 8008322:	2201      	movs	r2, #1
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fb41 	bl	80089ac <__lshift>
 800832a:	4631      	mov	r1, r6
 800832c:	4682      	mov	sl, r0
 800832e:	f000 fba9 	bl	8008a84 <__mcmp>
 8008332:	2800      	cmp	r0, #0
 8008334:	dc96      	bgt.n	8008264 <_dtoa_r+0xabc>
 8008336:	d102      	bne.n	800833e <_dtoa_r+0xb96>
 8008338:	f019 0f01 	tst.w	r9, #1
 800833c:	d192      	bne.n	8008264 <_dtoa_r+0xabc>
 800833e:	462b      	mov	r3, r5
 8008340:	461d      	mov	r5, r3
 8008342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008346:	2a30      	cmp	r2, #48	; 0x30
 8008348:	d0fa      	beq.n	8008340 <_dtoa_r+0xb98>
 800834a:	e6dd      	b.n	8008108 <_dtoa_r+0x960>
 800834c:	9a00      	ldr	r2, [sp, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d189      	bne.n	8008266 <_dtoa_r+0xabe>
 8008352:	f10b 0b01 	add.w	fp, fp, #1
 8008356:	2331      	movs	r3, #49	; 0x31
 8008358:	e796      	b.n	8008288 <_dtoa_r+0xae0>
 800835a:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <_dtoa_r+0xbdc>)
 800835c:	f7ff ba99 	b.w	8007892 <_dtoa_r+0xea>
 8008360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008362:	2b00      	cmp	r3, #0
 8008364:	f47f aa6d 	bne.w	8007842 <_dtoa_r+0x9a>
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <_dtoa_r+0xbe0>)
 800836a:	f7ff ba92 	b.w	8007892 <_dtoa_r+0xea>
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	dcb5      	bgt.n	80082e0 <_dtoa_r+0xb38>
 8008374:	9b07      	ldr	r3, [sp, #28]
 8008376:	2b02      	cmp	r3, #2
 8008378:	f73f aeb1 	bgt.w	80080de <_dtoa_r+0x936>
 800837c:	e7b0      	b.n	80082e0 <_dtoa_r+0xb38>
 800837e:	bf00      	nop
 8008380:	0800a7a8 	.word	0x0800a7a8
 8008384:	0800a708 	.word	0x0800a708
 8008388:	0800a72c 	.word	0x0800a72c

0800838c <_free_r>:
 800838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838e:	2900      	cmp	r1, #0
 8008390:	d044      	beq.n	800841c <_free_r+0x90>
 8008392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008396:	9001      	str	r0, [sp, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f1a1 0404 	sub.w	r4, r1, #4
 800839e:	bfb8      	it	lt
 80083a0:	18e4      	addlt	r4, r4, r3
 80083a2:	f000 f8e7 	bl	8008574 <__malloc_lock>
 80083a6:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <_free_r+0x94>)
 80083a8:	9801      	ldr	r0, [sp, #4]
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	b933      	cbnz	r3, 80083bc <_free_r+0x30>
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6014      	str	r4, [r2, #0]
 80083b2:	b003      	add	sp, #12
 80083b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083b8:	f000 b8e2 	b.w	8008580 <__malloc_unlock>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d908      	bls.n	80083d2 <_free_r+0x46>
 80083c0:	6825      	ldr	r5, [r4, #0]
 80083c2:	1961      	adds	r1, r4, r5
 80083c4:	428b      	cmp	r3, r1
 80083c6:	bf01      	itttt	eq
 80083c8:	6819      	ldreq	r1, [r3, #0]
 80083ca:	685b      	ldreq	r3, [r3, #4]
 80083cc:	1949      	addeq	r1, r1, r5
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	e7ed      	b.n	80083ae <_free_r+0x22>
 80083d2:	461a      	mov	r2, r3
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b10b      	cbz	r3, 80083dc <_free_r+0x50>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d9fa      	bls.n	80083d2 <_free_r+0x46>
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	1855      	adds	r5, r2, r1
 80083e0:	42a5      	cmp	r5, r4
 80083e2:	d10b      	bne.n	80083fc <_free_r+0x70>
 80083e4:	6824      	ldr	r4, [r4, #0]
 80083e6:	4421      	add	r1, r4
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	42a3      	cmp	r3, r4
 80083ec:	6011      	str	r1, [r2, #0]
 80083ee:	d1e0      	bne.n	80083b2 <_free_r+0x26>
 80083f0:	681c      	ldr	r4, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	6053      	str	r3, [r2, #4]
 80083f6:	440c      	add	r4, r1
 80083f8:	6014      	str	r4, [r2, #0]
 80083fa:	e7da      	b.n	80083b2 <_free_r+0x26>
 80083fc:	d902      	bls.n	8008404 <_free_r+0x78>
 80083fe:	230c      	movs	r3, #12
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	e7d6      	b.n	80083b2 <_free_r+0x26>
 8008404:	6825      	ldr	r5, [r4, #0]
 8008406:	1961      	adds	r1, r4, r5
 8008408:	428b      	cmp	r3, r1
 800840a:	bf04      	itt	eq
 800840c:	6819      	ldreq	r1, [r3, #0]
 800840e:	685b      	ldreq	r3, [r3, #4]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	bf04      	itt	eq
 8008414:	1949      	addeq	r1, r1, r5
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	6054      	str	r4, [r2, #4]
 800841a:	e7ca      	b.n	80083b2 <_free_r+0x26>
 800841c:	b003      	add	sp, #12
 800841e:	bd30      	pop	{r4, r5, pc}
 8008420:	20000500 	.word	0x20000500

08008424 <malloc>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <malloc+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f000 b823 	b.w	8008474 <_malloc_r>
 800842e:	bf00      	nop
 8008430:	20000064 	.word	0x20000064

08008434 <sbrk_aligned>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4e0e      	ldr	r6, [pc, #56]	; (8008470 <sbrk_aligned+0x3c>)
 8008438:	460c      	mov	r4, r1
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	4605      	mov	r5, r0
 800843e:	b911      	cbnz	r1, 8008446 <sbrk_aligned+0x12>
 8008440:	f001 f81a 	bl	8009478 <_sbrk_r>
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f001 f815 	bl	8009478 <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d00a      	beq.n	8008468 <sbrk_aligned+0x34>
 8008452:	1cc4      	adds	r4, r0, #3
 8008454:	f024 0403 	bic.w	r4, r4, #3
 8008458:	42a0      	cmp	r0, r4
 800845a:	d007      	beq.n	800846c <sbrk_aligned+0x38>
 800845c:	1a21      	subs	r1, r4, r0
 800845e:	4628      	mov	r0, r5
 8008460:	f001 f80a 	bl	8009478 <_sbrk_r>
 8008464:	3001      	adds	r0, #1
 8008466:	d101      	bne.n	800846c <sbrk_aligned+0x38>
 8008468:	f04f 34ff 	mov.w	r4, #4294967295
 800846c:	4620      	mov	r0, r4
 800846e:	bd70      	pop	{r4, r5, r6, pc}
 8008470:	20000504 	.word	0x20000504

08008474 <_malloc_r>:
 8008474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008478:	1ccd      	adds	r5, r1, #3
 800847a:	f025 0503 	bic.w	r5, r5, #3
 800847e:	3508      	adds	r5, #8
 8008480:	2d0c      	cmp	r5, #12
 8008482:	bf38      	it	cc
 8008484:	250c      	movcc	r5, #12
 8008486:	2d00      	cmp	r5, #0
 8008488:	4607      	mov	r7, r0
 800848a:	db01      	blt.n	8008490 <_malloc_r+0x1c>
 800848c:	42a9      	cmp	r1, r5
 800848e:	d905      	bls.n	800849c <_malloc_r+0x28>
 8008490:	230c      	movs	r3, #12
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	2600      	movs	r6, #0
 8008496:	4630      	mov	r0, r6
 8008498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008570 <_malloc_r+0xfc>
 80084a0:	f000 f868 	bl	8008574 <__malloc_lock>
 80084a4:	f8d8 3000 	ldr.w	r3, [r8]
 80084a8:	461c      	mov	r4, r3
 80084aa:	bb5c      	cbnz	r4, 8008504 <_malloc_r+0x90>
 80084ac:	4629      	mov	r1, r5
 80084ae:	4638      	mov	r0, r7
 80084b0:	f7ff ffc0 	bl	8008434 <sbrk_aligned>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	4604      	mov	r4, r0
 80084b8:	d155      	bne.n	8008566 <_malloc_r+0xf2>
 80084ba:	f8d8 4000 	ldr.w	r4, [r8]
 80084be:	4626      	mov	r6, r4
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	d145      	bne.n	8008550 <_malloc_r+0xdc>
 80084c4:	2c00      	cmp	r4, #0
 80084c6:	d048      	beq.n	800855a <_malloc_r+0xe6>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	4631      	mov	r1, r6
 80084cc:	4638      	mov	r0, r7
 80084ce:	eb04 0903 	add.w	r9, r4, r3
 80084d2:	f000 ffd1 	bl	8009478 <_sbrk_r>
 80084d6:	4581      	cmp	r9, r0
 80084d8:	d13f      	bne.n	800855a <_malloc_r+0xe6>
 80084da:	6821      	ldr	r1, [r4, #0]
 80084dc:	1a6d      	subs	r5, r5, r1
 80084de:	4629      	mov	r1, r5
 80084e0:	4638      	mov	r0, r7
 80084e2:	f7ff ffa7 	bl	8008434 <sbrk_aligned>
 80084e6:	3001      	adds	r0, #1
 80084e8:	d037      	beq.n	800855a <_malloc_r+0xe6>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	442b      	add	r3, r5
 80084ee:	6023      	str	r3, [r4, #0]
 80084f0:	f8d8 3000 	ldr.w	r3, [r8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d038      	beq.n	800856a <_malloc_r+0xf6>
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	42a2      	cmp	r2, r4
 80084fc:	d12b      	bne.n	8008556 <_malloc_r+0xe2>
 80084fe:	2200      	movs	r2, #0
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	e00f      	b.n	8008524 <_malloc_r+0xb0>
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	1b52      	subs	r2, r2, r5
 8008508:	d41f      	bmi.n	800854a <_malloc_r+0xd6>
 800850a:	2a0b      	cmp	r2, #11
 800850c:	d917      	bls.n	800853e <_malloc_r+0xca>
 800850e:	1961      	adds	r1, r4, r5
 8008510:	42a3      	cmp	r3, r4
 8008512:	6025      	str	r5, [r4, #0]
 8008514:	bf18      	it	ne
 8008516:	6059      	strne	r1, [r3, #4]
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	bf08      	it	eq
 800851c:	f8c8 1000 	streq.w	r1, [r8]
 8008520:	5162      	str	r2, [r4, r5]
 8008522:	604b      	str	r3, [r1, #4]
 8008524:	4638      	mov	r0, r7
 8008526:	f104 060b 	add.w	r6, r4, #11
 800852a:	f000 f829 	bl	8008580 <__malloc_unlock>
 800852e:	f026 0607 	bic.w	r6, r6, #7
 8008532:	1d23      	adds	r3, r4, #4
 8008534:	1af2      	subs	r2, r6, r3
 8008536:	d0ae      	beq.n	8008496 <_malloc_r+0x22>
 8008538:	1b9b      	subs	r3, r3, r6
 800853a:	50a3      	str	r3, [r4, r2]
 800853c:	e7ab      	b.n	8008496 <_malloc_r+0x22>
 800853e:	42a3      	cmp	r3, r4
 8008540:	6862      	ldr	r2, [r4, #4]
 8008542:	d1dd      	bne.n	8008500 <_malloc_r+0x8c>
 8008544:	f8c8 2000 	str.w	r2, [r8]
 8008548:	e7ec      	b.n	8008524 <_malloc_r+0xb0>
 800854a:	4623      	mov	r3, r4
 800854c:	6864      	ldr	r4, [r4, #4]
 800854e:	e7ac      	b.n	80084aa <_malloc_r+0x36>
 8008550:	4634      	mov	r4, r6
 8008552:	6876      	ldr	r6, [r6, #4]
 8008554:	e7b4      	b.n	80084c0 <_malloc_r+0x4c>
 8008556:	4613      	mov	r3, r2
 8008558:	e7cc      	b.n	80084f4 <_malloc_r+0x80>
 800855a:	230c      	movs	r3, #12
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	4638      	mov	r0, r7
 8008560:	f000 f80e 	bl	8008580 <__malloc_unlock>
 8008564:	e797      	b.n	8008496 <_malloc_r+0x22>
 8008566:	6025      	str	r5, [r4, #0]
 8008568:	e7dc      	b.n	8008524 <_malloc_r+0xb0>
 800856a:	605b      	str	r3, [r3, #4]
 800856c:	deff      	udf	#255	; 0xff
 800856e:	bf00      	nop
 8008570:	20000500 	.word	0x20000500

08008574 <__malloc_lock>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__malloc_lock+0x8>)
 8008576:	f7ff b88a 	b.w	800768e <__retarget_lock_acquire_recursive>
 800857a:	bf00      	nop
 800857c:	200004fc 	.word	0x200004fc

08008580 <__malloc_unlock>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__malloc_unlock+0x8>)
 8008582:	f7ff b885 	b.w	8007690 <__retarget_lock_release_recursive>
 8008586:	bf00      	nop
 8008588:	200004fc 	.word	0x200004fc

0800858c <_Balloc>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	69c6      	ldr	r6, [r0, #28]
 8008590:	4604      	mov	r4, r0
 8008592:	460d      	mov	r5, r1
 8008594:	b976      	cbnz	r6, 80085b4 <_Balloc+0x28>
 8008596:	2010      	movs	r0, #16
 8008598:	f7ff ff44 	bl	8008424 <malloc>
 800859c:	4602      	mov	r2, r0
 800859e:	61e0      	str	r0, [r4, #28]
 80085a0:	b920      	cbnz	r0, 80085ac <_Balloc+0x20>
 80085a2:	4b18      	ldr	r3, [pc, #96]	; (8008604 <_Balloc+0x78>)
 80085a4:	4818      	ldr	r0, [pc, #96]	; (8008608 <_Balloc+0x7c>)
 80085a6:	216b      	movs	r1, #107	; 0x6b
 80085a8:	f000 ff84 	bl	80094b4 <__assert_func>
 80085ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b0:	6006      	str	r6, [r0, #0]
 80085b2:	60c6      	str	r6, [r0, #12]
 80085b4:	69e6      	ldr	r6, [r4, #28]
 80085b6:	68f3      	ldr	r3, [r6, #12]
 80085b8:	b183      	cbz	r3, 80085dc <_Balloc+0x50>
 80085ba:	69e3      	ldr	r3, [r4, #28]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085c2:	b9b8      	cbnz	r0, 80085f4 <_Balloc+0x68>
 80085c4:	2101      	movs	r1, #1
 80085c6:	fa01 f605 	lsl.w	r6, r1, r5
 80085ca:	1d72      	adds	r2, r6, #5
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 ff8e 	bl	80094f0 <_calloc_r>
 80085d4:	b160      	cbz	r0, 80085f0 <_Balloc+0x64>
 80085d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085da:	e00e      	b.n	80085fa <_Balloc+0x6e>
 80085dc:	2221      	movs	r2, #33	; 0x21
 80085de:	2104      	movs	r1, #4
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 ff85 	bl	80094f0 <_calloc_r>
 80085e6:	69e3      	ldr	r3, [r4, #28]
 80085e8:	60f0      	str	r0, [r6, #12]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <_Balloc+0x2e>
 80085f0:	2000      	movs	r0, #0
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	6802      	ldr	r2, [r0, #0]
 80085f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085fa:	2300      	movs	r3, #0
 80085fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008600:	e7f7      	b.n	80085f2 <_Balloc+0x66>
 8008602:	bf00      	nop
 8008604:	0800a739 	.word	0x0800a739
 8008608:	0800a7b9 	.word	0x0800a7b9

0800860c <_Bfree>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	69c6      	ldr	r6, [r0, #28]
 8008610:	4605      	mov	r5, r0
 8008612:	460c      	mov	r4, r1
 8008614:	b976      	cbnz	r6, 8008634 <_Bfree+0x28>
 8008616:	2010      	movs	r0, #16
 8008618:	f7ff ff04 	bl	8008424 <malloc>
 800861c:	4602      	mov	r2, r0
 800861e:	61e8      	str	r0, [r5, #28]
 8008620:	b920      	cbnz	r0, 800862c <_Bfree+0x20>
 8008622:	4b09      	ldr	r3, [pc, #36]	; (8008648 <_Bfree+0x3c>)
 8008624:	4809      	ldr	r0, [pc, #36]	; (800864c <_Bfree+0x40>)
 8008626:	218f      	movs	r1, #143	; 0x8f
 8008628:	f000 ff44 	bl	80094b4 <__assert_func>
 800862c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008630:	6006      	str	r6, [r0, #0]
 8008632:	60c6      	str	r6, [r0, #12]
 8008634:	b13c      	cbz	r4, 8008646 <_Bfree+0x3a>
 8008636:	69eb      	ldr	r3, [r5, #28]
 8008638:	6862      	ldr	r2, [r4, #4]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008640:	6021      	str	r1, [r4, #0]
 8008642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	0800a739 	.word	0x0800a739
 800864c:	0800a7b9 	.word	0x0800a7b9

08008650 <__multadd>:
 8008650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	690d      	ldr	r5, [r1, #16]
 8008656:	4607      	mov	r7, r0
 8008658:	460c      	mov	r4, r1
 800865a:	461e      	mov	r6, r3
 800865c:	f101 0c14 	add.w	ip, r1, #20
 8008660:	2000      	movs	r0, #0
 8008662:	f8dc 3000 	ldr.w	r3, [ip]
 8008666:	b299      	uxth	r1, r3
 8008668:	fb02 6101 	mla	r1, r2, r1, r6
 800866c:	0c1e      	lsrs	r6, r3, #16
 800866e:	0c0b      	lsrs	r3, r1, #16
 8008670:	fb02 3306 	mla	r3, r2, r6, r3
 8008674:	b289      	uxth	r1, r1
 8008676:	3001      	adds	r0, #1
 8008678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800867c:	4285      	cmp	r5, r0
 800867e:	f84c 1b04 	str.w	r1, [ip], #4
 8008682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008686:	dcec      	bgt.n	8008662 <__multadd+0x12>
 8008688:	b30e      	cbz	r6, 80086ce <__multadd+0x7e>
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	42ab      	cmp	r3, r5
 800868e:	dc19      	bgt.n	80086c4 <__multadd+0x74>
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	4638      	mov	r0, r7
 8008694:	3101      	adds	r1, #1
 8008696:	f7ff ff79 	bl	800858c <_Balloc>
 800869a:	4680      	mov	r8, r0
 800869c:	b928      	cbnz	r0, 80086aa <__multadd+0x5a>
 800869e:	4602      	mov	r2, r0
 80086a0:	4b0c      	ldr	r3, [pc, #48]	; (80086d4 <__multadd+0x84>)
 80086a2:	480d      	ldr	r0, [pc, #52]	; (80086d8 <__multadd+0x88>)
 80086a4:	21ba      	movs	r1, #186	; 0xba
 80086a6:	f000 ff05 	bl	80094b4 <__assert_func>
 80086aa:	6922      	ldr	r2, [r4, #16]
 80086ac:	3202      	adds	r2, #2
 80086ae:	f104 010c 	add.w	r1, r4, #12
 80086b2:	0092      	lsls	r2, r2, #2
 80086b4:	300c      	adds	r0, #12
 80086b6:	f000 feef 	bl	8009498 <memcpy>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4638      	mov	r0, r7
 80086be:	f7ff ffa5 	bl	800860c <_Bfree>
 80086c2:	4644      	mov	r4, r8
 80086c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086c8:	3501      	adds	r5, #1
 80086ca:	615e      	str	r6, [r3, #20]
 80086cc:	6125      	str	r5, [r4, #16]
 80086ce:	4620      	mov	r0, r4
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	0800a7a8 	.word	0x0800a7a8
 80086d8:	0800a7b9 	.word	0x0800a7b9

080086dc <__hi0bits>:
 80086dc:	0c03      	lsrs	r3, r0, #16
 80086de:	041b      	lsls	r3, r3, #16
 80086e0:	b9d3      	cbnz	r3, 8008718 <__hi0bits+0x3c>
 80086e2:	0400      	lsls	r0, r0, #16
 80086e4:	2310      	movs	r3, #16
 80086e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086ea:	bf04      	itt	eq
 80086ec:	0200      	lsleq	r0, r0, #8
 80086ee:	3308      	addeq	r3, #8
 80086f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086f4:	bf04      	itt	eq
 80086f6:	0100      	lsleq	r0, r0, #4
 80086f8:	3304      	addeq	r3, #4
 80086fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086fe:	bf04      	itt	eq
 8008700:	0080      	lsleq	r0, r0, #2
 8008702:	3302      	addeq	r3, #2
 8008704:	2800      	cmp	r0, #0
 8008706:	db05      	blt.n	8008714 <__hi0bits+0x38>
 8008708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800870c:	f103 0301 	add.w	r3, r3, #1
 8008710:	bf08      	it	eq
 8008712:	2320      	moveq	r3, #32
 8008714:	4618      	mov	r0, r3
 8008716:	4770      	bx	lr
 8008718:	2300      	movs	r3, #0
 800871a:	e7e4      	b.n	80086e6 <__hi0bits+0xa>

0800871c <__lo0bits>:
 800871c:	6803      	ldr	r3, [r0, #0]
 800871e:	f013 0207 	ands.w	r2, r3, #7
 8008722:	d00c      	beq.n	800873e <__lo0bits+0x22>
 8008724:	07d9      	lsls	r1, r3, #31
 8008726:	d422      	bmi.n	800876e <__lo0bits+0x52>
 8008728:	079a      	lsls	r2, r3, #30
 800872a:	bf49      	itett	mi
 800872c:	085b      	lsrmi	r3, r3, #1
 800872e:	089b      	lsrpl	r3, r3, #2
 8008730:	6003      	strmi	r3, [r0, #0]
 8008732:	2201      	movmi	r2, #1
 8008734:	bf5c      	itt	pl
 8008736:	6003      	strpl	r3, [r0, #0]
 8008738:	2202      	movpl	r2, #2
 800873a:	4610      	mov	r0, r2
 800873c:	4770      	bx	lr
 800873e:	b299      	uxth	r1, r3
 8008740:	b909      	cbnz	r1, 8008746 <__lo0bits+0x2a>
 8008742:	0c1b      	lsrs	r3, r3, #16
 8008744:	2210      	movs	r2, #16
 8008746:	b2d9      	uxtb	r1, r3
 8008748:	b909      	cbnz	r1, 800874e <__lo0bits+0x32>
 800874a:	3208      	adds	r2, #8
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	0719      	lsls	r1, r3, #28
 8008750:	bf04      	itt	eq
 8008752:	091b      	lsreq	r3, r3, #4
 8008754:	3204      	addeq	r2, #4
 8008756:	0799      	lsls	r1, r3, #30
 8008758:	bf04      	itt	eq
 800875a:	089b      	lsreq	r3, r3, #2
 800875c:	3202      	addeq	r2, #2
 800875e:	07d9      	lsls	r1, r3, #31
 8008760:	d403      	bmi.n	800876a <__lo0bits+0x4e>
 8008762:	085b      	lsrs	r3, r3, #1
 8008764:	f102 0201 	add.w	r2, r2, #1
 8008768:	d003      	beq.n	8008772 <__lo0bits+0x56>
 800876a:	6003      	str	r3, [r0, #0]
 800876c:	e7e5      	b.n	800873a <__lo0bits+0x1e>
 800876e:	2200      	movs	r2, #0
 8008770:	e7e3      	b.n	800873a <__lo0bits+0x1e>
 8008772:	2220      	movs	r2, #32
 8008774:	e7e1      	b.n	800873a <__lo0bits+0x1e>
	...

08008778 <__i2b>:
 8008778:	b510      	push	{r4, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	2101      	movs	r1, #1
 800877e:	f7ff ff05 	bl	800858c <_Balloc>
 8008782:	4602      	mov	r2, r0
 8008784:	b928      	cbnz	r0, 8008792 <__i2b+0x1a>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <__i2b+0x24>)
 8008788:	4805      	ldr	r0, [pc, #20]	; (80087a0 <__i2b+0x28>)
 800878a:	f240 1145 	movw	r1, #325	; 0x145
 800878e:	f000 fe91 	bl	80094b4 <__assert_func>
 8008792:	2301      	movs	r3, #1
 8008794:	6144      	str	r4, [r0, #20]
 8008796:	6103      	str	r3, [r0, #16]
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	0800a7a8 	.word	0x0800a7a8
 80087a0:	0800a7b9 	.word	0x0800a7b9

080087a4 <__multiply>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4691      	mov	r9, r2
 80087aa:	690a      	ldr	r2, [r1, #16]
 80087ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bfb8      	it	lt
 80087b4:	460b      	movlt	r3, r1
 80087b6:	460c      	mov	r4, r1
 80087b8:	bfbc      	itt	lt
 80087ba:	464c      	movlt	r4, r9
 80087bc:	4699      	movlt	r9, r3
 80087be:	6927      	ldr	r7, [r4, #16]
 80087c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	6861      	ldr	r1, [r4, #4]
 80087c8:	eb07 060a 	add.w	r6, r7, sl
 80087cc:	42b3      	cmp	r3, r6
 80087ce:	b085      	sub	sp, #20
 80087d0:	bfb8      	it	lt
 80087d2:	3101      	addlt	r1, #1
 80087d4:	f7ff feda 	bl	800858c <_Balloc>
 80087d8:	b930      	cbnz	r0, 80087e8 <__multiply+0x44>
 80087da:	4602      	mov	r2, r0
 80087dc:	4b44      	ldr	r3, [pc, #272]	; (80088f0 <__multiply+0x14c>)
 80087de:	4845      	ldr	r0, [pc, #276]	; (80088f4 <__multiply+0x150>)
 80087e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80087e4:	f000 fe66 	bl	80094b4 <__assert_func>
 80087e8:	f100 0514 	add.w	r5, r0, #20
 80087ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087f0:	462b      	mov	r3, r5
 80087f2:	2200      	movs	r2, #0
 80087f4:	4543      	cmp	r3, r8
 80087f6:	d321      	bcc.n	800883c <__multiply+0x98>
 80087f8:	f104 0314 	add.w	r3, r4, #20
 80087fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008800:	f109 0314 	add.w	r3, r9, #20
 8008804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008808:	9202      	str	r2, [sp, #8]
 800880a:	1b3a      	subs	r2, r7, r4
 800880c:	3a15      	subs	r2, #21
 800880e:	f022 0203 	bic.w	r2, r2, #3
 8008812:	3204      	adds	r2, #4
 8008814:	f104 0115 	add.w	r1, r4, #21
 8008818:	428f      	cmp	r7, r1
 800881a:	bf38      	it	cc
 800881c:	2204      	movcc	r2, #4
 800881e:	9201      	str	r2, [sp, #4]
 8008820:	9a02      	ldr	r2, [sp, #8]
 8008822:	9303      	str	r3, [sp, #12]
 8008824:	429a      	cmp	r2, r3
 8008826:	d80c      	bhi.n	8008842 <__multiply+0x9e>
 8008828:	2e00      	cmp	r6, #0
 800882a:	dd03      	ble.n	8008834 <__multiply+0x90>
 800882c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008830:	2b00      	cmp	r3, #0
 8008832:	d05b      	beq.n	80088ec <__multiply+0x148>
 8008834:	6106      	str	r6, [r0, #16]
 8008836:	b005      	add	sp, #20
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	f843 2b04 	str.w	r2, [r3], #4
 8008840:	e7d8      	b.n	80087f4 <__multiply+0x50>
 8008842:	f8b3 a000 	ldrh.w	sl, [r3]
 8008846:	f1ba 0f00 	cmp.w	sl, #0
 800884a:	d024      	beq.n	8008896 <__multiply+0xf2>
 800884c:	f104 0e14 	add.w	lr, r4, #20
 8008850:	46a9      	mov	r9, r5
 8008852:	f04f 0c00 	mov.w	ip, #0
 8008856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800885a:	f8d9 1000 	ldr.w	r1, [r9]
 800885e:	fa1f fb82 	uxth.w	fp, r2
 8008862:	b289      	uxth	r1, r1
 8008864:	fb0a 110b 	mla	r1, sl, fp, r1
 8008868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800886c:	f8d9 2000 	ldr.w	r2, [r9]
 8008870:	4461      	add	r1, ip
 8008872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008876:	fb0a c20b 	mla	r2, sl, fp, ip
 800887a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800887e:	b289      	uxth	r1, r1
 8008880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008884:	4577      	cmp	r7, lr
 8008886:	f849 1b04 	str.w	r1, [r9], #4
 800888a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800888e:	d8e2      	bhi.n	8008856 <__multiply+0xb2>
 8008890:	9a01      	ldr	r2, [sp, #4]
 8008892:	f845 c002 	str.w	ip, [r5, r2]
 8008896:	9a03      	ldr	r2, [sp, #12]
 8008898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800889c:	3304      	adds	r3, #4
 800889e:	f1b9 0f00 	cmp.w	r9, #0
 80088a2:	d021      	beq.n	80088e8 <__multiply+0x144>
 80088a4:	6829      	ldr	r1, [r5, #0]
 80088a6:	f104 0c14 	add.w	ip, r4, #20
 80088aa:	46ae      	mov	lr, r5
 80088ac:	f04f 0a00 	mov.w	sl, #0
 80088b0:	f8bc b000 	ldrh.w	fp, [ip]
 80088b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80088b8:	fb09 220b 	mla	r2, r9, fp, r2
 80088bc:	4452      	add	r2, sl
 80088be:	b289      	uxth	r1, r1
 80088c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088c4:	f84e 1b04 	str.w	r1, [lr], #4
 80088c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80088cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088d0:	f8be 1000 	ldrh.w	r1, [lr]
 80088d4:	fb09 110a 	mla	r1, r9, sl, r1
 80088d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80088dc:	4567      	cmp	r7, ip
 80088de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088e2:	d8e5      	bhi.n	80088b0 <__multiply+0x10c>
 80088e4:	9a01      	ldr	r2, [sp, #4]
 80088e6:	50a9      	str	r1, [r5, r2]
 80088e8:	3504      	adds	r5, #4
 80088ea:	e799      	b.n	8008820 <__multiply+0x7c>
 80088ec:	3e01      	subs	r6, #1
 80088ee:	e79b      	b.n	8008828 <__multiply+0x84>
 80088f0:	0800a7a8 	.word	0x0800a7a8
 80088f4:	0800a7b9 	.word	0x0800a7b9

080088f8 <__pow5mult>:
 80088f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088fc:	4615      	mov	r5, r2
 80088fe:	f012 0203 	ands.w	r2, r2, #3
 8008902:	4606      	mov	r6, r0
 8008904:	460f      	mov	r7, r1
 8008906:	d007      	beq.n	8008918 <__pow5mult+0x20>
 8008908:	4c25      	ldr	r4, [pc, #148]	; (80089a0 <__pow5mult+0xa8>)
 800890a:	3a01      	subs	r2, #1
 800890c:	2300      	movs	r3, #0
 800890e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008912:	f7ff fe9d 	bl	8008650 <__multadd>
 8008916:	4607      	mov	r7, r0
 8008918:	10ad      	asrs	r5, r5, #2
 800891a:	d03d      	beq.n	8008998 <__pow5mult+0xa0>
 800891c:	69f4      	ldr	r4, [r6, #28]
 800891e:	b97c      	cbnz	r4, 8008940 <__pow5mult+0x48>
 8008920:	2010      	movs	r0, #16
 8008922:	f7ff fd7f 	bl	8008424 <malloc>
 8008926:	4602      	mov	r2, r0
 8008928:	61f0      	str	r0, [r6, #28]
 800892a:	b928      	cbnz	r0, 8008938 <__pow5mult+0x40>
 800892c:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <__pow5mult+0xac>)
 800892e:	481e      	ldr	r0, [pc, #120]	; (80089a8 <__pow5mult+0xb0>)
 8008930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008934:	f000 fdbe 	bl	80094b4 <__assert_func>
 8008938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800893c:	6004      	str	r4, [r0, #0]
 800893e:	60c4      	str	r4, [r0, #12]
 8008940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008948:	b94c      	cbnz	r4, 800895e <__pow5mult+0x66>
 800894a:	f240 2171 	movw	r1, #625	; 0x271
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff ff12 	bl	8008778 <__i2b>
 8008954:	2300      	movs	r3, #0
 8008956:	f8c8 0008 	str.w	r0, [r8, #8]
 800895a:	4604      	mov	r4, r0
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	f04f 0900 	mov.w	r9, #0
 8008962:	07eb      	lsls	r3, r5, #31
 8008964:	d50a      	bpl.n	800897c <__pow5mult+0x84>
 8008966:	4639      	mov	r1, r7
 8008968:	4622      	mov	r2, r4
 800896a:	4630      	mov	r0, r6
 800896c:	f7ff ff1a 	bl	80087a4 <__multiply>
 8008970:	4639      	mov	r1, r7
 8008972:	4680      	mov	r8, r0
 8008974:	4630      	mov	r0, r6
 8008976:	f7ff fe49 	bl	800860c <_Bfree>
 800897a:	4647      	mov	r7, r8
 800897c:	106d      	asrs	r5, r5, #1
 800897e:	d00b      	beq.n	8008998 <__pow5mult+0xa0>
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	b938      	cbnz	r0, 8008994 <__pow5mult+0x9c>
 8008984:	4622      	mov	r2, r4
 8008986:	4621      	mov	r1, r4
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff ff0b 	bl	80087a4 <__multiply>
 800898e:	6020      	str	r0, [r4, #0]
 8008990:	f8c0 9000 	str.w	r9, [r0]
 8008994:	4604      	mov	r4, r0
 8008996:	e7e4      	b.n	8008962 <__pow5mult+0x6a>
 8008998:	4638      	mov	r0, r7
 800899a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899e:	bf00      	nop
 80089a0:	0800a908 	.word	0x0800a908
 80089a4:	0800a739 	.word	0x0800a739
 80089a8:	0800a7b9 	.word	0x0800a7b9

080089ac <__lshift>:
 80089ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b0:	460c      	mov	r4, r1
 80089b2:	6849      	ldr	r1, [r1, #4]
 80089b4:	6923      	ldr	r3, [r4, #16]
 80089b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	4607      	mov	r7, r0
 80089be:	4691      	mov	r9, r2
 80089c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089c4:	f108 0601 	add.w	r6, r8, #1
 80089c8:	42b3      	cmp	r3, r6
 80089ca:	db0b      	blt.n	80089e4 <__lshift+0x38>
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7ff fddd 	bl	800858c <_Balloc>
 80089d2:	4605      	mov	r5, r0
 80089d4:	b948      	cbnz	r0, 80089ea <__lshift+0x3e>
 80089d6:	4602      	mov	r2, r0
 80089d8:	4b28      	ldr	r3, [pc, #160]	; (8008a7c <__lshift+0xd0>)
 80089da:	4829      	ldr	r0, [pc, #164]	; (8008a80 <__lshift+0xd4>)
 80089dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80089e0:	f000 fd68 	bl	80094b4 <__assert_func>
 80089e4:	3101      	adds	r1, #1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	e7ee      	b.n	80089c8 <__lshift+0x1c>
 80089ea:	2300      	movs	r3, #0
 80089ec:	f100 0114 	add.w	r1, r0, #20
 80089f0:	f100 0210 	add.w	r2, r0, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	4553      	cmp	r3, sl
 80089f8:	db33      	blt.n	8008a62 <__lshift+0xb6>
 80089fa:	6920      	ldr	r0, [r4, #16]
 80089fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a00:	f104 0314 	add.w	r3, r4, #20
 8008a04:	f019 091f 	ands.w	r9, r9, #31
 8008a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a10:	d02b      	beq.n	8008a6a <__lshift+0xbe>
 8008a12:	f1c9 0e20 	rsb	lr, r9, #32
 8008a16:	468a      	mov	sl, r1
 8008a18:	2200      	movs	r2, #0
 8008a1a:	6818      	ldr	r0, [r3, #0]
 8008a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a20:	4310      	orrs	r0, r2
 8008a22:	f84a 0b04 	str.w	r0, [sl], #4
 8008a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2a:	459c      	cmp	ip, r3
 8008a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a30:	d8f3      	bhi.n	8008a1a <__lshift+0x6e>
 8008a32:	ebac 0304 	sub.w	r3, ip, r4
 8008a36:	3b15      	subs	r3, #21
 8008a38:	f023 0303 	bic.w	r3, r3, #3
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	f104 0015 	add.w	r0, r4, #21
 8008a42:	4584      	cmp	ip, r0
 8008a44:	bf38      	it	cc
 8008a46:	2304      	movcc	r3, #4
 8008a48:	50ca      	str	r2, [r1, r3]
 8008a4a:	b10a      	cbz	r2, 8008a50 <__lshift+0xa4>
 8008a4c:	f108 0602 	add.w	r6, r8, #2
 8008a50:	3e01      	subs	r6, #1
 8008a52:	4638      	mov	r0, r7
 8008a54:	612e      	str	r6, [r5, #16]
 8008a56:	4621      	mov	r1, r4
 8008a58:	f7ff fdd8 	bl	800860c <_Bfree>
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a66:	3301      	adds	r3, #1
 8008a68:	e7c5      	b.n	80089f6 <__lshift+0x4a>
 8008a6a:	3904      	subs	r1, #4
 8008a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a74:	459c      	cmp	ip, r3
 8008a76:	d8f9      	bhi.n	8008a6c <__lshift+0xc0>
 8008a78:	e7ea      	b.n	8008a50 <__lshift+0xa4>
 8008a7a:	bf00      	nop
 8008a7c:	0800a7a8 	.word	0x0800a7a8
 8008a80:	0800a7b9 	.word	0x0800a7b9

08008a84 <__mcmp>:
 8008a84:	b530      	push	{r4, r5, lr}
 8008a86:	6902      	ldr	r2, [r0, #16]
 8008a88:	690c      	ldr	r4, [r1, #16]
 8008a8a:	1b12      	subs	r2, r2, r4
 8008a8c:	d10e      	bne.n	8008aac <__mcmp+0x28>
 8008a8e:	f100 0314 	add.w	r3, r0, #20
 8008a92:	3114      	adds	r1, #20
 8008a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d003      	beq.n	8008ab0 <__mcmp+0x2c>
 8008aa8:	d305      	bcc.n	8008ab6 <__mcmp+0x32>
 8008aaa:	2201      	movs	r2, #1
 8008aac:	4610      	mov	r0, r2
 8008aae:	bd30      	pop	{r4, r5, pc}
 8008ab0:	4283      	cmp	r3, r0
 8008ab2:	d3f3      	bcc.n	8008a9c <__mcmp+0x18>
 8008ab4:	e7fa      	b.n	8008aac <__mcmp+0x28>
 8008ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8008aba:	e7f7      	b.n	8008aac <__mcmp+0x28>

08008abc <__mdiff>:
 8008abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4690      	mov	r8, r2
 8008aca:	f7ff ffdb 	bl	8008a84 <__mcmp>
 8008ace:	1e05      	subs	r5, r0, #0
 8008ad0:	d110      	bne.n	8008af4 <__mdiff+0x38>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fd59 	bl	800858c <_Balloc>
 8008ada:	b930      	cbnz	r0, 8008aea <__mdiff+0x2e>
 8008adc:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <__mdiff+0x10c>)
 8008ade:	4602      	mov	r2, r0
 8008ae0:	f240 2137 	movw	r1, #567	; 0x237
 8008ae4:	4839      	ldr	r0, [pc, #228]	; (8008bcc <__mdiff+0x110>)
 8008ae6:	f000 fce5 	bl	80094b4 <__assert_func>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	bfa4      	itt	ge
 8008af6:	4643      	movge	r3, r8
 8008af8:	46a0      	movge	r8, r4
 8008afa:	4630      	mov	r0, r6
 8008afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b00:	bfa6      	itte	ge
 8008b02:	461c      	movge	r4, r3
 8008b04:	2500      	movge	r5, #0
 8008b06:	2501      	movlt	r5, #1
 8008b08:	f7ff fd40 	bl	800858c <_Balloc>
 8008b0c:	b920      	cbnz	r0, 8008b18 <__mdiff+0x5c>
 8008b0e:	4b2e      	ldr	r3, [pc, #184]	; (8008bc8 <__mdiff+0x10c>)
 8008b10:	4602      	mov	r2, r0
 8008b12:	f240 2145 	movw	r1, #581	; 0x245
 8008b16:	e7e5      	b.n	8008ae4 <__mdiff+0x28>
 8008b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b1c:	6926      	ldr	r6, [r4, #16]
 8008b1e:	60c5      	str	r5, [r0, #12]
 8008b20:	f104 0914 	add.w	r9, r4, #20
 8008b24:	f108 0514 	add.w	r5, r8, #20
 8008b28:	f100 0e14 	add.w	lr, r0, #20
 8008b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b34:	f108 0210 	add.w	r2, r8, #16
 8008b38:	46f2      	mov	sl, lr
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b44:	fa11 f88b 	uxtah	r8, r1, fp
 8008b48:	b299      	uxth	r1, r3
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	eba8 0801 	sub.w	r8, r8, r1
 8008b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b58:	fa1f f888 	uxth.w	r8, r8
 8008b5c:	1419      	asrs	r1, r3, #16
 8008b5e:	454e      	cmp	r6, r9
 8008b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b64:	f84a 3b04 	str.w	r3, [sl], #4
 8008b68:	d8e8      	bhi.n	8008b3c <__mdiff+0x80>
 8008b6a:	1b33      	subs	r3, r6, r4
 8008b6c:	3b15      	subs	r3, #21
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	3304      	adds	r3, #4
 8008b74:	3415      	adds	r4, #21
 8008b76:	42a6      	cmp	r6, r4
 8008b78:	bf38      	it	cc
 8008b7a:	2304      	movcc	r3, #4
 8008b7c:	441d      	add	r5, r3
 8008b7e:	4473      	add	r3, lr
 8008b80:	469e      	mov	lr, r3
 8008b82:	462e      	mov	r6, r5
 8008b84:	4566      	cmp	r6, ip
 8008b86:	d30e      	bcc.n	8008ba6 <__mdiff+0xea>
 8008b88:	f10c 0203 	add.w	r2, ip, #3
 8008b8c:	1b52      	subs	r2, r2, r5
 8008b8e:	f022 0203 	bic.w	r2, r2, #3
 8008b92:	3d03      	subs	r5, #3
 8008b94:	45ac      	cmp	ip, r5
 8008b96:	bf38      	it	cc
 8008b98:	2200      	movcc	r2, #0
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ba0:	b17a      	cbz	r2, 8008bc2 <__mdiff+0x106>
 8008ba2:	6107      	str	r7, [r0, #16]
 8008ba4:	e7a4      	b.n	8008af0 <__mdiff+0x34>
 8008ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8008baa:	fa11 f288 	uxtah	r2, r1, r8
 8008bae:	1414      	asrs	r4, r2, #16
 8008bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008bba:	f84e 2b04 	str.w	r2, [lr], #4
 8008bbe:	1421      	asrs	r1, r4, #16
 8008bc0:	e7e0      	b.n	8008b84 <__mdiff+0xc8>
 8008bc2:	3f01      	subs	r7, #1
 8008bc4:	e7ea      	b.n	8008b9c <__mdiff+0xe0>
 8008bc6:	bf00      	nop
 8008bc8:	0800a7a8 	.word	0x0800a7a8
 8008bcc:	0800a7b9 	.word	0x0800a7b9

08008bd0 <__d2b>:
 8008bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	ec59 8b10 	vmov	r8, r9, d0
 8008bdc:	4616      	mov	r6, r2
 8008bde:	f7ff fcd5 	bl	800858c <_Balloc>
 8008be2:	4604      	mov	r4, r0
 8008be4:	b930      	cbnz	r0, 8008bf4 <__d2b+0x24>
 8008be6:	4602      	mov	r2, r0
 8008be8:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <__d2b+0xac>)
 8008bea:	4825      	ldr	r0, [pc, #148]	; (8008c80 <__d2b+0xb0>)
 8008bec:	f240 310f 	movw	r1, #783	; 0x30f
 8008bf0:	f000 fc60 	bl	80094b4 <__assert_func>
 8008bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bfc:	bb2d      	cbnz	r5, 8008c4a <__d2b+0x7a>
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	f1b8 0300 	subs.w	r3, r8, #0
 8008c04:	d026      	beq.n	8008c54 <__d2b+0x84>
 8008c06:	4668      	mov	r0, sp
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	f7ff fd87 	bl	800871c <__lo0bits>
 8008c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c12:	b1e8      	cbz	r0, 8008c50 <__d2b+0x80>
 8008c14:	f1c0 0320 	rsb	r3, r0, #32
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	40c2      	lsrs	r2, r0
 8008c20:	6163      	str	r3, [r4, #20]
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	61a3      	str	r3, [r4, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bf14      	ite	ne
 8008c2c:	2202      	movne	r2, #2
 8008c2e:	2201      	moveq	r2, #1
 8008c30:	6122      	str	r2, [r4, #16]
 8008c32:	b1bd      	cbz	r5, 8008c64 <__d2b+0x94>
 8008c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c38:	4405      	add	r5, r0
 8008c3a:	603d      	str	r5, [r7, #0]
 8008c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c40:	6030      	str	r0, [r6, #0]
 8008c42:	4620      	mov	r0, r4
 8008c44:	b003      	add	sp, #12
 8008c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c4e:	e7d6      	b.n	8008bfe <__d2b+0x2e>
 8008c50:	6161      	str	r1, [r4, #20]
 8008c52:	e7e7      	b.n	8008c24 <__d2b+0x54>
 8008c54:	a801      	add	r0, sp, #4
 8008c56:	f7ff fd61 	bl	800871c <__lo0bits>
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	6163      	str	r3, [r4, #20]
 8008c5e:	3020      	adds	r0, #32
 8008c60:	2201      	movs	r2, #1
 8008c62:	e7e5      	b.n	8008c30 <__d2b+0x60>
 8008c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c6c:	6038      	str	r0, [r7, #0]
 8008c6e:	6918      	ldr	r0, [r3, #16]
 8008c70:	f7ff fd34 	bl	80086dc <__hi0bits>
 8008c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c78:	e7e2      	b.n	8008c40 <__d2b+0x70>
 8008c7a:	bf00      	nop
 8008c7c:	0800a7a8 	.word	0x0800a7a8
 8008c80:	0800a7b9 	.word	0x0800a7b9

08008c84 <__ssputs_r>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	688e      	ldr	r6, [r1, #8]
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	42be      	cmp	r6, r7
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4682      	mov	sl, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4690      	mov	r8, r2
 8008c96:	d82c      	bhi.n	8008cf2 <__ssputs_r+0x6e>
 8008c98:	898a      	ldrh	r2, [r1, #12]
 8008c9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c9e:	d026      	beq.n	8008cee <__ssputs_r+0x6a>
 8008ca0:	6965      	ldr	r5, [r4, #20]
 8008ca2:	6909      	ldr	r1, [r1, #16]
 8008ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca8:	eba3 0901 	sub.w	r9, r3, r1
 8008cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb0:	1c7b      	adds	r3, r7, #1
 8008cb2:	444b      	add	r3, r9
 8008cb4:	106d      	asrs	r5, r5, #1
 8008cb6:	429d      	cmp	r5, r3
 8008cb8:	bf38      	it	cc
 8008cba:	461d      	movcc	r5, r3
 8008cbc:	0553      	lsls	r3, r2, #21
 8008cbe:	d527      	bpl.n	8008d10 <__ssputs_r+0x8c>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7ff fbd7 	bl	8008474 <_malloc_r>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	b360      	cbz	r0, 8008d24 <__ssputs_r+0xa0>
 8008cca:	6921      	ldr	r1, [r4, #16]
 8008ccc:	464a      	mov	r2, r9
 8008cce:	f000 fbe3 	bl	8009498 <memcpy>
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	6126      	str	r6, [r4, #16]
 8008ce0:	6165      	str	r5, [r4, #20]
 8008ce2:	444e      	add	r6, r9
 8008ce4:	eba5 0509 	sub.w	r5, r5, r9
 8008ce8:	6026      	str	r6, [r4, #0]
 8008cea:	60a5      	str	r5, [r4, #8]
 8008cec:	463e      	mov	r6, r7
 8008cee:	42be      	cmp	r6, r7
 8008cf0:	d900      	bls.n	8008cf4 <__ssputs_r+0x70>
 8008cf2:	463e      	mov	r6, r7
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	f000 fba3 	bl	8009444 <memmove>
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	1b9b      	subs	r3, r3, r6
 8008d02:	60a3      	str	r3, [r4, #8]
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	4433      	add	r3, r6
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d10:	462a      	mov	r2, r5
 8008d12:	f000 fc15 	bl	8009540 <_realloc_r>
 8008d16:	4606      	mov	r6, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1e0      	bne.n	8008cde <__ssputs_r+0x5a>
 8008d1c:	6921      	ldr	r1, [r4, #16]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	f7ff fb34 	bl	800838c <_free_r>
 8008d24:	230c      	movs	r3, #12
 8008d26:	f8ca 3000 	str.w	r3, [sl]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	f04f 30ff 	mov.w	r0, #4294967295
 8008d36:	e7e9      	b.n	8008d0c <__ssputs_r+0x88>

08008d38 <_svfiprintf_r>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	4698      	mov	r8, r3
 8008d3e:	898b      	ldrh	r3, [r1, #12]
 8008d40:	061b      	lsls	r3, r3, #24
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4607      	mov	r7, r0
 8008d46:	460d      	mov	r5, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	d50e      	bpl.n	8008d6a <_svfiprintf_r+0x32>
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	b963      	cbnz	r3, 8008d6a <_svfiprintf_r+0x32>
 8008d50:	2140      	movs	r1, #64	; 0x40
 8008d52:	f7ff fb8f 	bl	8008474 <_malloc_r>
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6128      	str	r0, [r5, #16]
 8008d5a:	b920      	cbnz	r0, 8008d66 <_svfiprintf_r+0x2e>
 8008d5c:	230c      	movs	r3, #12
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e0d0      	b.n	8008f08 <_svfiprintf_r+0x1d0>
 8008d66:	2340      	movs	r3, #64	; 0x40
 8008d68:	616b      	str	r3, [r5, #20]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6e:	2320      	movs	r3, #32
 8008d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f20 <_svfiprintf_r+0x1e8>
 8008d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d82:	f04f 0901 	mov.w	r9, #1
 8008d86:	4623      	mov	r3, r4
 8008d88:	469a      	mov	sl, r3
 8008d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d8e:	b10a      	cbz	r2, 8008d94 <_svfiprintf_r+0x5c>
 8008d90:	2a25      	cmp	r2, #37	; 0x25
 8008d92:	d1f9      	bne.n	8008d88 <_svfiprintf_r+0x50>
 8008d94:	ebba 0b04 	subs.w	fp, sl, r4
 8008d98:	d00b      	beq.n	8008db2 <_svfiprintf_r+0x7a>
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff6f 	bl	8008c84 <__ssputs_r>
 8008da6:	3001      	adds	r0, #1
 8008da8:	f000 80a9 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dae:	445a      	add	r2, fp
 8008db0:	9209      	str	r2, [sp, #36]	; 0x24
 8008db2:	f89a 3000 	ldrb.w	r3, [sl]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80a1 	beq.w	8008efe <_svfiprintf_r+0x1c6>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dc6:	f10a 0a01 	add.w	sl, sl, #1
 8008dca:	9304      	str	r3, [sp, #16]
 8008dcc:	9307      	str	r3, [sp, #28]
 8008dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008dd4:	4654      	mov	r4, sl
 8008dd6:	2205      	movs	r2, #5
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	4850      	ldr	r0, [pc, #320]	; (8008f20 <_svfiprintf_r+0x1e8>)
 8008dde:	f7f7 f9f7 	bl	80001d0 <memchr>
 8008de2:	9a04      	ldr	r2, [sp, #16]
 8008de4:	b9d8      	cbnz	r0, 8008e1e <_svfiprintf_r+0xe6>
 8008de6:	06d0      	lsls	r0, r2, #27
 8008de8:	bf44      	itt	mi
 8008dea:	2320      	movmi	r3, #32
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df0:	0711      	lsls	r1, r2, #28
 8008df2:	bf44      	itt	mi
 8008df4:	232b      	movmi	r3, #43	; 0x2b
 8008df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008e00:	d015      	beq.n	8008e2e <_svfiprintf_r+0xf6>
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4654      	mov	r4, sl
 8008e06:	2000      	movs	r0, #0
 8008e08:	f04f 0c0a 	mov.w	ip, #10
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e12:	3b30      	subs	r3, #48	; 0x30
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d94d      	bls.n	8008eb4 <_svfiprintf_r+0x17c>
 8008e18:	b1b0      	cbz	r0, 8008e48 <_svfiprintf_r+0x110>
 8008e1a:	9207      	str	r2, [sp, #28]
 8008e1c:	e014      	b.n	8008e48 <_svfiprintf_r+0x110>
 8008e1e:	eba0 0308 	sub.w	r3, r0, r8
 8008e22:	fa09 f303 	lsl.w	r3, r9, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	46a2      	mov	sl, r4
 8008e2c:	e7d2      	b.n	8008dd4 <_svfiprintf_r+0x9c>
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	9103      	str	r1, [sp, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfbb      	ittet	lt
 8008e3a:	425b      	neglt	r3, r3
 8008e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e40:	9307      	strge	r3, [sp, #28]
 8008e42:	9307      	strlt	r3, [sp, #28]
 8008e44:	bfb8      	it	lt
 8008e46:	9204      	strlt	r2, [sp, #16]
 8008e48:	7823      	ldrb	r3, [r4, #0]
 8008e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8008e4c:	d10c      	bne.n	8008e68 <_svfiprintf_r+0x130>
 8008e4e:	7863      	ldrb	r3, [r4, #1]
 8008e50:	2b2a      	cmp	r3, #42	; 0x2a
 8008e52:	d134      	bne.n	8008ebe <_svfiprintf_r+0x186>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	1d1a      	adds	r2, r3, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	9203      	str	r2, [sp, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	bfb8      	it	lt
 8008e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e64:	3402      	adds	r4, #2
 8008e66:	9305      	str	r3, [sp, #20]
 8008e68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f30 <_svfiprintf_r+0x1f8>
 8008e6c:	7821      	ldrb	r1, [r4, #0]
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4650      	mov	r0, sl
 8008e72:	f7f7 f9ad 	bl	80001d0 <memchr>
 8008e76:	b138      	cbz	r0, 8008e88 <_svfiprintf_r+0x150>
 8008e78:	9b04      	ldr	r3, [sp, #16]
 8008e7a:	eba0 000a 	sub.w	r0, r0, sl
 8008e7e:	2240      	movs	r2, #64	; 0x40
 8008e80:	4082      	lsls	r2, r0
 8008e82:	4313      	orrs	r3, r2
 8008e84:	3401      	adds	r4, #1
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8c:	4825      	ldr	r0, [pc, #148]	; (8008f24 <_svfiprintf_r+0x1ec>)
 8008e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e92:	2206      	movs	r2, #6
 8008e94:	f7f7 f99c 	bl	80001d0 <memchr>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d038      	beq.n	8008f0e <_svfiprintf_r+0x1d6>
 8008e9c:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <_svfiprintf_r+0x1f0>)
 8008e9e:	bb1b      	cbnz	r3, 8008ee8 <_svfiprintf_r+0x1b0>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	9303      	str	r3, [sp, #12]
 8008eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eae:	4433      	add	r3, r6
 8008eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008eb2:	e768      	b.n	8008d86 <_svfiprintf_r+0x4e>
 8008eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb8:	460c      	mov	r4, r1
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7a6      	b.n	8008e0c <_svfiprintf_r+0xd4>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	3401      	adds	r4, #1
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	f04f 0c0a 	mov.w	ip, #10
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed0:	3a30      	subs	r2, #48	; 0x30
 8008ed2:	2a09      	cmp	r2, #9
 8008ed4:	d903      	bls.n	8008ede <_svfiprintf_r+0x1a6>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0c6      	beq.n	8008e68 <_svfiprintf_r+0x130>
 8008eda:	9105      	str	r1, [sp, #20]
 8008edc:	e7c4      	b.n	8008e68 <_svfiprintf_r+0x130>
 8008ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e7f0      	b.n	8008eca <_svfiprintf_r+0x192>
 8008ee8:	ab03      	add	r3, sp, #12
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	462a      	mov	r2, r5
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008ef0:	a904      	add	r1, sp, #16
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7fd fe50 	bl	8006b98 <_printf_float>
 8008ef8:	1c42      	adds	r2, r0, #1
 8008efa:	4606      	mov	r6, r0
 8008efc:	d1d6      	bne.n	8008eac <_svfiprintf_r+0x174>
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	065b      	lsls	r3, r3, #25
 8008f02:	f53f af2d 	bmi.w	8008d60 <_svfiprintf_r+0x28>
 8008f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f08:	b01d      	add	sp, #116	; 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	462a      	mov	r2, r5
 8008f14:	4b05      	ldr	r3, [pc, #20]	; (8008f2c <_svfiprintf_r+0x1f4>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7fe f8e1 	bl	80070e0 <_printf_i>
 8008f1e:	e7eb      	b.n	8008ef8 <_svfiprintf_r+0x1c0>
 8008f20:	0800a914 	.word	0x0800a914
 8008f24:	0800a91e 	.word	0x0800a91e
 8008f28:	08006b99 	.word	0x08006b99
 8008f2c:	08008c85 	.word	0x08008c85
 8008f30:	0800a91a 	.word	0x0800a91a

08008f34 <__sfputc_r>:
 8008f34:	6893      	ldr	r3, [r2, #8]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	b410      	push	{r4}
 8008f3c:	6093      	str	r3, [r2, #8]
 8008f3e:	da08      	bge.n	8008f52 <__sfputc_r+0x1e>
 8008f40:	6994      	ldr	r4, [r2, #24]
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	db01      	blt.n	8008f4a <__sfputc_r+0x16>
 8008f46:	290a      	cmp	r1, #10
 8008f48:	d103      	bne.n	8008f52 <__sfputc_r+0x1e>
 8008f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f4e:	f000 b9e3 	b.w	8009318 <__swbuf_r>
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	1c58      	adds	r0, r3, #1
 8008f56:	6010      	str	r0, [r2, #0]
 8008f58:	7019      	strb	r1, [r3, #0]
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <__sfputs_r>:
 8008f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	18d5      	adds	r5, r2, r3
 8008f6c:	42ac      	cmp	r4, r5
 8008f6e:	d101      	bne.n	8008f74 <__sfputs_r+0x12>
 8008f70:	2000      	movs	r0, #0
 8008f72:	e007      	b.n	8008f84 <__sfputs_r+0x22>
 8008f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f78:	463a      	mov	r2, r7
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ffda 	bl	8008f34 <__sfputc_r>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d1f3      	bne.n	8008f6c <__sfputs_r+0xa>
 8008f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f88 <_vfiprintf_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	b09d      	sub	sp, #116	; 0x74
 8008f90:	4614      	mov	r4, r2
 8008f92:	4698      	mov	r8, r3
 8008f94:	4606      	mov	r6, r0
 8008f96:	b118      	cbz	r0, 8008fa0 <_vfiprintf_r+0x18>
 8008f98:	6a03      	ldr	r3, [r0, #32]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <_vfiprintf_r+0x18>
 8008f9c:	f7fe fa4e 	bl	800743c <__sinit>
 8008fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa2:	07d9      	lsls	r1, r3, #31
 8008fa4:	d405      	bmi.n	8008fb2 <_vfiprintf_r+0x2a>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	059a      	lsls	r2, r3, #22
 8008faa:	d402      	bmi.n	8008fb2 <_vfiprintf_r+0x2a>
 8008fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fae:	f7fe fb6e 	bl	800768e <__retarget_lock_acquire_recursive>
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	071b      	lsls	r3, r3, #28
 8008fb6:	d501      	bpl.n	8008fbc <_vfiprintf_r+0x34>
 8008fb8:	692b      	ldr	r3, [r5, #16]
 8008fba:	b99b      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x5c>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f000 f9e8 	bl	8009394 <__swsetup_r>
 8008fc4:	b170      	cbz	r0, 8008fe4 <_vfiprintf_r+0x5c>
 8008fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc8:	07dc      	lsls	r4, r3, #31
 8008fca:	d504      	bpl.n	8008fd6 <_vfiprintf_r+0x4e>
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	b01d      	add	sp, #116	; 0x74
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	89ab      	ldrh	r3, [r5, #12]
 8008fd8:	0598      	lsls	r0, r3, #22
 8008fda:	d4f7      	bmi.n	8008fcc <_vfiprintf_r+0x44>
 8008fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fde:	f7fe fb57 	bl	8007690 <__retarget_lock_release_recursive>
 8008fe2:	e7f3      	b.n	8008fcc <_vfiprintf_r+0x44>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	2320      	movs	r3, #32
 8008fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff2:	2330      	movs	r3, #48	; 0x30
 8008ff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091a8 <_vfiprintf_r+0x220>
 8008ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ffc:	f04f 0901 	mov.w	r9, #1
 8009000:	4623      	mov	r3, r4
 8009002:	469a      	mov	sl, r3
 8009004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009008:	b10a      	cbz	r2, 800900e <_vfiprintf_r+0x86>
 800900a:	2a25      	cmp	r2, #37	; 0x25
 800900c:	d1f9      	bne.n	8009002 <_vfiprintf_r+0x7a>
 800900e:	ebba 0b04 	subs.w	fp, sl, r4
 8009012:	d00b      	beq.n	800902c <_vfiprintf_r+0xa4>
 8009014:	465b      	mov	r3, fp
 8009016:	4622      	mov	r2, r4
 8009018:	4629      	mov	r1, r5
 800901a:	4630      	mov	r0, r6
 800901c:	f7ff ffa1 	bl	8008f62 <__sfputs_r>
 8009020:	3001      	adds	r0, #1
 8009022:	f000 80a9 	beq.w	8009178 <_vfiprintf_r+0x1f0>
 8009026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009028:	445a      	add	r2, fp
 800902a:	9209      	str	r2, [sp, #36]	; 0x24
 800902c:	f89a 3000 	ldrb.w	r3, [sl]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80a1 	beq.w	8009178 <_vfiprintf_r+0x1f0>
 8009036:	2300      	movs	r3, #0
 8009038:	f04f 32ff 	mov.w	r2, #4294967295
 800903c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009040:	f10a 0a01 	add.w	sl, sl, #1
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800904c:	931a      	str	r3, [sp, #104]	; 0x68
 800904e:	4654      	mov	r4, sl
 8009050:	2205      	movs	r2, #5
 8009052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009056:	4854      	ldr	r0, [pc, #336]	; (80091a8 <_vfiprintf_r+0x220>)
 8009058:	f7f7 f8ba 	bl	80001d0 <memchr>
 800905c:	9a04      	ldr	r2, [sp, #16]
 800905e:	b9d8      	cbnz	r0, 8009098 <_vfiprintf_r+0x110>
 8009060:	06d1      	lsls	r1, r2, #27
 8009062:	bf44      	itt	mi
 8009064:	2320      	movmi	r3, #32
 8009066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906a:	0713      	lsls	r3, r2, #28
 800906c:	bf44      	itt	mi
 800906e:	232b      	movmi	r3, #43	; 0x2b
 8009070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009074:	f89a 3000 	ldrb.w	r3, [sl]
 8009078:	2b2a      	cmp	r3, #42	; 0x2a
 800907a:	d015      	beq.n	80090a8 <_vfiprintf_r+0x120>
 800907c:	9a07      	ldr	r2, [sp, #28]
 800907e:	4654      	mov	r4, sl
 8009080:	2000      	movs	r0, #0
 8009082:	f04f 0c0a 	mov.w	ip, #10
 8009086:	4621      	mov	r1, r4
 8009088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800908c:	3b30      	subs	r3, #48	; 0x30
 800908e:	2b09      	cmp	r3, #9
 8009090:	d94d      	bls.n	800912e <_vfiprintf_r+0x1a6>
 8009092:	b1b0      	cbz	r0, 80090c2 <_vfiprintf_r+0x13a>
 8009094:	9207      	str	r2, [sp, #28]
 8009096:	e014      	b.n	80090c2 <_vfiprintf_r+0x13a>
 8009098:	eba0 0308 	sub.w	r3, r0, r8
 800909c:	fa09 f303 	lsl.w	r3, r9, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	46a2      	mov	sl, r4
 80090a6:	e7d2      	b.n	800904e <_vfiprintf_r+0xc6>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	1d19      	adds	r1, r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	9103      	str	r1, [sp, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfbb      	ittet	lt
 80090b4:	425b      	neglt	r3, r3
 80090b6:	f042 0202 	orrlt.w	r2, r2, #2
 80090ba:	9307      	strge	r3, [sp, #28]
 80090bc:	9307      	strlt	r3, [sp, #28]
 80090be:	bfb8      	it	lt
 80090c0:	9204      	strlt	r2, [sp, #16]
 80090c2:	7823      	ldrb	r3, [r4, #0]
 80090c4:	2b2e      	cmp	r3, #46	; 0x2e
 80090c6:	d10c      	bne.n	80090e2 <_vfiprintf_r+0x15a>
 80090c8:	7863      	ldrb	r3, [r4, #1]
 80090ca:	2b2a      	cmp	r3, #42	; 0x2a
 80090cc:	d134      	bne.n	8009138 <_vfiprintf_r+0x1b0>
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	1d1a      	adds	r2, r3, #4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	9203      	str	r2, [sp, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb8      	it	lt
 80090da:	f04f 33ff 	movlt.w	r3, #4294967295
 80090de:	3402      	adds	r4, #2
 80090e0:	9305      	str	r3, [sp, #20]
 80090e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091b8 <_vfiprintf_r+0x230>
 80090e6:	7821      	ldrb	r1, [r4, #0]
 80090e8:	2203      	movs	r2, #3
 80090ea:	4650      	mov	r0, sl
 80090ec:	f7f7 f870 	bl	80001d0 <memchr>
 80090f0:	b138      	cbz	r0, 8009102 <_vfiprintf_r+0x17a>
 80090f2:	9b04      	ldr	r3, [sp, #16]
 80090f4:	eba0 000a 	sub.w	r0, r0, sl
 80090f8:	2240      	movs	r2, #64	; 0x40
 80090fa:	4082      	lsls	r2, r0
 80090fc:	4313      	orrs	r3, r2
 80090fe:	3401      	adds	r4, #1
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009106:	4829      	ldr	r0, [pc, #164]	; (80091ac <_vfiprintf_r+0x224>)
 8009108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800910c:	2206      	movs	r2, #6
 800910e:	f7f7 f85f 	bl	80001d0 <memchr>
 8009112:	2800      	cmp	r0, #0
 8009114:	d03f      	beq.n	8009196 <_vfiprintf_r+0x20e>
 8009116:	4b26      	ldr	r3, [pc, #152]	; (80091b0 <_vfiprintf_r+0x228>)
 8009118:	bb1b      	cbnz	r3, 8009162 <_vfiprintf_r+0x1da>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	3307      	adds	r3, #7
 800911e:	f023 0307 	bic.w	r3, r3, #7
 8009122:	3308      	adds	r3, #8
 8009124:	9303      	str	r3, [sp, #12]
 8009126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009128:	443b      	add	r3, r7
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
 800912c:	e768      	b.n	8009000 <_vfiprintf_r+0x78>
 800912e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009132:	460c      	mov	r4, r1
 8009134:	2001      	movs	r0, #1
 8009136:	e7a6      	b.n	8009086 <_vfiprintf_r+0xfe>
 8009138:	2300      	movs	r3, #0
 800913a:	3401      	adds	r4, #1
 800913c:	9305      	str	r3, [sp, #20]
 800913e:	4619      	mov	r1, r3
 8009140:	f04f 0c0a 	mov.w	ip, #10
 8009144:	4620      	mov	r0, r4
 8009146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914a:	3a30      	subs	r2, #48	; 0x30
 800914c:	2a09      	cmp	r2, #9
 800914e:	d903      	bls.n	8009158 <_vfiprintf_r+0x1d0>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0c6      	beq.n	80090e2 <_vfiprintf_r+0x15a>
 8009154:	9105      	str	r1, [sp, #20]
 8009156:	e7c4      	b.n	80090e2 <_vfiprintf_r+0x15a>
 8009158:	fb0c 2101 	mla	r1, ip, r1, r2
 800915c:	4604      	mov	r4, r0
 800915e:	2301      	movs	r3, #1
 8009160:	e7f0      	b.n	8009144 <_vfiprintf_r+0x1bc>
 8009162:	ab03      	add	r3, sp, #12
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	462a      	mov	r2, r5
 8009168:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <_vfiprintf_r+0x22c>)
 800916a:	a904      	add	r1, sp, #16
 800916c:	4630      	mov	r0, r6
 800916e:	f7fd fd13 	bl	8006b98 <_printf_float>
 8009172:	4607      	mov	r7, r0
 8009174:	1c78      	adds	r0, r7, #1
 8009176:	d1d6      	bne.n	8009126 <_vfiprintf_r+0x19e>
 8009178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800917a:	07d9      	lsls	r1, r3, #31
 800917c:	d405      	bmi.n	800918a <_vfiprintf_r+0x202>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	059a      	lsls	r2, r3, #22
 8009182:	d402      	bmi.n	800918a <_vfiprintf_r+0x202>
 8009184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009186:	f7fe fa83 	bl	8007690 <__retarget_lock_release_recursive>
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	065b      	lsls	r3, r3, #25
 800918e:	f53f af1d 	bmi.w	8008fcc <_vfiprintf_r+0x44>
 8009192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009194:	e71c      	b.n	8008fd0 <_vfiprintf_r+0x48>
 8009196:	ab03      	add	r3, sp, #12
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	462a      	mov	r2, r5
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <_vfiprintf_r+0x22c>)
 800919e:	a904      	add	r1, sp, #16
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7fd ff9d 	bl	80070e0 <_printf_i>
 80091a6:	e7e4      	b.n	8009172 <_vfiprintf_r+0x1ea>
 80091a8:	0800a914 	.word	0x0800a914
 80091ac:	0800a91e 	.word	0x0800a91e
 80091b0:	08006b99 	.word	0x08006b99
 80091b4:	08008f63 	.word	0x08008f63
 80091b8:	0800a91a 	.word	0x0800a91a

080091bc <__sflush_r>:
 80091bc:	898a      	ldrh	r2, [r1, #12]
 80091be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c2:	4605      	mov	r5, r0
 80091c4:	0710      	lsls	r0, r2, #28
 80091c6:	460c      	mov	r4, r1
 80091c8:	d458      	bmi.n	800927c <__sflush_r+0xc0>
 80091ca:	684b      	ldr	r3, [r1, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dc05      	bgt.n	80091dc <__sflush_r+0x20>
 80091d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dc02      	bgt.n	80091dc <__sflush_r+0x20>
 80091d6:	2000      	movs	r0, #0
 80091d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091de:	2e00      	cmp	r6, #0
 80091e0:	d0f9      	beq.n	80091d6 <__sflush_r+0x1a>
 80091e2:	2300      	movs	r3, #0
 80091e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091e8:	682f      	ldr	r7, [r5, #0]
 80091ea:	6a21      	ldr	r1, [r4, #32]
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	d032      	beq.n	8009256 <__sflush_r+0x9a>
 80091f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	075a      	lsls	r2, r3, #29
 80091f6:	d505      	bpl.n	8009204 <__sflush_r+0x48>
 80091f8:	6863      	ldr	r3, [r4, #4]
 80091fa:	1ac0      	subs	r0, r0, r3
 80091fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091fe:	b10b      	cbz	r3, 8009204 <__sflush_r+0x48>
 8009200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009202:	1ac0      	subs	r0, r0, r3
 8009204:	2300      	movs	r3, #0
 8009206:	4602      	mov	r2, r0
 8009208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800920a:	6a21      	ldr	r1, [r4, #32]
 800920c:	4628      	mov	r0, r5
 800920e:	47b0      	blx	r6
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	d106      	bne.n	8009224 <__sflush_r+0x68>
 8009216:	6829      	ldr	r1, [r5, #0]
 8009218:	291d      	cmp	r1, #29
 800921a:	d82b      	bhi.n	8009274 <__sflush_r+0xb8>
 800921c:	4a29      	ldr	r2, [pc, #164]	; (80092c4 <__sflush_r+0x108>)
 800921e:	410a      	asrs	r2, r1
 8009220:	07d6      	lsls	r6, r2, #31
 8009222:	d427      	bmi.n	8009274 <__sflush_r+0xb8>
 8009224:	2200      	movs	r2, #0
 8009226:	6062      	str	r2, [r4, #4]
 8009228:	04d9      	lsls	r1, r3, #19
 800922a:	6922      	ldr	r2, [r4, #16]
 800922c:	6022      	str	r2, [r4, #0]
 800922e:	d504      	bpl.n	800923a <__sflush_r+0x7e>
 8009230:	1c42      	adds	r2, r0, #1
 8009232:	d101      	bne.n	8009238 <__sflush_r+0x7c>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b903      	cbnz	r3, 800923a <__sflush_r+0x7e>
 8009238:	6560      	str	r0, [r4, #84]	; 0x54
 800923a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923c:	602f      	str	r7, [r5, #0]
 800923e:	2900      	cmp	r1, #0
 8009240:	d0c9      	beq.n	80091d6 <__sflush_r+0x1a>
 8009242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009246:	4299      	cmp	r1, r3
 8009248:	d002      	beq.n	8009250 <__sflush_r+0x94>
 800924a:	4628      	mov	r0, r5
 800924c:	f7ff f89e 	bl	800838c <_free_r>
 8009250:	2000      	movs	r0, #0
 8009252:	6360      	str	r0, [r4, #52]	; 0x34
 8009254:	e7c0      	b.n	80091d8 <__sflush_r+0x1c>
 8009256:	2301      	movs	r3, #1
 8009258:	4628      	mov	r0, r5
 800925a:	47b0      	blx	r6
 800925c:	1c41      	adds	r1, r0, #1
 800925e:	d1c8      	bne.n	80091f2 <__sflush_r+0x36>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0c5      	beq.n	80091f2 <__sflush_r+0x36>
 8009266:	2b1d      	cmp	r3, #29
 8009268:	d001      	beq.n	800926e <__sflush_r+0xb2>
 800926a:	2b16      	cmp	r3, #22
 800926c:	d101      	bne.n	8009272 <__sflush_r+0xb6>
 800926e:	602f      	str	r7, [r5, #0]
 8009270:	e7b1      	b.n	80091d6 <__sflush_r+0x1a>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009278:	81a3      	strh	r3, [r4, #12]
 800927a:	e7ad      	b.n	80091d8 <__sflush_r+0x1c>
 800927c:	690f      	ldr	r7, [r1, #16]
 800927e:	2f00      	cmp	r7, #0
 8009280:	d0a9      	beq.n	80091d6 <__sflush_r+0x1a>
 8009282:	0793      	lsls	r3, r2, #30
 8009284:	680e      	ldr	r6, [r1, #0]
 8009286:	bf08      	it	eq
 8009288:	694b      	ldreq	r3, [r1, #20]
 800928a:	600f      	str	r7, [r1, #0]
 800928c:	bf18      	it	ne
 800928e:	2300      	movne	r3, #0
 8009290:	eba6 0807 	sub.w	r8, r6, r7
 8009294:	608b      	str	r3, [r1, #8]
 8009296:	f1b8 0f00 	cmp.w	r8, #0
 800929a:	dd9c      	ble.n	80091d6 <__sflush_r+0x1a>
 800929c:	6a21      	ldr	r1, [r4, #32]
 800929e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092a0:	4643      	mov	r3, r8
 80092a2:	463a      	mov	r2, r7
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b0      	blx	r6
 80092a8:	2800      	cmp	r0, #0
 80092aa:	dc06      	bgt.n	80092ba <__sflush_r+0xfe>
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295
 80092b8:	e78e      	b.n	80091d8 <__sflush_r+0x1c>
 80092ba:	4407      	add	r7, r0
 80092bc:	eba8 0800 	sub.w	r8, r8, r0
 80092c0:	e7e9      	b.n	8009296 <__sflush_r+0xda>
 80092c2:	bf00      	nop
 80092c4:	dfbffffe 	.word	0xdfbffffe

080092c8 <_fflush_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	690b      	ldr	r3, [r1, #16]
 80092cc:	4605      	mov	r5, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	b913      	cbnz	r3, 80092d8 <_fflush_r+0x10>
 80092d2:	2500      	movs	r5, #0
 80092d4:	4628      	mov	r0, r5
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	b118      	cbz	r0, 80092e2 <_fflush_r+0x1a>
 80092da:	6a03      	ldr	r3, [r0, #32]
 80092dc:	b90b      	cbnz	r3, 80092e2 <_fflush_r+0x1a>
 80092de:	f7fe f8ad 	bl	800743c <__sinit>
 80092e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f3      	beq.n	80092d2 <_fflush_r+0xa>
 80092ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092ec:	07d0      	lsls	r0, r2, #31
 80092ee:	d404      	bmi.n	80092fa <_fflush_r+0x32>
 80092f0:	0599      	lsls	r1, r3, #22
 80092f2:	d402      	bmi.n	80092fa <_fflush_r+0x32>
 80092f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092f6:	f7fe f9ca 	bl	800768e <__retarget_lock_acquire_recursive>
 80092fa:	4628      	mov	r0, r5
 80092fc:	4621      	mov	r1, r4
 80092fe:	f7ff ff5d 	bl	80091bc <__sflush_r>
 8009302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009304:	07da      	lsls	r2, r3, #31
 8009306:	4605      	mov	r5, r0
 8009308:	d4e4      	bmi.n	80092d4 <_fflush_r+0xc>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	059b      	lsls	r3, r3, #22
 800930e:	d4e1      	bmi.n	80092d4 <_fflush_r+0xc>
 8009310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009312:	f7fe f9bd 	bl	8007690 <__retarget_lock_release_recursive>
 8009316:	e7dd      	b.n	80092d4 <_fflush_r+0xc>

08009318 <__swbuf_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	460e      	mov	r6, r1
 800931c:	4614      	mov	r4, r2
 800931e:	4605      	mov	r5, r0
 8009320:	b118      	cbz	r0, 800932a <__swbuf_r+0x12>
 8009322:	6a03      	ldr	r3, [r0, #32]
 8009324:	b90b      	cbnz	r3, 800932a <__swbuf_r+0x12>
 8009326:	f7fe f889 	bl	800743c <__sinit>
 800932a:	69a3      	ldr	r3, [r4, #24]
 800932c:	60a3      	str	r3, [r4, #8]
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	071a      	lsls	r2, r3, #28
 8009332:	d525      	bpl.n	8009380 <__swbuf_r+0x68>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	b31b      	cbz	r3, 8009380 <__swbuf_r+0x68>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	6922      	ldr	r2, [r4, #16]
 800933c:	1a98      	subs	r0, r3, r2
 800933e:	6963      	ldr	r3, [r4, #20]
 8009340:	b2f6      	uxtb	r6, r6
 8009342:	4283      	cmp	r3, r0
 8009344:	4637      	mov	r7, r6
 8009346:	dc04      	bgt.n	8009352 <__swbuf_r+0x3a>
 8009348:	4621      	mov	r1, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f7ff ffbc 	bl	80092c8 <_fflush_r>
 8009350:	b9e0      	cbnz	r0, 800938c <__swbuf_r+0x74>
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	3b01      	subs	r3, #1
 8009356:	60a3      	str	r3, [r4, #8]
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	6022      	str	r2, [r4, #0]
 800935e:	701e      	strb	r6, [r3, #0]
 8009360:	6962      	ldr	r2, [r4, #20]
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	429a      	cmp	r2, r3
 8009366:	d004      	beq.n	8009372 <__swbuf_r+0x5a>
 8009368:	89a3      	ldrh	r3, [r4, #12]
 800936a:	07db      	lsls	r3, r3, #31
 800936c:	d506      	bpl.n	800937c <__swbuf_r+0x64>
 800936e:	2e0a      	cmp	r6, #10
 8009370:	d104      	bne.n	800937c <__swbuf_r+0x64>
 8009372:	4621      	mov	r1, r4
 8009374:	4628      	mov	r0, r5
 8009376:	f7ff ffa7 	bl	80092c8 <_fflush_r>
 800937a:	b938      	cbnz	r0, 800938c <__swbuf_r+0x74>
 800937c:	4638      	mov	r0, r7
 800937e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f000 f806 	bl	8009394 <__swsetup_r>
 8009388:	2800      	cmp	r0, #0
 800938a:	d0d5      	beq.n	8009338 <__swbuf_r+0x20>
 800938c:	f04f 37ff 	mov.w	r7, #4294967295
 8009390:	e7f4      	b.n	800937c <__swbuf_r+0x64>
	...

08009394 <__swsetup_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <__swsetup_r+0xac>)
 8009398:	4605      	mov	r5, r0
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	460c      	mov	r4, r1
 800939e:	b118      	cbz	r0, 80093a8 <__swsetup_r+0x14>
 80093a0:	6a03      	ldr	r3, [r0, #32]
 80093a2:	b90b      	cbnz	r3, 80093a8 <__swsetup_r+0x14>
 80093a4:	f7fe f84a 	bl	800743c <__sinit>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ae:	0718      	lsls	r0, r3, #28
 80093b0:	d422      	bmi.n	80093f8 <__swsetup_r+0x64>
 80093b2:	06d9      	lsls	r1, r3, #27
 80093b4:	d407      	bmi.n	80093c6 <__swsetup_r+0x32>
 80093b6:	2309      	movs	r3, #9
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093be:	81a3      	strh	r3, [r4, #12]
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e034      	b.n	8009430 <__swsetup_r+0x9c>
 80093c6:	0758      	lsls	r0, r3, #29
 80093c8:	d512      	bpl.n	80093f0 <__swsetup_r+0x5c>
 80093ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093cc:	b141      	cbz	r1, 80093e0 <__swsetup_r+0x4c>
 80093ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d2:	4299      	cmp	r1, r3
 80093d4:	d002      	beq.n	80093dc <__swsetup_r+0x48>
 80093d6:	4628      	mov	r0, r5
 80093d8:	f7fe ffd8 	bl	800838c <_free_r>
 80093dc:	2300      	movs	r3, #0
 80093de:	6363      	str	r3, [r4, #52]	; 0x34
 80093e0:	89a3      	ldrh	r3, [r4, #12]
 80093e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	2300      	movs	r3, #0
 80093ea:	6063      	str	r3, [r4, #4]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	f043 0308 	orr.w	r3, r3, #8
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	b94b      	cbnz	r3, 8009410 <__swsetup_r+0x7c>
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009406:	d003      	beq.n	8009410 <__swsetup_r+0x7c>
 8009408:	4621      	mov	r1, r4
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f90c 	bl	8009628 <__smakebuf_r>
 8009410:	89a0      	ldrh	r0, [r4, #12]
 8009412:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009416:	f010 0301 	ands.w	r3, r0, #1
 800941a:	d00a      	beq.n	8009432 <__swsetup_r+0x9e>
 800941c:	2300      	movs	r3, #0
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	6963      	ldr	r3, [r4, #20]
 8009422:	425b      	negs	r3, r3
 8009424:	61a3      	str	r3, [r4, #24]
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	b943      	cbnz	r3, 800943c <__swsetup_r+0xa8>
 800942a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800942e:	d1c4      	bne.n	80093ba <__swsetup_r+0x26>
 8009430:	bd38      	pop	{r3, r4, r5, pc}
 8009432:	0781      	lsls	r1, r0, #30
 8009434:	bf58      	it	pl
 8009436:	6963      	ldrpl	r3, [r4, #20]
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	e7f4      	b.n	8009426 <__swsetup_r+0x92>
 800943c:	2000      	movs	r0, #0
 800943e:	e7f7      	b.n	8009430 <__swsetup_r+0x9c>
 8009440:	20000064 	.word	0x20000064

08009444 <memmove>:
 8009444:	4288      	cmp	r0, r1
 8009446:	b510      	push	{r4, lr}
 8009448:	eb01 0402 	add.w	r4, r1, r2
 800944c:	d902      	bls.n	8009454 <memmove+0x10>
 800944e:	4284      	cmp	r4, r0
 8009450:	4623      	mov	r3, r4
 8009452:	d807      	bhi.n	8009464 <memmove+0x20>
 8009454:	1e43      	subs	r3, r0, #1
 8009456:	42a1      	cmp	r1, r4
 8009458:	d008      	beq.n	800946c <memmove+0x28>
 800945a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800945e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009462:	e7f8      	b.n	8009456 <memmove+0x12>
 8009464:	4402      	add	r2, r0
 8009466:	4601      	mov	r1, r0
 8009468:	428a      	cmp	r2, r1
 800946a:	d100      	bne.n	800946e <memmove+0x2a>
 800946c:	bd10      	pop	{r4, pc}
 800946e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009476:	e7f7      	b.n	8009468 <memmove+0x24>

08009478 <_sbrk_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d06      	ldr	r5, [pc, #24]	; (8009494 <_sbrk_r+0x1c>)
 800947c:	2300      	movs	r3, #0
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f8 fbf6 	bl	8001c74 <_sbrk>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_sbrk_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_sbrk_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	200004f8 	.word	0x200004f8

08009498 <memcpy>:
 8009498:	440a      	add	r2, r1
 800949a:	4291      	cmp	r1, r2
 800949c:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a0:	d100      	bne.n	80094a4 <memcpy+0xc>
 80094a2:	4770      	bx	lr
 80094a4:	b510      	push	{r4, lr}
 80094a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d1f9      	bne.n	80094a6 <memcpy+0xe>
 80094b2:	bd10      	pop	{r4, pc}

080094b4 <__assert_func>:
 80094b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094b6:	4614      	mov	r4, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <__assert_func+0x2c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4605      	mov	r5, r0
 80094c0:	68d8      	ldr	r0, [r3, #12]
 80094c2:	b14c      	cbz	r4, 80094d8 <__assert_func+0x24>
 80094c4:	4b07      	ldr	r3, [pc, #28]	; (80094e4 <__assert_func+0x30>)
 80094c6:	9100      	str	r1, [sp, #0]
 80094c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094cc:	4906      	ldr	r1, [pc, #24]	; (80094e8 <__assert_func+0x34>)
 80094ce:	462b      	mov	r3, r5
 80094d0:	f000 f872 	bl	80095b8 <fiprintf>
 80094d4:	f000 f906 	bl	80096e4 <abort>
 80094d8:	4b04      	ldr	r3, [pc, #16]	; (80094ec <__assert_func+0x38>)
 80094da:	461c      	mov	r4, r3
 80094dc:	e7f3      	b.n	80094c6 <__assert_func+0x12>
 80094de:	bf00      	nop
 80094e0:	20000064 	.word	0x20000064
 80094e4:	0800a92f 	.word	0x0800a92f
 80094e8:	0800a93c 	.word	0x0800a93c
 80094ec:	0800a96a 	.word	0x0800a96a

080094f0 <_calloc_r>:
 80094f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094f2:	fba1 2402 	umull	r2, r4, r1, r2
 80094f6:	b94c      	cbnz	r4, 800950c <_calloc_r+0x1c>
 80094f8:	4611      	mov	r1, r2
 80094fa:	9201      	str	r2, [sp, #4]
 80094fc:	f7fe ffba 	bl	8008474 <_malloc_r>
 8009500:	9a01      	ldr	r2, [sp, #4]
 8009502:	4605      	mov	r5, r0
 8009504:	b930      	cbnz	r0, 8009514 <_calloc_r+0x24>
 8009506:	4628      	mov	r0, r5
 8009508:	b003      	add	sp, #12
 800950a:	bd30      	pop	{r4, r5, pc}
 800950c:	220c      	movs	r2, #12
 800950e:	6002      	str	r2, [r0, #0]
 8009510:	2500      	movs	r5, #0
 8009512:	e7f8      	b.n	8009506 <_calloc_r+0x16>
 8009514:	4621      	mov	r1, r4
 8009516:	f7fe f83c 	bl	8007592 <memset>
 800951a:	e7f4      	b.n	8009506 <_calloc_r+0x16>

0800951c <__ascii_mbtowc>:
 800951c:	b082      	sub	sp, #8
 800951e:	b901      	cbnz	r1, 8009522 <__ascii_mbtowc+0x6>
 8009520:	a901      	add	r1, sp, #4
 8009522:	b142      	cbz	r2, 8009536 <__ascii_mbtowc+0x1a>
 8009524:	b14b      	cbz	r3, 800953a <__ascii_mbtowc+0x1e>
 8009526:	7813      	ldrb	r3, [r2, #0]
 8009528:	600b      	str	r3, [r1, #0]
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	1e10      	subs	r0, r2, #0
 800952e:	bf18      	it	ne
 8009530:	2001      	movne	r0, #1
 8009532:	b002      	add	sp, #8
 8009534:	4770      	bx	lr
 8009536:	4610      	mov	r0, r2
 8009538:	e7fb      	b.n	8009532 <__ascii_mbtowc+0x16>
 800953a:	f06f 0001 	mvn.w	r0, #1
 800953e:	e7f8      	b.n	8009532 <__ascii_mbtowc+0x16>

08009540 <_realloc_r>:
 8009540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009544:	4680      	mov	r8, r0
 8009546:	4614      	mov	r4, r2
 8009548:	460e      	mov	r6, r1
 800954a:	b921      	cbnz	r1, 8009556 <_realloc_r+0x16>
 800954c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	4611      	mov	r1, r2
 8009552:	f7fe bf8f 	b.w	8008474 <_malloc_r>
 8009556:	b92a      	cbnz	r2, 8009564 <_realloc_r+0x24>
 8009558:	f7fe ff18 	bl	800838c <_free_r>
 800955c:	4625      	mov	r5, r4
 800955e:	4628      	mov	r0, r5
 8009560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009564:	f000 f8c5 	bl	80096f2 <_malloc_usable_size_r>
 8009568:	4284      	cmp	r4, r0
 800956a:	4607      	mov	r7, r0
 800956c:	d802      	bhi.n	8009574 <_realloc_r+0x34>
 800956e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009572:	d812      	bhi.n	800959a <_realloc_r+0x5a>
 8009574:	4621      	mov	r1, r4
 8009576:	4640      	mov	r0, r8
 8009578:	f7fe ff7c 	bl	8008474 <_malloc_r>
 800957c:	4605      	mov	r5, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	d0ed      	beq.n	800955e <_realloc_r+0x1e>
 8009582:	42bc      	cmp	r4, r7
 8009584:	4622      	mov	r2, r4
 8009586:	4631      	mov	r1, r6
 8009588:	bf28      	it	cs
 800958a:	463a      	movcs	r2, r7
 800958c:	f7ff ff84 	bl	8009498 <memcpy>
 8009590:	4631      	mov	r1, r6
 8009592:	4640      	mov	r0, r8
 8009594:	f7fe fefa 	bl	800838c <_free_r>
 8009598:	e7e1      	b.n	800955e <_realloc_r+0x1e>
 800959a:	4635      	mov	r5, r6
 800959c:	e7df      	b.n	800955e <_realloc_r+0x1e>

0800959e <__ascii_wctomb>:
 800959e:	b149      	cbz	r1, 80095b4 <__ascii_wctomb+0x16>
 80095a0:	2aff      	cmp	r2, #255	; 0xff
 80095a2:	bf85      	ittet	hi
 80095a4:	238a      	movhi	r3, #138	; 0x8a
 80095a6:	6003      	strhi	r3, [r0, #0]
 80095a8:	700a      	strbls	r2, [r1, #0]
 80095aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80095ae:	bf98      	it	ls
 80095b0:	2001      	movls	r0, #1
 80095b2:	4770      	bx	lr
 80095b4:	4608      	mov	r0, r1
 80095b6:	4770      	bx	lr

080095b8 <fiprintf>:
 80095b8:	b40e      	push	{r1, r2, r3}
 80095ba:	b503      	push	{r0, r1, lr}
 80095bc:	4601      	mov	r1, r0
 80095be:	ab03      	add	r3, sp, #12
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <fiprintf+0x20>)
 80095c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	9301      	str	r3, [sp, #4]
 80095ca:	f7ff fcdd 	bl	8008f88 <_vfiprintf_r>
 80095ce:	b002      	add	sp, #8
 80095d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095d4:	b003      	add	sp, #12
 80095d6:	4770      	bx	lr
 80095d8:	20000064 	.word	0x20000064

080095dc <__swhatbuf_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	2900      	cmp	r1, #0
 80095e6:	b096      	sub	sp, #88	; 0x58
 80095e8:	4615      	mov	r5, r2
 80095ea:	461e      	mov	r6, r3
 80095ec:	da0d      	bge.n	800960a <__swhatbuf_r+0x2e>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	bf0c      	ite	eq
 80095fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095fe:	2340      	movne	r3, #64	; 0x40
 8009600:	2000      	movs	r0, #0
 8009602:	6031      	str	r1, [r6, #0]
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	b016      	add	sp, #88	; 0x58
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	466a      	mov	r2, sp
 800960c:	f000 f848 	bl	80096a0 <_fstat_r>
 8009610:	2800      	cmp	r0, #0
 8009612:	dbec      	blt.n	80095ee <__swhatbuf_r+0x12>
 8009614:	9901      	ldr	r1, [sp, #4]
 8009616:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800961a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800961e:	4259      	negs	r1, r3
 8009620:	4159      	adcs	r1, r3
 8009622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009626:	e7eb      	b.n	8009600 <__swhatbuf_r+0x24>

08009628 <__smakebuf_r>:
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800962c:	079d      	lsls	r5, r3, #30
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	d507      	bpl.n	8009644 <__smakebuf_r+0x1c>
 8009634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2301      	movs	r3, #1
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	b002      	add	sp, #8
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	ab01      	add	r3, sp, #4
 8009646:	466a      	mov	r2, sp
 8009648:	f7ff ffc8 	bl	80095dc <__swhatbuf_r>
 800964c:	9900      	ldr	r1, [sp, #0]
 800964e:	4605      	mov	r5, r0
 8009650:	4630      	mov	r0, r6
 8009652:	f7fe ff0f 	bl	8008474 <_malloc_r>
 8009656:	b948      	cbnz	r0, 800966c <__smakebuf_r+0x44>
 8009658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965c:	059a      	lsls	r2, r3, #22
 800965e:	d4ef      	bmi.n	8009640 <__smakebuf_r+0x18>
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	f043 0302 	orr.w	r3, r3, #2
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	e7e3      	b.n	8009634 <__smakebuf_r+0xc>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	6020      	str	r0, [r4, #0]
 8009670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	6163      	str	r3, [r4, #20]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	6120      	str	r0, [r4, #16]
 800967e:	b15b      	cbz	r3, 8009698 <__smakebuf_r+0x70>
 8009680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f81d 	bl	80096c4 <_isatty_r>
 800968a:	b128      	cbz	r0, 8009698 <__smakebuf_r+0x70>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	431d      	orrs	r5, r3
 800969c:	81a5      	strh	r5, [r4, #12]
 800969e:	e7cf      	b.n	8009640 <__smakebuf_r+0x18>

080096a0 <_fstat_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d07      	ldr	r5, [pc, #28]	; (80096c0 <_fstat_r+0x20>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	f7f8 fab8 	bl	8001c22 <_fstat>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d102      	bne.n	80096bc <_fstat_r+0x1c>
 80096b6:	682b      	ldr	r3, [r5, #0]
 80096b8:	b103      	cbz	r3, 80096bc <_fstat_r+0x1c>
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	200004f8 	.word	0x200004f8

080096c4 <_isatty_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d06      	ldr	r5, [pc, #24]	; (80096e0 <_isatty_r+0x1c>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	f7f8 fab7 	bl	8001c42 <_isatty>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d102      	bne.n	80096de <_isatty_r+0x1a>
 80096d8:	682b      	ldr	r3, [r5, #0]
 80096da:	b103      	cbz	r3, 80096de <_isatty_r+0x1a>
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	200004f8 	.word	0x200004f8

080096e4 <abort>:
 80096e4:	b508      	push	{r3, lr}
 80096e6:	2006      	movs	r0, #6
 80096e8:	f000 f834 	bl	8009754 <raise>
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7f8 fa49 	bl	8001b84 <_exit>

080096f2 <_malloc_usable_size_r>:
 80096f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f6:	1f18      	subs	r0, r3, #4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	bfbc      	itt	lt
 80096fc:	580b      	ldrlt	r3, [r1, r0]
 80096fe:	18c0      	addlt	r0, r0, r3
 8009700:	4770      	bx	lr

08009702 <_raise_r>:
 8009702:	291f      	cmp	r1, #31
 8009704:	b538      	push	{r3, r4, r5, lr}
 8009706:	4604      	mov	r4, r0
 8009708:	460d      	mov	r5, r1
 800970a:	d904      	bls.n	8009716 <_raise_r+0x14>
 800970c:	2316      	movs	r3, #22
 800970e:	6003      	str	r3, [r0, #0]
 8009710:	f04f 30ff 	mov.w	r0, #4294967295
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009718:	b112      	cbz	r2, 8009720 <_raise_r+0x1e>
 800971a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800971e:	b94b      	cbnz	r3, 8009734 <_raise_r+0x32>
 8009720:	4620      	mov	r0, r4
 8009722:	f000 f831 	bl	8009788 <_getpid_r>
 8009726:	462a      	mov	r2, r5
 8009728:	4601      	mov	r1, r0
 800972a:	4620      	mov	r0, r4
 800972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009730:	f000 b818 	b.w	8009764 <_kill_r>
 8009734:	2b01      	cmp	r3, #1
 8009736:	d00a      	beq.n	800974e <_raise_r+0x4c>
 8009738:	1c59      	adds	r1, r3, #1
 800973a:	d103      	bne.n	8009744 <_raise_r+0x42>
 800973c:	2316      	movs	r3, #22
 800973e:	6003      	str	r3, [r0, #0]
 8009740:	2001      	movs	r0, #1
 8009742:	e7e7      	b.n	8009714 <_raise_r+0x12>
 8009744:	2400      	movs	r4, #0
 8009746:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800974a:	4628      	mov	r0, r5
 800974c:	4798      	blx	r3
 800974e:	2000      	movs	r0, #0
 8009750:	e7e0      	b.n	8009714 <_raise_r+0x12>
	...

08009754 <raise>:
 8009754:	4b02      	ldr	r3, [pc, #8]	; (8009760 <raise+0xc>)
 8009756:	4601      	mov	r1, r0
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f7ff bfd2 	b.w	8009702 <_raise_r>
 800975e:	bf00      	nop
 8009760:	20000064 	.word	0x20000064

08009764 <_kill_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_kill_r+0x20>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f7f8 f9f7 	bl	8001b64 <_kill>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d102      	bne.n	8009780 <_kill_r+0x1c>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b103      	cbz	r3, 8009780 <_kill_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd38      	pop	{r3, r4, r5, pc}
 8009782:	bf00      	nop
 8009784:	200004f8 	.word	0x200004f8

08009788 <_getpid_r>:
 8009788:	f7f8 b9e4 	b.w	8001b54 <_getpid>

0800978c <pow>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	ed2d 8b02 	vpush	{d8}
 8009792:	eeb0 8a40 	vmov.f32	s16, s0
 8009796:	eef0 8a60 	vmov.f32	s17, s1
 800979a:	ec55 4b11 	vmov	r4, r5, d1
 800979e:	f000 f873 	bl	8009888 <__ieee754_pow>
 80097a2:	4622      	mov	r2, r4
 80097a4:	462b      	mov	r3, r5
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	ec57 6b10 	vmov	r6, r7, d0
 80097ae:	f7f7 f9bd 	bl	8000b2c <__aeabi_dcmpun>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d13b      	bne.n	800982e <pow+0xa2>
 80097b6:	ec51 0b18 	vmov	r0, r1, d8
 80097ba:	2200      	movs	r2, #0
 80097bc:	2300      	movs	r3, #0
 80097be:	f7f7 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80097c2:	b1b8      	cbz	r0, 80097f4 <pow+0x68>
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f7 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d146      	bne.n	8009862 <pow+0xd6>
 80097d4:	ec45 4b10 	vmov	d0, r4, r5
 80097d8:	f000 f848 	bl	800986c <finite>
 80097dc:	b338      	cbz	r0, 800982e <pow+0xa2>
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7f7 f979 	bl	8000adc <__aeabi_dcmplt>
 80097ea:	b300      	cbz	r0, 800982e <pow+0xa2>
 80097ec:	f7fd ff24 	bl	8007638 <__errno>
 80097f0:	2322      	movs	r3, #34	; 0x22
 80097f2:	e01b      	b.n	800982c <pow+0xa0>
 80097f4:	ec47 6b10 	vmov	d0, r6, r7
 80097f8:	f000 f838 	bl	800986c <finite>
 80097fc:	b9e0      	cbnz	r0, 8009838 <pow+0xac>
 80097fe:	eeb0 0a48 	vmov.f32	s0, s16
 8009802:	eef0 0a68 	vmov.f32	s1, s17
 8009806:	f000 f831 	bl	800986c <finite>
 800980a:	b1a8      	cbz	r0, 8009838 <pow+0xac>
 800980c:	ec45 4b10 	vmov	d0, r4, r5
 8009810:	f000 f82c 	bl	800986c <finite>
 8009814:	b180      	cbz	r0, 8009838 <pow+0xac>
 8009816:	4632      	mov	r2, r6
 8009818:	463b      	mov	r3, r7
 800981a:	4630      	mov	r0, r6
 800981c:	4639      	mov	r1, r7
 800981e:	f7f7 f985 	bl	8000b2c <__aeabi_dcmpun>
 8009822:	2800      	cmp	r0, #0
 8009824:	d0e2      	beq.n	80097ec <pow+0x60>
 8009826:	f7fd ff07 	bl	8007638 <__errno>
 800982a:	2321      	movs	r3, #33	; 0x21
 800982c:	6003      	str	r3, [r0, #0]
 800982e:	ecbd 8b02 	vpop	{d8}
 8009832:	ec47 6b10 	vmov	d0, r6, r7
 8009836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009838:	2200      	movs	r2, #0
 800983a:	2300      	movs	r3, #0
 800983c:	4630      	mov	r0, r6
 800983e:	4639      	mov	r1, r7
 8009840:	f7f7 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0f2      	beq.n	800982e <pow+0xa2>
 8009848:	eeb0 0a48 	vmov.f32	s0, s16
 800984c:	eef0 0a68 	vmov.f32	s1, s17
 8009850:	f000 f80c 	bl	800986c <finite>
 8009854:	2800      	cmp	r0, #0
 8009856:	d0ea      	beq.n	800982e <pow+0xa2>
 8009858:	ec45 4b10 	vmov	d0, r4, r5
 800985c:	f000 f806 	bl	800986c <finite>
 8009860:	e7c3      	b.n	80097ea <pow+0x5e>
 8009862:	4f01      	ldr	r7, [pc, #4]	; (8009868 <pow+0xdc>)
 8009864:	2600      	movs	r6, #0
 8009866:	e7e2      	b.n	800982e <pow+0xa2>
 8009868:	3ff00000 	.word	0x3ff00000

0800986c <finite>:
 800986c:	b082      	sub	sp, #8
 800986e:	ed8d 0b00 	vstr	d0, [sp]
 8009872:	9801      	ldr	r0, [sp, #4]
 8009874:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009878:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800987c:	0fc0      	lsrs	r0, r0, #31
 800987e:	b002      	add	sp, #8
 8009880:	4770      	bx	lr
 8009882:	0000      	movs	r0, r0
 8009884:	0000      	movs	r0, r0
	...

08009888 <__ieee754_pow>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	ed2d 8b06 	vpush	{d8-d10}
 8009890:	b089      	sub	sp, #36	; 0x24
 8009892:	ed8d 1b00 	vstr	d1, [sp]
 8009896:	e9dd 2900 	ldrd	r2, r9, [sp]
 800989a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800989e:	ea58 0102 	orrs.w	r1, r8, r2
 80098a2:	ec57 6b10 	vmov	r6, r7, d0
 80098a6:	d115      	bne.n	80098d4 <__ieee754_pow+0x4c>
 80098a8:	19b3      	adds	r3, r6, r6
 80098aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80098ae:	4152      	adcs	r2, r2
 80098b0:	4299      	cmp	r1, r3
 80098b2:	4b89      	ldr	r3, [pc, #548]	; (8009ad8 <__ieee754_pow+0x250>)
 80098b4:	4193      	sbcs	r3, r2
 80098b6:	f080 84d1 	bcs.w	800a25c <__ieee754_pow+0x9d4>
 80098ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098be:	4630      	mov	r0, r6
 80098c0:	4639      	mov	r1, r7
 80098c2:	f7f6 fce3 	bl	800028c <__adddf3>
 80098c6:	ec41 0b10 	vmov	d0, r0, r1
 80098ca:	b009      	add	sp, #36	; 0x24
 80098cc:	ecbd 8b06 	vpop	{d8-d10}
 80098d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d4:	4b81      	ldr	r3, [pc, #516]	; (8009adc <__ieee754_pow+0x254>)
 80098d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80098da:	429c      	cmp	r4, r3
 80098dc:	ee10 aa10 	vmov	sl, s0
 80098e0:	463d      	mov	r5, r7
 80098e2:	dc06      	bgt.n	80098f2 <__ieee754_pow+0x6a>
 80098e4:	d101      	bne.n	80098ea <__ieee754_pow+0x62>
 80098e6:	2e00      	cmp	r6, #0
 80098e8:	d1e7      	bne.n	80098ba <__ieee754_pow+0x32>
 80098ea:	4598      	cmp	r8, r3
 80098ec:	dc01      	bgt.n	80098f2 <__ieee754_pow+0x6a>
 80098ee:	d10f      	bne.n	8009910 <__ieee754_pow+0x88>
 80098f0:	b172      	cbz	r2, 8009910 <__ieee754_pow+0x88>
 80098f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80098f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80098fa:	ea55 050a 	orrs.w	r5, r5, sl
 80098fe:	d1dc      	bne.n	80098ba <__ieee754_pow+0x32>
 8009900:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009904:	18db      	adds	r3, r3, r3
 8009906:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800990a:	4152      	adcs	r2, r2
 800990c:	429d      	cmp	r5, r3
 800990e:	e7d0      	b.n	80098b2 <__ieee754_pow+0x2a>
 8009910:	2d00      	cmp	r5, #0
 8009912:	da3b      	bge.n	800998c <__ieee754_pow+0x104>
 8009914:	4b72      	ldr	r3, [pc, #456]	; (8009ae0 <__ieee754_pow+0x258>)
 8009916:	4598      	cmp	r8, r3
 8009918:	dc51      	bgt.n	80099be <__ieee754_pow+0x136>
 800991a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800991e:	4598      	cmp	r8, r3
 8009920:	f340 84ab 	ble.w	800a27a <__ieee754_pow+0x9f2>
 8009924:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800992c:	2b14      	cmp	r3, #20
 800992e:	dd0f      	ble.n	8009950 <__ieee754_pow+0xc8>
 8009930:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009934:	fa22 f103 	lsr.w	r1, r2, r3
 8009938:	fa01 f303 	lsl.w	r3, r1, r3
 800993c:	4293      	cmp	r3, r2
 800993e:	f040 849c 	bne.w	800a27a <__ieee754_pow+0x9f2>
 8009942:	f001 0101 	and.w	r1, r1, #1
 8009946:	f1c1 0302 	rsb	r3, r1, #2
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	b182      	cbz	r2, 8009970 <__ieee754_pow+0xe8>
 800994e:	e05f      	b.n	8009a10 <__ieee754_pow+0x188>
 8009950:	2a00      	cmp	r2, #0
 8009952:	d15b      	bne.n	8009a0c <__ieee754_pow+0x184>
 8009954:	f1c3 0314 	rsb	r3, r3, #20
 8009958:	fa48 f103 	asr.w	r1, r8, r3
 800995c:	fa01 f303 	lsl.w	r3, r1, r3
 8009960:	4543      	cmp	r3, r8
 8009962:	f040 8487 	bne.w	800a274 <__ieee754_pow+0x9ec>
 8009966:	f001 0101 	and.w	r1, r1, #1
 800996a:	f1c1 0302 	rsb	r3, r1, #2
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	4b5c      	ldr	r3, [pc, #368]	; (8009ae4 <__ieee754_pow+0x25c>)
 8009972:	4598      	cmp	r8, r3
 8009974:	d132      	bne.n	80099dc <__ieee754_pow+0x154>
 8009976:	f1b9 0f00 	cmp.w	r9, #0
 800997a:	f280 8477 	bge.w	800a26c <__ieee754_pow+0x9e4>
 800997e:	4959      	ldr	r1, [pc, #356]	; (8009ae4 <__ieee754_pow+0x25c>)
 8009980:	4632      	mov	r2, r6
 8009982:	463b      	mov	r3, r7
 8009984:	2000      	movs	r0, #0
 8009986:	f7f6 ff61 	bl	800084c <__aeabi_ddiv>
 800998a:	e79c      	b.n	80098c6 <__ieee754_pow+0x3e>
 800998c:	2300      	movs	r3, #0
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	2a00      	cmp	r2, #0
 8009992:	d13d      	bne.n	8009a10 <__ieee754_pow+0x188>
 8009994:	4b51      	ldr	r3, [pc, #324]	; (8009adc <__ieee754_pow+0x254>)
 8009996:	4598      	cmp	r8, r3
 8009998:	d1ea      	bne.n	8009970 <__ieee754_pow+0xe8>
 800999a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800999e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80099a2:	ea53 030a 	orrs.w	r3, r3, sl
 80099a6:	f000 8459 	beq.w	800a25c <__ieee754_pow+0x9d4>
 80099aa:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <__ieee754_pow+0x260>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	dd08      	ble.n	80099c2 <__ieee754_pow+0x13a>
 80099b0:	f1b9 0f00 	cmp.w	r9, #0
 80099b4:	f2c0 8456 	blt.w	800a264 <__ieee754_pow+0x9dc>
 80099b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099bc:	e783      	b.n	80098c6 <__ieee754_pow+0x3e>
 80099be:	2302      	movs	r3, #2
 80099c0:	e7e5      	b.n	800998e <__ieee754_pow+0x106>
 80099c2:	f1b9 0f00 	cmp.w	r9, #0
 80099c6:	f04f 0000 	mov.w	r0, #0
 80099ca:	f04f 0100 	mov.w	r1, #0
 80099ce:	f6bf af7a 	bge.w	80098c6 <__ieee754_pow+0x3e>
 80099d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80099d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80099da:	e774      	b.n	80098c6 <__ieee754_pow+0x3e>
 80099dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80099e0:	d106      	bne.n	80099f0 <__ieee754_pow+0x168>
 80099e2:	4632      	mov	r2, r6
 80099e4:	463b      	mov	r3, r7
 80099e6:	4630      	mov	r0, r6
 80099e8:	4639      	mov	r1, r7
 80099ea:	f7f6 fe05 	bl	80005f8 <__aeabi_dmul>
 80099ee:	e76a      	b.n	80098c6 <__ieee754_pow+0x3e>
 80099f0:	4b3e      	ldr	r3, [pc, #248]	; (8009aec <__ieee754_pow+0x264>)
 80099f2:	4599      	cmp	r9, r3
 80099f4:	d10c      	bne.n	8009a10 <__ieee754_pow+0x188>
 80099f6:	2d00      	cmp	r5, #0
 80099f8:	db0a      	blt.n	8009a10 <__ieee754_pow+0x188>
 80099fa:	ec47 6b10 	vmov	d0, r6, r7
 80099fe:	b009      	add	sp, #36	; 0x24
 8009a00:	ecbd 8b06 	vpop	{d8-d10}
 8009a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	f000 bd20 	b.w	800a44c <__ieee754_sqrt>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	ec47 6b10 	vmov	d0, r6, r7
 8009a14:	f000 fc62 	bl	800a2dc <fabs>
 8009a18:	ec51 0b10 	vmov	r0, r1, d0
 8009a1c:	f1ba 0f00 	cmp.w	sl, #0
 8009a20:	d129      	bne.n	8009a76 <__ieee754_pow+0x1ee>
 8009a22:	b124      	cbz	r4, 8009a2e <__ieee754_pow+0x1a6>
 8009a24:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <__ieee754_pow+0x25c>)
 8009a26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d123      	bne.n	8009a76 <__ieee754_pow+0x1ee>
 8009a2e:	f1b9 0f00 	cmp.w	r9, #0
 8009a32:	da05      	bge.n	8009a40 <__ieee754_pow+0x1b8>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	2000      	movs	r0, #0
 8009a3a:	492a      	ldr	r1, [pc, #168]	; (8009ae4 <__ieee754_pow+0x25c>)
 8009a3c:	f7f6 ff06 	bl	800084c <__aeabi_ddiv>
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	f6bf af40 	bge.w	80098c6 <__ieee754_pow+0x3e>
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009a4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009a50:	431c      	orrs	r4, r3
 8009a52:	d108      	bne.n	8009a66 <__ieee754_pow+0x1de>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f7f6 fc14 	bl	8000288 <__aeabi_dsub>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	e78f      	b.n	8009986 <__ieee754_pow+0xfe>
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	f47f af2c 	bne.w	80098c6 <__ieee754_pow+0x3e>
 8009a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a72:	4619      	mov	r1, r3
 8009a74:	e727      	b.n	80098c6 <__ieee754_pow+0x3e>
 8009a76:	0feb      	lsrs	r3, r5, #31
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	9306      	str	r3, [sp, #24]
 8009a7c:	9a06      	ldr	r2, [sp, #24]
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	d102      	bne.n	8009a8a <__ieee754_pow+0x202>
 8009a84:	4632      	mov	r2, r6
 8009a86:	463b      	mov	r3, r7
 8009a88:	e7e6      	b.n	8009a58 <__ieee754_pow+0x1d0>
 8009a8a:	4b19      	ldr	r3, [pc, #100]	; (8009af0 <__ieee754_pow+0x268>)
 8009a8c:	4598      	cmp	r8, r3
 8009a8e:	f340 80fb 	ble.w	8009c88 <__ieee754_pow+0x400>
 8009a92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009a96:	4598      	cmp	r8, r3
 8009a98:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <__ieee754_pow+0x260>)
 8009a9a:	dd0c      	ble.n	8009ab6 <__ieee754_pow+0x22e>
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	dc0f      	bgt.n	8009ac0 <__ieee754_pow+0x238>
 8009aa0:	f1b9 0f00 	cmp.w	r9, #0
 8009aa4:	da0f      	bge.n	8009ac6 <__ieee754_pow+0x23e>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	b009      	add	sp, #36	; 0x24
 8009aaa:	ecbd 8b06 	vpop	{d8-d10}
 8009aae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab2:	f000 bcc2 	b.w	800a43a <__math_oflow>
 8009ab6:	429c      	cmp	r4, r3
 8009ab8:	dbf2      	blt.n	8009aa0 <__ieee754_pow+0x218>
 8009aba:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <__ieee754_pow+0x25c>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	dd19      	ble.n	8009af4 <__ieee754_pow+0x26c>
 8009ac0:	f1b9 0f00 	cmp.w	r9, #0
 8009ac4:	dcef      	bgt.n	8009aa6 <__ieee754_pow+0x21e>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	b009      	add	sp, #36	; 0x24
 8009aca:	ecbd 8b06 	vpop	{d8-d10}
 8009ace:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad2:	f000 bca9 	b.w	800a428 <__math_uflow>
 8009ad6:	bf00      	nop
 8009ad8:	fff00000 	.word	0xfff00000
 8009adc:	7ff00000 	.word	0x7ff00000
 8009ae0:	433fffff 	.word	0x433fffff
 8009ae4:	3ff00000 	.word	0x3ff00000
 8009ae8:	3fefffff 	.word	0x3fefffff
 8009aec:	3fe00000 	.word	0x3fe00000
 8009af0:	41e00000 	.word	0x41e00000
 8009af4:	4b60      	ldr	r3, [pc, #384]	; (8009c78 <__ieee754_pow+0x3f0>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	f7f6 fbc6 	bl	8000288 <__aeabi_dsub>
 8009afc:	a354      	add	r3, pc, #336	; (adr r3, 8009c50 <__ieee754_pow+0x3c8>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	4604      	mov	r4, r0
 8009b04:	460d      	mov	r5, r1
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	a353      	add	r3, pc, #332	; (adr r3, 8009c58 <__ieee754_pow+0x3d0>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	4606      	mov	r6, r0
 8009b12:	460f      	mov	r7, r1
 8009b14:	4620      	mov	r0, r4
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fd6e 	bl	80005f8 <__aeabi_dmul>
 8009b1c:	4b57      	ldr	r3, [pc, #348]	; (8009c7c <__ieee754_pow+0x3f4>)
 8009b1e:	4682      	mov	sl, r0
 8009b20:	468b      	mov	fp, r1
 8009b22:	2200      	movs	r2, #0
 8009b24:	4620      	mov	r0, r4
 8009b26:	4629      	mov	r1, r5
 8009b28:	f7f6 fd66 	bl	80005f8 <__aeabi_dmul>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	460b      	mov	r3, r1
 8009b30:	a14b      	add	r1, pc, #300	; (adr r1, 8009c60 <__ieee754_pow+0x3d8>)
 8009b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	2000      	movs	r0, #0
 8009b48:	494d      	ldr	r1, [pc, #308]	; (8009c80 <__ieee754_pow+0x3f8>)
 8009b4a:	f7f6 fb9d 	bl	8000288 <__aeabi_dsub>
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4680      	mov	r8, r0
 8009b52:	4689      	mov	r9, r1
 8009b54:	462b      	mov	r3, r5
 8009b56:	4620      	mov	r0, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4640      	mov	r0, r8
 8009b64:	4649      	mov	r1, r9
 8009b66:	f7f6 fd47 	bl	80005f8 <__aeabi_dmul>
 8009b6a:	a33f      	add	r3, pc, #252	; (adr r3, 8009c68 <__ieee754_pow+0x3e0>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 fd42 	bl	80005f8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4650      	mov	r0, sl
 8009b7a:	4659      	mov	r1, fp
 8009b7c:	f7f6 fb84 	bl	8000288 <__aeabi_dsub>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4680      	mov	r8, r0
 8009b86:	4689      	mov	r9, r1
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 fb7e 	bl	800028c <__adddf3>
 8009b90:	2000      	movs	r0, #0
 8009b92:	4632      	mov	r2, r6
 8009b94:	463b      	mov	r3, r7
 8009b96:	4604      	mov	r4, r0
 8009b98:	460d      	mov	r5, r1
 8009b9a:	f7f6 fb75 	bl	8000288 <__aeabi_dsub>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fb6f 	bl	8000288 <__aeabi_dsub>
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	9a06      	ldr	r2, [sp, #24]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	4682      	mov	sl, r0
 8009bb4:	468b      	mov	fp, r1
 8009bb6:	f040 81e7 	bne.w	8009f88 <__ieee754_pow+0x700>
 8009bba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009c70 <__ieee754_pow+0x3e8>
 8009bbe:	eeb0 8a47 	vmov.f32	s16, s14
 8009bc2:	eef0 8a67 	vmov.f32	s17, s15
 8009bc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bca:	2600      	movs	r6, #0
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bd4:	f7f6 fb58 	bl	8000288 <__aeabi_dsub>
 8009bd8:	4622      	mov	r2, r4
 8009bda:	462b      	mov	r3, r5
 8009bdc:	f7f6 fd0c 	bl	80005f8 <__aeabi_dmul>
 8009be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be4:	4680      	mov	r8, r0
 8009be6:	4689      	mov	r9, r1
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	f7f6 fd04 	bl	80005f8 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	463b      	mov	r3, r7
 8009c00:	4680      	mov	r8, r0
 8009c02:	4689      	mov	r9, r1
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4604      	mov	r4, r0
 8009c10:	460d      	mov	r5, r1
 8009c12:	4602      	mov	r2, r0
 8009c14:	4649      	mov	r1, r9
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7f6 fb38 	bl	800028c <__adddf3>
 8009c1c:	4b19      	ldr	r3, [pc, #100]	; (8009c84 <__ieee754_pow+0x3fc>)
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	ec45 4b19 	vmov	d9, r4, r5
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	468b      	mov	fp, r1
 8009c2a:	f340 82f0 	ble.w	800a20e <__ieee754_pow+0x986>
 8009c2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009c32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009c36:	4303      	orrs	r3, r0
 8009c38:	f000 81e4 	beq.w	800a004 <__ieee754_pow+0x77c>
 8009c3c:	ec51 0b18 	vmov	r0, r1, d8
 8009c40:	2200      	movs	r2, #0
 8009c42:	2300      	movs	r3, #0
 8009c44:	f7f6 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8009c48:	3800      	subs	r0, #0
 8009c4a:	bf18      	it	ne
 8009c4c:	2001      	movne	r0, #1
 8009c4e:	e72b      	b.n	8009aa8 <__ieee754_pow+0x220>
 8009c50:	60000000 	.word	0x60000000
 8009c54:	3ff71547 	.word	0x3ff71547
 8009c58:	f85ddf44 	.word	0xf85ddf44
 8009c5c:	3e54ae0b 	.word	0x3e54ae0b
 8009c60:	55555555 	.word	0x55555555
 8009c64:	3fd55555 	.word	0x3fd55555
 8009c68:	652b82fe 	.word	0x652b82fe
 8009c6c:	3ff71547 	.word	0x3ff71547
 8009c70:	00000000 	.word	0x00000000
 8009c74:	bff00000 	.word	0xbff00000
 8009c78:	3ff00000 	.word	0x3ff00000
 8009c7c:	3fd00000 	.word	0x3fd00000
 8009c80:	3fe00000 	.word	0x3fe00000
 8009c84:	408fffff 	.word	0x408fffff
 8009c88:	4bd5      	ldr	r3, [pc, #852]	; (8009fe0 <__ieee754_pow+0x758>)
 8009c8a:	402b      	ands	r3, r5
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	b92b      	cbnz	r3, 8009c9c <__ieee754_pow+0x414>
 8009c90:	4bd4      	ldr	r3, [pc, #848]	; (8009fe4 <__ieee754_pow+0x75c>)
 8009c92:	f7f6 fcb1 	bl	80005f8 <__aeabi_dmul>
 8009c96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	1523      	asrs	r3, r4, #20
 8009c9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ca2:	4413      	add	r3, r2
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	4bd0      	ldr	r3, [pc, #832]	; (8009fe8 <__ieee754_pow+0x760>)
 8009ca8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009cac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009cb6:	dd08      	ble.n	8009cca <__ieee754_pow+0x442>
 8009cb8:	4bcc      	ldr	r3, [pc, #816]	; (8009fec <__ieee754_pow+0x764>)
 8009cba:	429c      	cmp	r4, r3
 8009cbc:	f340 8162 	ble.w	8009f84 <__ieee754_pow+0x6fc>
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009cca:	2400      	movs	r4, #0
 8009ccc:	00e3      	lsls	r3, r4, #3
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	4bc7      	ldr	r3, [pc, #796]	; (8009ff0 <__ieee754_pow+0x768>)
 8009cd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cd6:	ed93 7b00 	vldr	d7, [r3]
 8009cda:	4629      	mov	r1, r5
 8009cdc:	ec53 2b17 	vmov	r2, r3, d7
 8009ce0:	eeb0 9a47 	vmov.f32	s18, s14
 8009ce4:	eef0 9a67 	vmov.f32	s19, s15
 8009ce8:	4682      	mov	sl, r0
 8009cea:	f7f6 facd 	bl	8000288 <__aeabi_dsub>
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	460f      	mov	r7, r1
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	ec51 0b19 	vmov	r0, r1, d9
 8009cfa:	f7f6 fac7 	bl	800028c <__adddf3>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	2000      	movs	r0, #0
 8009d04:	49bb      	ldr	r1, [pc, #748]	; (8009ff4 <__ieee754_pow+0x76c>)
 8009d06:	f7f6 fda1 	bl	800084c <__aeabi_ddiv>
 8009d0a:	ec41 0b1a 	vmov	d10, r0, r1
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4630      	mov	r0, r6
 8009d14:	4639      	mov	r1, r7
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d26:	46ab      	mov	fp, r5
 8009d28:	106d      	asrs	r5, r5, #1
 8009d2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009d2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009d32:	ec41 0b18 	vmov	d8, r0, r1
 8009d36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4614      	mov	r4, r2
 8009d42:	461d      	mov	r5, r3
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	4639      	mov	r1, r7
 8009d50:	f7f6 fa9a 	bl	8000288 <__aeabi_dsub>
 8009d54:	ec53 2b19 	vmov	r2, r3, d9
 8009d58:	4606      	mov	r6, r0
 8009d5a:	460f      	mov	r7, r1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fa92 	bl	8000288 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4650      	mov	r0, sl
 8009d6a:	4659      	mov	r1, fp
 8009d6c:	f7f6 fa8c 	bl	8000288 <__aeabi_dsub>
 8009d70:	4642      	mov	r2, r8
 8009d72:	464b      	mov	r3, r9
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fa82 	bl	8000288 <__aeabi_dsub>
 8009d84:	ec53 2b1a 	vmov	r2, r3, d10
 8009d88:	f7f6 fc36 	bl	80005f8 <__aeabi_dmul>
 8009d8c:	ec53 2b18 	vmov	r2, r3, d8
 8009d90:	ec41 0b19 	vmov	d9, r0, r1
 8009d94:	ec51 0b18 	vmov	r0, r1, d8
 8009d98:	f7f6 fc2e 	bl	80005f8 <__aeabi_dmul>
 8009d9c:	a37c      	add	r3, pc, #496	; (adr r3, 8009f90 <__ieee754_pow+0x708>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	f7f6 fc27 	bl	80005f8 <__aeabi_dmul>
 8009daa:	a37b      	add	r3, pc, #492	; (adr r3, 8009f98 <__ieee754_pow+0x710>)
 8009dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db0:	f7f6 fa6c 	bl	800028c <__adddf3>
 8009db4:	4622      	mov	r2, r4
 8009db6:	462b      	mov	r3, r5
 8009db8:	f7f6 fc1e 	bl	80005f8 <__aeabi_dmul>
 8009dbc:	a378      	add	r3, pc, #480	; (adr r3, 8009fa0 <__ieee754_pow+0x718>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	462b      	mov	r3, r5
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	a376      	add	r3, pc, #472	; (adr r3, 8009fa8 <__ieee754_pow+0x720>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f7f6 fa5a 	bl	800028c <__adddf3>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	f7f6 fc0c 	bl	80005f8 <__aeabi_dmul>
 8009de0:	a373      	add	r3, pc, #460	; (adr r3, 8009fb0 <__ieee754_pow+0x728>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fa51 	bl	800028c <__adddf3>
 8009dea:	4622      	mov	r2, r4
 8009dec:	462b      	mov	r3, r5
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	a371      	add	r3, pc, #452	; (adr r3, 8009fb8 <__ieee754_pow+0x730>)
 8009df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df8:	f7f6 fa48 	bl	800028c <__adddf3>
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460f      	mov	r7, r1
 8009e02:	462b      	mov	r3, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fbf0 	bl	80005f8 <__aeabi_dmul>
 8009e18:	4642      	mov	r2, r8
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	460d      	mov	r5, r1
 8009e1e:	464b      	mov	r3, r9
 8009e20:	ec51 0b18 	vmov	r0, r1, d8
 8009e24:	f7f6 fa32 	bl	800028c <__adddf3>
 8009e28:	ec53 2b19 	vmov	r2, r3, d9
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	4622      	mov	r2, r4
 8009e32:	462b      	mov	r3, r5
 8009e34:	f7f6 fa2a 	bl	800028c <__adddf3>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4682      	mov	sl, r0
 8009e3c:	468b      	mov	fp, r1
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fbd8 	bl	80005f8 <__aeabi_dmul>
 8009e48:	4b6b      	ldr	r3, [pc, #428]	; (8009ff8 <__ieee754_pow+0x770>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	f7f6 fa1c 	bl	800028c <__adddf3>
 8009e54:	4652      	mov	r2, sl
 8009e56:	465b      	mov	r3, fp
 8009e58:	f7f6 fa18 	bl	800028c <__adddf3>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	460d      	mov	r5, r1
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4640      	mov	r0, r8
 8009e68:	4649      	mov	r1, r9
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	4b62      	ldr	r3, [pc, #392]	; (8009ff8 <__ieee754_pow+0x770>)
 8009e70:	4680      	mov	r8, r0
 8009e72:	4689      	mov	r9, r1
 8009e74:	2200      	movs	r2, #0
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7f6 fa05 	bl	8000288 <__aeabi_dsub>
 8009e7e:	4632      	mov	r2, r6
 8009e80:	463b      	mov	r3, r7
 8009e82:	f7f6 fa01 	bl	8000288 <__aeabi_dsub>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4650      	mov	r0, sl
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	f7f6 f9fb 	bl	8000288 <__aeabi_dsub>
 8009e92:	ec53 2b18 	vmov	r2, r3, d8
 8009e96:	f7f6 fbaf 	bl	80005f8 <__aeabi_dmul>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	460f      	mov	r7, r1
 8009ea0:	462b      	mov	r3, r5
 8009ea2:	ec51 0b19 	vmov	r0, r1, d9
 8009ea6:	f7f6 fba7 	bl	80005f8 <__aeabi_dmul>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	4630      	mov	r0, r6
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	f7f6 f9eb 	bl	800028c <__adddf3>
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460f      	mov	r7, r1
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	f7f6 f9e3 	bl	800028c <__adddf3>
 8009ec6:	a33e      	add	r3, pc, #248	; (adr r3, 8009fc0 <__ieee754_pow+0x738>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	f7f6 fb91 	bl	80005f8 <__aeabi_dmul>
 8009ed6:	4642      	mov	r2, r8
 8009ed8:	ec41 0b18 	vmov	d8, r0, r1
 8009edc:	464b      	mov	r3, r9
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 f9d1 	bl	8000288 <__aeabi_dsub>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	f7f6 f9cb 	bl	8000288 <__aeabi_dsub>
 8009ef2:	a335      	add	r3, pc, #212	; (adr r3, 8009fc8 <__ieee754_pow+0x740>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 fb7e 	bl	80005f8 <__aeabi_dmul>
 8009efc:	a334      	add	r3, pc, #208	; (adr r3, 8009fd0 <__ieee754_pow+0x748>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	4606      	mov	r6, r0
 8009f04:	460f      	mov	r7, r1
 8009f06:	4620      	mov	r0, r4
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7f6 fb75 	bl	80005f8 <__aeabi_dmul>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4630      	mov	r0, r6
 8009f14:	4639      	mov	r1, r7
 8009f16:	f7f6 f9b9 	bl	800028c <__adddf3>
 8009f1a:	9a07      	ldr	r2, [sp, #28]
 8009f1c:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <__ieee754_pow+0x774>)
 8009f1e:	4413      	add	r3, r2
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 f9b2 	bl	800028c <__adddf3>
 8009f28:	4682      	mov	sl, r0
 8009f2a:	9805      	ldr	r0, [sp, #20]
 8009f2c:	468b      	mov	fp, r1
 8009f2e:	f7f6 faf9 	bl	8000524 <__aeabi_i2d>
 8009f32:	9a07      	ldr	r2, [sp, #28]
 8009f34:	4b32      	ldr	r3, [pc, #200]	; (800a000 <__ieee754_pow+0x778>)
 8009f36:	4413      	add	r3, r2
 8009f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	4652      	mov	r2, sl
 8009f42:	465b      	mov	r3, fp
 8009f44:	ec51 0b18 	vmov	r0, r1, d8
 8009f48:	f7f6 f9a0 	bl	800028c <__adddf3>
 8009f4c:	4642      	mov	r2, r8
 8009f4e:	464b      	mov	r3, r9
 8009f50:	f7f6 f99c 	bl	800028c <__adddf3>
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	f7f6 f998 	bl	800028c <__adddf3>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4632      	mov	r2, r6
 8009f60:	463b      	mov	r3, r7
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	f7f6 f98f 	bl	8000288 <__aeabi_dsub>
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	f7f6 f98b 	bl	8000288 <__aeabi_dsub>
 8009f72:	ec53 2b18 	vmov	r2, r3, d8
 8009f76:	f7f6 f987 	bl	8000288 <__aeabi_dsub>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4650      	mov	r0, sl
 8009f80:	4659      	mov	r1, fp
 8009f82:	e610      	b.n	8009ba6 <__ieee754_pow+0x31e>
 8009f84:	2401      	movs	r4, #1
 8009f86:	e6a1      	b.n	8009ccc <__ieee754_pow+0x444>
 8009f88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009fd8 <__ieee754_pow+0x750>
 8009f8c:	e617      	b.n	8009bbe <__ieee754_pow+0x336>
 8009f8e:	bf00      	nop
 8009f90:	4a454eef 	.word	0x4a454eef
 8009f94:	3fca7e28 	.word	0x3fca7e28
 8009f98:	93c9db65 	.word	0x93c9db65
 8009f9c:	3fcd864a 	.word	0x3fcd864a
 8009fa0:	a91d4101 	.word	0xa91d4101
 8009fa4:	3fd17460 	.word	0x3fd17460
 8009fa8:	518f264d 	.word	0x518f264d
 8009fac:	3fd55555 	.word	0x3fd55555
 8009fb0:	db6fabff 	.word	0xdb6fabff
 8009fb4:	3fdb6db6 	.word	0x3fdb6db6
 8009fb8:	33333303 	.word	0x33333303
 8009fbc:	3fe33333 	.word	0x3fe33333
 8009fc0:	e0000000 	.word	0xe0000000
 8009fc4:	3feec709 	.word	0x3feec709
 8009fc8:	dc3a03fd 	.word	0xdc3a03fd
 8009fcc:	3feec709 	.word	0x3feec709
 8009fd0:	145b01f5 	.word	0x145b01f5
 8009fd4:	be3e2fe0 	.word	0xbe3e2fe0
 8009fd8:	00000000 	.word	0x00000000
 8009fdc:	3ff00000 	.word	0x3ff00000
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	43400000 	.word	0x43400000
 8009fe8:	0003988e 	.word	0x0003988e
 8009fec:	000bb679 	.word	0x000bb679
 8009ff0:	0800aa70 	.word	0x0800aa70
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	40080000 	.word	0x40080000
 8009ffc:	0800aa90 	.word	0x0800aa90
 800a000:	0800aa80 	.word	0x0800aa80
 800a004:	a3b3      	add	r3, pc, #716	; (adr r3, 800a2d4 <__ieee754_pow+0xa4c>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	4640      	mov	r0, r8
 800a00c:	4649      	mov	r1, r9
 800a00e:	f7f6 f93d 	bl	800028c <__adddf3>
 800a012:	4622      	mov	r2, r4
 800a014:	ec41 0b1a 	vmov	d10, r0, r1
 800a018:	462b      	mov	r3, r5
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 f933 	bl	8000288 <__aeabi_dsub>
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	ec51 0b1a 	vmov	r0, r1, d10
 800a02a:	f7f6 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f47f ae04 	bne.w	8009c3c <__ieee754_pow+0x3b4>
 800a034:	4aa2      	ldr	r2, [pc, #648]	; (800a2c0 <__ieee754_pow+0xa38>)
 800a036:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a03a:	4293      	cmp	r3, r2
 800a03c:	f340 8107 	ble.w	800a24e <__ieee754_pow+0x9c6>
 800a040:	151b      	asrs	r3, r3, #20
 800a042:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a046:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a04a:	fa4a fa03 	asr.w	sl, sl, r3
 800a04e:	44da      	add	sl, fp
 800a050:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a054:	489b      	ldr	r0, [pc, #620]	; (800a2c4 <__ieee754_pow+0xa3c>)
 800a056:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a05a:	4108      	asrs	r0, r1
 800a05c:	ea00 030a 	and.w	r3, r0, sl
 800a060:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a064:	f1c1 0114 	rsb	r1, r1, #20
 800a068:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a06c:	fa4a fa01 	asr.w	sl, sl, r1
 800a070:	f1bb 0f00 	cmp.w	fp, #0
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	4620      	mov	r0, r4
 800a07a:	4629      	mov	r1, r5
 800a07c:	bfb8      	it	lt
 800a07e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a082:	f7f6 f901 	bl	8000288 <__aeabi_dsub>
 800a086:	ec41 0b19 	vmov	d9, r0, r1
 800a08a:	4642      	mov	r2, r8
 800a08c:	464b      	mov	r3, r9
 800a08e:	ec51 0b19 	vmov	r0, r1, d9
 800a092:	f7f6 f8fb 	bl	800028c <__adddf3>
 800a096:	a37a      	add	r3, pc, #488	; (adr r3, 800a280 <__ieee754_pow+0x9f8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	2000      	movs	r0, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	460d      	mov	r5, r1
 800a0a2:	f7f6 faa9 	bl	80005f8 <__aeabi_dmul>
 800a0a6:	ec53 2b19 	vmov	r2, r3, d9
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7f6 f8e9 	bl	8000288 <__aeabi_dsub>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 f8e3 	bl	8000288 <__aeabi_dsub>
 800a0c2:	a371      	add	r3, pc, #452	; (adr r3, 800a288 <__ieee754_pow+0xa00>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7f6 fa96 	bl	80005f8 <__aeabi_dmul>
 800a0cc:	a370      	add	r3, pc, #448	; (adr r3, 800a290 <__ieee754_pow+0xa08>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	4689      	mov	r9, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f8d1 	bl	800028c <__adddf3>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	f7f6 f8c9 	bl	800028c <__adddf3>
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4680      	mov	r8, r0
 800a100:	4689      	mov	r9, r1
 800a102:	f7f6 f8c1 	bl	8000288 <__aeabi_dsub>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4620      	mov	r0, r4
 800a10c:	4629      	mov	r1, r5
 800a10e:	f7f6 f8bb 	bl	8000288 <__aeabi_dsub>
 800a112:	4642      	mov	r2, r8
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	464b      	mov	r3, r9
 800a11a:	4640      	mov	r0, r8
 800a11c:	4649      	mov	r1, r9
 800a11e:	f7f6 fa6b 	bl	80005f8 <__aeabi_dmul>
 800a122:	a35d      	add	r3, pc, #372	; (adr r3, 800a298 <__ieee754_pow+0xa10>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	f7f6 fa64 	bl	80005f8 <__aeabi_dmul>
 800a130:	a35b      	add	r3, pc, #364	; (adr r3, 800a2a0 <__ieee754_pow+0xa18>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	f7f6 fa5b 	bl	80005f8 <__aeabi_dmul>
 800a142:	a359      	add	r3, pc, #356	; (adr r3, 800a2a8 <__ieee754_pow+0xa20>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f8a0 	bl	800028c <__adddf3>
 800a14c:	4622      	mov	r2, r4
 800a14e:	462b      	mov	r3, r5
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	a356      	add	r3, pc, #344	; (adr r3, 800a2b0 <__ieee754_pow+0xa28>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	f7f6 fa49 	bl	80005f8 <__aeabi_dmul>
 800a166:	a354      	add	r3, pc, #336	; (adr r3, 800a2b8 <__ieee754_pow+0xa30>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f88e 	bl	800028c <__adddf3>
 800a170:	4622      	mov	r2, r4
 800a172:	462b      	mov	r3, r5
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f6 f882 	bl	8000288 <__aeabi_dsub>
 800a184:	4604      	mov	r4, r0
 800a186:	460d      	mov	r5, r1
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4640      	mov	r0, r8
 800a18e:	4649      	mov	r1, r9
 800a190:	f7f6 fa32 	bl	80005f8 <__aeabi_dmul>
 800a194:	2200      	movs	r2, #0
 800a196:	ec41 0b19 	vmov	d9, r0, r1
 800a19a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 f871 	bl	8000288 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	ec51 0b19 	vmov	r0, r1, d9
 800a1ae:	f7f6 fb4d 	bl	800084c <__aeabi_ddiv>
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	463b      	mov	r3, r7
 800a1ba:	4640      	mov	r0, r8
 800a1bc:	4649      	mov	r1, r9
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	f7f6 f861 	bl	800028c <__adddf3>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	f7f6 f859 	bl	8000288 <__aeabi_dsub>
 800a1d6:	4642      	mov	r2, r8
 800a1d8:	464b      	mov	r3, r9
 800a1da:	f7f6 f855 	bl	8000288 <__aeabi_dsub>
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4939      	ldr	r1, [pc, #228]	; (800a2c8 <__ieee754_pow+0xa40>)
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f7f6 f84f 	bl	8000288 <__aeabi_dsub>
 800a1ea:	ec41 0b10 	vmov	d0, r0, r1
 800a1ee:	ee10 3a90 	vmov	r3, s1
 800a1f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a1f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1fa:	da2b      	bge.n	800a254 <__ieee754_pow+0x9cc>
 800a1fc:	4650      	mov	r0, sl
 800a1fe:	f000 f877 	bl	800a2f0 <scalbn>
 800a202:	ec51 0b10 	vmov	r0, r1, d0
 800a206:	ec53 2b18 	vmov	r2, r3, d8
 800a20a:	f7ff bbee 	b.w	80099ea <__ieee754_pow+0x162>
 800a20e:	4b2f      	ldr	r3, [pc, #188]	; (800a2cc <__ieee754_pow+0xa44>)
 800a210:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a214:	429e      	cmp	r6, r3
 800a216:	f77f af0d 	ble.w	800a034 <__ieee754_pow+0x7ac>
 800a21a:	4b2d      	ldr	r3, [pc, #180]	; (800a2d0 <__ieee754_pow+0xa48>)
 800a21c:	440b      	add	r3, r1
 800a21e:	4303      	orrs	r3, r0
 800a220:	d009      	beq.n	800a236 <__ieee754_pow+0x9ae>
 800a222:	ec51 0b18 	vmov	r0, r1, d8
 800a226:	2200      	movs	r2, #0
 800a228:	2300      	movs	r3, #0
 800a22a:	f7f6 fc57 	bl	8000adc <__aeabi_dcmplt>
 800a22e:	3800      	subs	r0, #0
 800a230:	bf18      	it	ne
 800a232:	2001      	movne	r0, #1
 800a234:	e448      	b.n	8009ac8 <__ieee754_pow+0x240>
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	f7f6 f825 	bl	8000288 <__aeabi_dsub>
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	f7f6 fc5f 	bl	8000b04 <__aeabi_dcmpge>
 800a246:	2800      	cmp	r0, #0
 800a248:	f43f aef4 	beq.w	800a034 <__ieee754_pow+0x7ac>
 800a24c:	e7e9      	b.n	800a222 <__ieee754_pow+0x99a>
 800a24e:	f04f 0a00 	mov.w	sl, #0
 800a252:	e71a      	b.n	800a08a <__ieee754_pow+0x802>
 800a254:	ec51 0b10 	vmov	r0, r1, d0
 800a258:	4619      	mov	r1, r3
 800a25a:	e7d4      	b.n	800a206 <__ieee754_pow+0x97e>
 800a25c:	491a      	ldr	r1, [pc, #104]	; (800a2c8 <__ieee754_pow+0xa40>)
 800a25e:	2000      	movs	r0, #0
 800a260:	f7ff bb31 	b.w	80098c6 <__ieee754_pow+0x3e>
 800a264:	2000      	movs	r0, #0
 800a266:	2100      	movs	r1, #0
 800a268:	f7ff bb2d 	b.w	80098c6 <__ieee754_pow+0x3e>
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f7ff bb29 	b.w	80098c6 <__ieee754_pow+0x3e>
 800a274:	9204      	str	r2, [sp, #16]
 800a276:	f7ff bb7b 	b.w	8009970 <__ieee754_pow+0xe8>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f7ff bb65 	b.w	800994a <__ieee754_pow+0xc2>
 800a280:	00000000 	.word	0x00000000
 800a284:	3fe62e43 	.word	0x3fe62e43
 800a288:	fefa39ef 	.word	0xfefa39ef
 800a28c:	3fe62e42 	.word	0x3fe62e42
 800a290:	0ca86c39 	.word	0x0ca86c39
 800a294:	be205c61 	.word	0xbe205c61
 800a298:	72bea4d0 	.word	0x72bea4d0
 800a29c:	3e663769 	.word	0x3e663769
 800a2a0:	c5d26bf1 	.word	0xc5d26bf1
 800a2a4:	3ebbbd41 	.word	0x3ebbbd41
 800a2a8:	af25de2c 	.word	0xaf25de2c
 800a2ac:	3f11566a 	.word	0x3f11566a
 800a2b0:	16bebd93 	.word	0x16bebd93
 800a2b4:	3f66c16c 	.word	0x3f66c16c
 800a2b8:	5555553e 	.word	0x5555553e
 800a2bc:	3fc55555 	.word	0x3fc55555
 800a2c0:	3fe00000 	.word	0x3fe00000
 800a2c4:	fff00000 	.word	0xfff00000
 800a2c8:	3ff00000 	.word	0x3ff00000
 800a2cc:	4090cbff 	.word	0x4090cbff
 800a2d0:	3f6f3400 	.word	0x3f6f3400
 800a2d4:	652b82fe 	.word	0x652b82fe
 800a2d8:	3c971547 	.word	0x3c971547

0800a2dc <fabs>:
 800a2dc:	ec51 0b10 	vmov	r0, r1, d0
 800a2e0:	ee10 2a10 	vmov	r2, s0
 800a2e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2e8:	ec43 2b10 	vmov	d0, r2, r3
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <scalbn>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	ec55 4b10 	vmov	r4, r5, d0
 800a2f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	b999      	cbnz	r1, 800a328 <scalbn+0x38>
 800a300:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a304:	4323      	orrs	r3, r4
 800a306:	d03f      	beq.n	800a388 <scalbn+0x98>
 800a308:	4b35      	ldr	r3, [pc, #212]	; (800a3e0 <scalbn+0xf0>)
 800a30a:	4629      	mov	r1, r5
 800a30c:	ee10 0a10 	vmov	r0, s0
 800a310:	2200      	movs	r2, #0
 800a312:	f7f6 f971 	bl	80005f8 <__aeabi_dmul>
 800a316:	4b33      	ldr	r3, [pc, #204]	; (800a3e4 <scalbn+0xf4>)
 800a318:	429e      	cmp	r6, r3
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	da10      	bge.n	800a342 <scalbn+0x52>
 800a320:	a327      	add	r3, pc, #156	; (adr r3, 800a3c0 <scalbn+0xd0>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	e01f      	b.n	800a368 <scalbn+0x78>
 800a328:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a32c:	4291      	cmp	r1, r2
 800a32e:	d10c      	bne.n	800a34a <scalbn+0x5a>
 800a330:	ee10 2a10 	vmov	r2, s0
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f5 ffa8 	bl	800028c <__adddf3>
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	e022      	b.n	800a388 <scalbn+0x98>
 800a342:	460b      	mov	r3, r1
 800a344:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a348:	3936      	subs	r1, #54	; 0x36
 800a34a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a34e:	4296      	cmp	r6, r2
 800a350:	dd0d      	ble.n	800a36e <scalbn+0x7e>
 800a352:	2d00      	cmp	r5, #0
 800a354:	a11c      	add	r1, pc, #112	; (adr r1, 800a3c8 <scalbn+0xd8>)
 800a356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35a:	da02      	bge.n	800a362 <scalbn+0x72>
 800a35c:	a11c      	add	r1, pc, #112	; (adr r1, 800a3d0 <scalbn+0xe0>)
 800a35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a362:	a319      	add	r3, pc, #100	; (adr r3, 800a3c8 <scalbn+0xd8>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f946 	bl	80005f8 <__aeabi_dmul>
 800a36c:	e7e6      	b.n	800a33c <scalbn+0x4c>
 800a36e:	1872      	adds	r2, r6, r1
 800a370:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a374:	428a      	cmp	r2, r1
 800a376:	dcec      	bgt.n	800a352 <scalbn+0x62>
 800a378:	2a00      	cmp	r2, #0
 800a37a:	dd08      	ble.n	800a38e <scalbn+0x9e>
 800a37c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a380:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a384:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a388:	ec45 4b10 	vmov	d0, r4, r5
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a392:	da08      	bge.n	800a3a6 <scalbn+0xb6>
 800a394:	2d00      	cmp	r5, #0
 800a396:	a10a      	add	r1, pc, #40	; (adr r1, 800a3c0 <scalbn+0xd0>)
 800a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39c:	dac0      	bge.n	800a320 <scalbn+0x30>
 800a39e:	a10e      	add	r1, pc, #56	; (adr r1, 800a3d8 <scalbn+0xe8>)
 800a3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a4:	e7bc      	b.n	800a320 <scalbn+0x30>
 800a3a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3aa:	3236      	adds	r2, #54	; 0x36
 800a3ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <scalbn+0xf8>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	e7d5      	b.n	800a368 <scalbn+0x78>
 800a3bc:	f3af 8000 	nop.w
 800a3c0:	c2f8f359 	.word	0xc2f8f359
 800a3c4:	01a56e1f 	.word	0x01a56e1f
 800a3c8:	8800759c 	.word	0x8800759c
 800a3cc:	7e37e43c 	.word	0x7e37e43c
 800a3d0:	8800759c 	.word	0x8800759c
 800a3d4:	fe37e43c 	.word	0xfe37e43c
 800a3d8:	c2f8f359 	.word	0xc2f8f359
 800a3dc:	81a56e1f 	.word	0x81a56e1f
 800a3e0:	43500000 	.word	0x43500000
 800a3e4:	ffff3cb0 	.word	0xffff3cb0
 800a3e8:	3c900000 	.word	0x3c900000

0800a3ec <with_errno>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	f7fd f920 	bl	8007638 <__errno>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	6006      	str	r6, [r0, #0]
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}

0800a400 <xflow>:
 800a400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a402:	4614      	mov	r4, r2
 800a404:	461d      	mov	r5, r3
 800a406:	b108      	cbz	r0, 800a40c <xflow+0xc>
 800a408:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a40c:	e9cd 2300 	strd	r2, r3, [sp]
 800a410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a414:	4620      	mov	r0, r4
 800a416:	4629      	mov	r1, r5
 800a418:	f7f6 f8ee 	bl	80005f8 <__aeabi_dmul>
 800a41c:	2222      	movs	r2, #34	; 0x22
 800a41e:	b003      	add	sp, #12
 800a420:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a424:	f7ff bfe2 	b.w	800a3ec <with_errno>

0800a428 <__math_uflow>:
 800a428:	b508      	push	{r3, lr}
 800a42a:	2200      	movs	r2, #0
 800a42c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a430:	f7ff ffe6 	bl	800a400 <xflow>
 800a434:	ec41 0b10 	vmov	d0, r0, r1
 800a438:	bd08      	pop	{r3, pc}

0800a43a <__math_oflow>:
 800a43a:	b508      	push	{r3, lr}
 800a43c:	2200      	movs	r2, #0
 800a43e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a442:	f7ff ffdd 	bl	800a400 <xflow>
 800a446:	ec41 0b10 	vmov	d0, r0, r1
 800a44a:	bd08      	pop	{r3, pc}

0800a44c <__ieee754_sqrt>:
 800a44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	ec55 4b10 	vmov	r4, r5, d0
 800a454:	4e67      	ldr	r6, [pc, #412]	; (800a5f4 <__ieee754_sqrt+0x1a8>)
 800a456:	43ae      	bics	r6, r5
 800a458:	ee10 0a10 	vmov	r0, s0
 800a45c:	ee10 2a10 	vmov	r2, s0
 800a460:	4629      	mov	r1, r5
 800a462:	462b      	mov	r3, r5
 800a464:	d10d      	bne.n	800a482 <__ieee754_sqrt+0x36>
 800a466:	f7f6 f8c7 	bl	80005f8 <__aeabi_dmul>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	f7f5 ff0b 	bl	800028c <__adddf3>
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	ec45 4b10 	vmov	d0, r4, r5
 800a47e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a482:	2d00      	cmp	r5, #0
 800a484:	dc0b      	bgt.n	800a49e <__ieee754_sqrt+0x52>
 800a486:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a48a:	4326      	orrs	r6, r4
 800a48c:	d0f5      	beq.n	800a47a <__ieee754_sqrt+0x2e>
 800a48e:	b135      	cbz	r5, 800a49e <__ieee754_sqrt+0x52>
 800a490:	f7f5 fefa 	bl	8000288 <__aeabi_dsub>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	f7f6 f9d8 	bl	800084c <__aeabi_ddiv>
 800a49c:	e7eb      	b.n	800a476 <__ieee754_sqrt+0x2a>
 800a49e:	1509      	asrs	r1, r1, #20
 800a4a0:	f000 808d 	beq.w	800a5be <__ieee754_sqrt+0x172>
 800a4a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4a8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4b0:	07c9      	lsls	r1, r1, #31
 800a4b2:	bf5c      	itt	pl
 800a4b4:	005b      	lslpl	r3, r3, #1
 800a4b6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a4ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4be:	bf58      	it	pl
 800a4c0:	0052      	lslpl	r2, r2, #1
 800a4c2:	2500      	movs	r5, #0
 800a4c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a4c8:	1076      	asrs	r6, r6, #1
 800a4ca:	0052      	lsls	r2, r2, #1
 800a4cc:	f04f 0e16 	mov.w	lr, #22
 800a4d0:	46ac      	mov	ip, r5
 800a4d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4d6:	eb0c 0001 	add.w	r0, ip, r1
 800a4da:	4298      	cmp	r0, r3
 800a4dc:	bfde      	ittt	le
 800a4de:	1a1b      	suble	r3, r3, r0
 800a4e0:	eb00 0c01 	addle.w	ip, r0, r1
 800a4e4:	186d      	addle	r5, r5, r1
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	f1be 0e01 	subs.w	lr, lr, #1
 800a4ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a4f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a4f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a4f8:	d1ed      	bne.n	800a4d6 <__ieee754_sqrt+0x8a>
 800a4fa:	4674      	mov	r4, lr
 800a4fc:	2720      	movs	r7, #32
 800a4fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a502:	4563      	cmp	r3, ip
 800a504:	eb01 000e 	add.w	r0, r1, lr
 800a508:	dc02      	bgt.n	800a510 <__ieee754_sqrt+0xc4>
 800a50a:	d113      	bne.n	800a534 <__ieee754_sqrt+0xe8>
 800a50c:	4290      	cmp	r0, r2
 800a50e:	d811      	bhi.n	800a534 <__ieee754_sqrt+0xe8>
 800a510:	2800      	cmp	r0, #0
 800a512:	eb00 0e01 	add.w	lr, r0, r1
 800a516:	da57      	bge.n	800a5c8 <__ieee754_sqrt+0x17c>
 800a518:	f1be 0f00 	cmp.w	lr, #0
 800a51c:	db54      	blt.n	800a5c8 <__ieee754_sqrt+0x17c>
 800a51e:	f10c 0801 	add.w	r8, ip, #1
 800a522:	eba3 030c 	sub.w	r3, r3, ip
 800a526:	4290      	cmp	r0, r2
 800a528:	bf88      	it	hi
 800a52a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a52e:	1a12      	subs	r2, r2, r0
 800a530:	440c      	add	r4, r1
 800a532:	46c4      	mov	ip, r8
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	3f01      	subs	r7, #1
 800a538:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a53c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a540:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a544:	d1dd      	bne.n	800a502 <__ieee754_sqrt+0xb6>
 800a546:	4313      	orrs	r3, r2
 800a548:	d01b      	beq.n	800a582 <__ieee754_sqrt+0x136>
 800a54a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a5f8 <__ieee754_sqrt+0x1ac>
 800a54e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a5fc <__ieee754_sqrt+0x1b0>
 800a552:	e9da 0100 	ldrd	r0, r1, [sl]
 800a556:	e9db 2300 	ldrd	r2, r3, [fp]
 800a55a:	f7f5 fe95 	bl	8000288 <__aeabi_dsub>
 800a55e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4640      	mov	r0, r8
 800a568:	4649      	mov	r1, r9
 800a56a:	f7f6 fac1 	bl	8000af0 <__aeabi_dcmple>
 800a56e:	b140      	cbz	r0, 800a582 <__ieee754_sqrt+0x136>
 800a570:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a574:	e9da 0100 	ldrd	r0, r1, [sl]
 800a578:	e9db 2300 	ldrd	r2, r3, [fp]
 800a57c:	d126      	bne.n	800a5cc <__ieee754_sqrt+0x180>
 800a57e:	3501      	adds	r5, #1
 800a580:	463c      	mov	r4, r7
 800a582:	106a      	asrs	r2, r5, #1
 800a584:	0863      	lsrs	r3, r4, #1
 800a586:	07e9      	lsls	r1, r5, #31
 800a588:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a58c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a590:	bf48      	it	mi
 800a592:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a596:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a59a:	461c      	mov	r4, r3
 800a59c:	e76d      	b.n	800a47a <__ieee754_sqrt+0x2e>
 800a59e:	0ad3      	lsrs	r3, r2, #11
 800a5a0:	3815      	subs	r0, #21
 800a5a2:	0552      	lsls	r2, r2, #21
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0fa      	beq.n	800a59e <__ieee754_sqrt+0x152>
 800a5a8:	02dc      	lsls	r4, r3, #11
 800a5aa:	d50a      	bpl.n	800a5c2 <__ieee754_sqrt+0x176>
 800a5ac:	f1c1 0420 	rsb	r4, r1, #32
 800a5b0:	fa22 f404 	lsr.w	r4, r2, r4
 800a5b4:	1e4d      	subs	r5, r1, #1
 800a5b6:	408a      	lsls	r2, r1
 800a5b8:	4323      	orrs	r3, r4
 800a5ba:	1b41      	subs	r1, r0, r5
 800a5bc:	e772      	b.n	800a4a4 <__ieee754_sqrt+0x58>
 800a5be:	4608      	mov	r0, r1
 800a5c0:	e7f0      	b.n	800a5a4 <__ieee754_sqrt+0x158>
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	3101      	adds	r1, #1
 800a5c6:	e7ef      	b.n	800a5a8 <__ieee754_sqrt+0x15c>
 800a5c8:	46e0      	mov	r8, ip
 800a5ca:	e7aa      	b.n	800a522 <__ieee754_sqrt+0xd6>
 800a5cc:	f7f5 fe5e 	bl	800028c <__adddf3>
 800a5d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	f7f6 fa7e 	bl	8000adc <__aeabi_dcmplt>
 800a5e0:	b120      	cbz	r0, 800a5ec <__ieee754_sqrt+0x1a0>
 800a5e2:	1ca0      	adds	r0, r4, #2
 800a5e4:	bf08      	it	eq
 800a5e6:	3501      	addeq	r5, #1
 800a5e8:	3402      	adds	r4, #2
 800a5ea:	e7ca      	b.n	800a582 <__ieee754_sqrt+0x136>
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	f024 0401 	bic.w	r4, r4, #1
 800a5f2:	e7c6      	b.n	800a582 <__ieee754_sqrt+0x136>
 800a5f4:	7ff00000 	.word	0x7ff00000
 800a5f8:	200001d8 	.word	0x200001d8
 800a5fc:	200001e0 	.word	0x200001e0

0800a600 <_init>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	bf00      	nop
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr

0800a60c <_fini>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	bf00      	nop
 800a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a612:	bc08      	pop	{r3}
 800a614:	469e      	mov	lr, r3
 800a616:	4770      	bx	lr
